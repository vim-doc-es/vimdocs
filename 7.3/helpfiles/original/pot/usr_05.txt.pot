# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the Vim package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Vim 7.3\n"
"Report-Msgid-Bugs-To: vim@bugs.org\n"
"POT-Creation-Date: 2010-11-30 20:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: original/TXT/intro.txt:18 original/TXT/intro.txt:79
#: original/TXT/intro.txt:180 original/TXT/intro.txt:290
#: original/TXT/intro.txt:518 original/TXT/intro.txt:596
#: original/TXT/intro.txt:689 original/TXT/intro.txt:817
#: original/TXT/intro.txt:880 original/TXT/usr_toc.txt:7
#: original/TXT/usr_toc.txt:58 original/TXT/usr_toc.txt:172
#: original/TXT/usr_toc.txt:281 original/TXT/usr_toc.txt:340
#: original/TXT/usr_toc.txt:352 original/TXT/usr_01.txt:19
#: original/TXT/usr_01.txt:50 original/TXT/usr_01.txt:100
#: original/TXT/usr_01.txt:181 original/TXT/usr_02.txt:25
#: original/TXT/usr_02.txt:69 original/TXT/usr_02.txt:130
#: original/TXT/usr_02.txt:179 original/TXT/usr_02.txt:239
#: original/TXT/usr_02.txt:307 original/TXT/usr_02.txt:369
#: original/TXT/usr_02.txt:406 original/TXT/usr_02.txt:560
#: original/TXT/usr_03.txt:28 original/TXT/usr_03.txt:74
#: original/TXT/usr_03.txt:101 original/TXT/usr_03.txt:147
#: original/TXT/usr_03.txt:172 original/TXT/usr_03.txt:223
#: original/TXT/usr_03.txt:265 original/TXT/usr_03.txt:320
#: original/TXT/usr_03.txt:491 original/TXT/usr_03.txt:552
#: original/TXT/usr_03.txt:650 original/TXT/usr_04.txt:27
#: original/TXT/usr_04.txt:74 original/TXT/usr_04.txt:160
#: original/TXT/usr_04.txt:194 original/TXT/usr_04.txt:269
#: original/TXT/usr_04.txt:324 original/TXT/usr_04.txt:360
#: original/TXT/usr_04.txt:390 original/TXT/usr_04.txt:446
#: original/TXT/usr_04.txt:469 original/TXT/usr_04.txt:510
#: original/TXT/usr_05.txt:24 original/TXT/usr_05.txt:63
#: original/TXT/usr_05.txt:219 original/TXT/usr_05.txt:266
#: original/TXT/usr_05.txt:418 original/TXT/usr_05.txt:467
#: original/TXT/usr_05.txt:506 original/TXT/usr_05.txt:621
#: original/TXT/usr_06.txt:24 original/TXT/usr_06.txt:50
#: original/TXT/usr_06.txt:135 original/TXT/usr_06.txt:189
#: original/TXT/usr_06.txt:270 original/TXT/usr_06.txt:276
#: original/TXT/usr_07.txt:24 original/TXT/usr_07.txt:63
#: original/TXT/usr_07.txt:179 original/TXT/usr_07.txt:266
#: original/TXT/usr_07.txt:316 original/TXT/usr_07.txt:404
#: original/TXT/usr_07.txt:444 original/TXT/usr_07.txt:475
#: original/TXT/usr_08.txt:26 original/TXT/usr_08.txt:82
#: original/TXT/usr_08.txt:109 original/TXT/usr_08.txt:161
#: original/TXT/usr_08.txt:215 original/TXT/usr_08.txt:278
#: original/TXT/usr_08.txt:337 original/TXT/usr_08.txt:477
#: original/TXT/usr_08.txt:509 original/TXT/usr_08.txt:597
#: original/TXT/usr_09.txt:21 original/TXT/usr_09.txt:124
#: original/TXT/usr_09.txt:175 original/TXT/usr_09.txt:259
#: original/TXT/usr_09.txt:285 original/TXT/usr_10.txt:27
#: original/TXT/usr_10.txt:144 original/TXT/usr_10.txt:221
#: original/TXT/usr_10.txt:342 original/TXT/usr_10.txt:378
#: original/TXT/usr_10.txt:547 original/TXT/usr_10.txt:621
#: original/TXT/usr_10.txt:667 original/TXT/usr_10.txt:692
#: original/TXT/usr_10.txt:820 original/TXT/usr_11.txt:22
#: original/TXT/usr_11.txt:82 original/TXT/usr_11.txt:144
#: original/TXT/usr_11.txt:288 original/TXT/usr_11.txt:303
#: original/TXT/usr_12.txt:25 original/TXT/usr_12.txt:90
#: original/TXT/usr_12.txt:131 original/TXT/usr_12.txt:177
#: original/TXT/usr_12.txt:202 original/TXT/usr_12.txt:231
#: original/TXT/usr_12.txt:281 original/TXT/usr_12.txt:309
#: original/TXT/usr_12.txt:354 original/TXT/usr_20.txt:22
#: original/TXT/usr_20.txt:113 original/TXT/usr_20.txt:158
#: original/TXT/usr_20.txt:285 original/TXT/usr_20.txt:327
#: original/TXT/usr_20.txt:380 original/TXT/usr_21.txt:24
#: original/TXT/usr_21.txt:47 original/TXT/usr_21.txt:87
#: original/TXT/usr_21.txt:236 original/TXT/usr_21.txt:385
#: original/TXT/usr_21.txt:438 original/TXT/usr_21.txt:495
#: original/TXT/usr_22.txt:22 original/TXT/usr_22.txt:148
#: original/TXT/usr_22.txt:213 original/TXT/usr_22.txt:272
#: original/TXT/usr_22.txt:396 original/TXT/usr_23.txt:23
#: original/TXT/usr_23.txt:114 original/TXT/usr_23.txt:156
#: original/TXT/usr_23.txt:238 original/TXT/usr_23.txt:324
#: original/TXT/usr_23.txt:339 original/TXT/usr_24.txt:28
#: original/TXT/usr_24.txt:96 original/TXT/usr_24.txt:119
#: original/TXT/usr_24.txt:268 original/TXT/usr_24.txt:305
#: original/TXT/usr_24.txt:336 original/TXT/usr_24.txt:369
#: original/TXT/usr_24.txt:493 original/TXT/usr_24.txt:537
#: original/TXT/usr_24.txt:583 original/TXT/usr_24.txt:602
#: original/TXT/usr_25.txt:22 original/TXT/usr_25.txt:132
#: original/TXT/usr_25.txt:210 original/TXT/usr_25.txt:287
#: original/TXT/usr_25.txt:453 original/TXT/usr_25.txt:574
#: original/TXT/usr_26.txt:21 original/TXT/usr_26.txt:46
#: original/TXT/usr_26.txt:103 original/TXT/usr_26.txt:136
#: original/TXT/usr_26.txt:217 original/TXT/usr_27.txt:26
#: original/TXT/usr_27.txt:88 original/TXT/usr_27.txt:136
#: original/TXT/usr_27.txt:239 original/TXT/usr_27.txt:320
#: original/TXT/usr_27.txt:350 original/TXT/usr_27.txt:427
#: original/TXT/usr_27.txt:469 original/TXT/usr_27.txt:510
#: original/TXT/usr_27.txt:559 original/TXT/usr_28.txt:27
#: original/TXT/usr_28.txt:54 original/TXT/usr_28.txt:121
#: original/TXT/usr_28.txt:185 original/TXT/usr_28.txt:211
#: original/TXT/usr_28.txt:269 original/TXT/usr_28.txt:315
#: original/TXT/usr_28.txt:331 original/TXT/usr_28.txt:375
#: original/TXT/usr_28.txt:389 original/TXT/usr_28.txt:422
#: original/TXT/usr_29.txt:23 original/TXT/usr_29.txt:273
#: original/TXT/usr_29.txt:320 original/TXT/usr_29.txt:441
#: original/TXT/usr_29.txt:570 original/TXT/usr_29.txt:609
#: original/TXT/usr_30.txt:23 original/TXT/usr_30.txt:202
#: original/TXT/usr_30.txt:280 original/TXT/usr_30.txt:336
#: original/TXT/usr_30.txt:409 original/TXT/usr_30.txt:515
#: original/TXT/usr_30.txt:639 original/TXT/usr_31.txt:22
#: original/TXT/usr_31.txt:81 original/TXT/usr_31.txt:133
#: original/TXT/usr_31.txt:160 original/TXT/usr_31.txt:208
#: original/TXT/usr_31.txt:268
#, no-wrap
msgid "==============================================================================\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_toc.txt:4 original/TXT/usr_01.txt:4
#: original/TXT/usr_02.txt:4 original/TXT/usr_03.txt:4
#: original/TXT/usr_04.txt:4 original/TXT/usr_05.txt:4
#: original/TXT/usr_06.txt:4 original/TXT/usr_07.txt:4
#: original/TXT/usr_08.txt:4 original/TXT/usr_09.txt:4
#: original/TXT/usr_10.txt:4 original/TXT/usr_11.txt:4
#: original/TXT/usr_12.txt:4 original/TXT/usr_20.txt:4
#: original/TXT/usr_21.txt:4 original/TXT/usr_22.txt:4
#: original/TXT/usr_23.txt:4 original/TXT/usr_24.txt:4
#: original/TXT/usr_25.txt:4 original/TXT/usr_26.txt:4
#: original/TXT/usr_27.txt:4 original/TXT/usr_28.txt:4
#: original/TXT/usr_29.txt:4 original/TXT/usr_30.txt:4
#: original/TXT/usr_31.txt:4
#, no-wrap
msgid "\t\t     VIM USER MANUAL - by Bram Moolenaar\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_toc.txt:354 original/TXT/usr_01.txt:185
#: original/TXT/usr_02.txt:564 original/TXT/usr_03.txt:654
#: original/TXT/usr_04.txt:514 original/TXT/usr_05.txt:625
#: original/TXT/usr_06.txt:280 original/TXT/usr_07.txt:479
#: original/TXT/usr_08.txt:601 original/TXT/usr_09.txt:289
#: original/TXT/usr_10.txt:824 original/TXT/usr_11.txt:307
#: original/TXT/usr_12.txt:358 original/TXT/usr_20.txt:384
#: original/TXT/usr_21.txt:499 original/TXT/usr_22.txt:400
#: original/TXT/usr_23.txt:343 original/TXT/usr_24.txt:606
#: original/TXT/usr_25.txt:578 original/TXT/usr_26.txt:221
#: original/TXT/usr_27.txt:563 original/TXT/usr_28.txt:426
#: original/TXT/usr_29.txt:613 original/TXT/usr_30.txt:643
#: original/TXT/usr_31.txt:272
msgid "Copyright: see |manual-copyright| vim:tw=78:ts=8:ft=help:norl:"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:2
#, no-wrap
msgid "*usr_05.txt*\tFor Vim version 7.3.  Last change: 2009 Jun 04\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:6
#, no-wrap
msgid "\t\t\t      Set your settings\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:11
msgid ""
"Vim can be tuned to work like you want it to.  This chapter shows you how to "
"make Vim start with options set to different values.  Add plugins to extend "
"Vim's capabilities.  Or define your own macros."
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:19
#, no-wrap
msgid ""
"|05.1|\tThe vimrc file\n"
"|05.2|\tThe example vimrc file explained\n"
"|05.3|\tSimple mappings\n"
"|05.4|\tAdding a plugin\n"
"|05.5|\tAdding a help file\n"
"|05.6|\tThe option window\n"
"|05.7|\tOften used options\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:23
#, no-wrap
msgid ""
"     Next chapter: |usr_06.txt|  Using syntax highlighting\n"
" Previous chapter: |usr_04.txt|  Making small changes\n"
"Table of contents: |usr_toc.txt|\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:26
#, no-wrap
msgid "*05.1*\tThe vimrc file\t\t\t\t\t*vimrc-intro*\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:31
msgid ""
"You probably got tired of typing commands that you use very often.  To start "
"Vim with all your favorite option settings and mappings, you write them in "
"what is called the vimrc file.  Vim executes the commands in this file when "
"it starts up."
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:34
msgid ""
"If you already have a vimrc file (e.g., when your sysadmin has one setup for "
"you), you can edit it this way: >"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:36
#, no-wrap
msgid "\t:edit $MYVIMRC\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:40
msgid ""
"If you don't have a vimrc file yet, see |vimrc| to find out where you can "
"create a vimrc file.  Also, the \":version\" command mentions the name of "
"the \"user vimrc file\" Vim looks for."
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:42
msgid "For Unix and Macintosh this file is always used and is recommended:"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:44
#, no-wrap
msgid "\t~/.vimrc ~\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:46
msgid "For MS-DOS and MS-Windows you can use one of these:"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:49
#, no-wrap
msgid ""
"\t$HOME/_vimrc ~\n"
"\t$VIM/_vimrc ~\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:54
msgid ""
"The vimrc file can contain all the commands that you type after a colon.  "
"The most simple ones are for setting options.  For example, if you want Vim "
"to always start with the 'incsearch' option on, add this line you your vimrc "
"file: >"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:56
#, no-wrap
msgid "\tset incsearch\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:59
msgid ""
"For this new line to take effect you need to exit Vim and start it again.  "
"Later you will learn how to do this without exiting Vim."
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:62
msgid ""
"This chapter only explains the most basic items.  For more information on "
"how to write a Vim script file: |usr_41.txt|."
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:65
#, no-wrap
msgid "*05.2*\tThe example vimrc file explained\t\t*vimrc_example.vim*\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:69
msgid ""
"In the first chapter was explained how the example vimrc (included in the "
"Vim distribution) file can be used to make Vim startup in not-compatible "
"mode (see |not-compatible|).  The file can be found here:"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:71
#, no-wrap
msgid "\t$VIMRUNTIME/vimrc_example.vim ~\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:75
msgid ""
"In this section we will explain the various commands used in this file.  "
"This will give you hints about how to set up your own preferences.  Not "
"everything will be explained though.  Use the \":help\" command to find out "
"more."
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:78
#, no-wrap
msgid ""
">\n"
"\tset nocompatible\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:82
msgid ""
"As mentioned in the first chapter, these manuals explain Vim working in an "
"improved way, thus not completely Vi compatible.  Setting the 'compatible' "
"option off, thus 'nocompatible' takes care of this."
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:85
#, no-wrap
msgid ""
">\n"
"\tset backspace=indent,eol,start\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:91
msgid ""
"This specifies where in Insert mode the <BS> is allowed to delete the "
"character in front of the cursor.  The three items, separated by commas, "
"tell Vim to delete the white space at the start of the line, a line break "
"and the character before where Insert mode started.  >"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:93
#, no-wrap
msgid "\tset autoindent\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:99
msgid ""
"This makes Vim use the indent of the previous line for a newly created "
"line.  Thus there is the same amount of white space before the new line.  "
"For example when pressing <Enter> in Insert mode, and when using the \"o\" "
"command to open a new line.  >"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:105
#, no-wrap
msgid ""
"\tif has(\"vms\")\n"
"\t  set nobackup\n"
"\telse\n"
"\t  set backup\n"
"\tendif\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:110
msgid ""
"This tells Vim to keep a backup copy of a file when overwriting it.  But not "
"on the VMS system, since it keeps old versions of files already.  The backup "
"file will have the same name as the original file with \"~\" added.  See |"
"07.4| >"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:112
#, no-wrap
msgid "\tset history=50\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:116
msgid ""
"Keep 50 commands and 50 search patterns in the history.  Use another number "
"if you want to remember fewer or more lines.  >"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:118
#, no-wrap
msgid "\tset ruler\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:121
msgid ""
"Always display the current cursor position in the lower right corner of the "
"Vim window."
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:124
#, no-wrap
msgid ""
">\n"
"\tset showcmd\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:129
msgid ""
"Display an incomplete command in the lower right corner of the Vim window, "
"left of the ruler.  For example, when you type \"2f\", Vim is waiting for "
"you to type the character to find and \"2f\" is displayed.  When you press "
"\"w\" next, the \"2fw\" command is executed and the displayed \"2f\" is "
"removed."
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:138
#, no-wrap
msgid ""
"\t+-------------------------------------------------+\n"
"\t|text in the Vim window\t\t\t\t  |\n"
"\t|~\t\t\t\t\t\t  |\n"
"\t|~\t\t\t\t\t\t  |\n"
"\t|-- VISUAL --\t\t\t2f     43,8   17% |\n"
"\t+-------------------------------------------------+\n"
"\t ^^^^^^^^^^^\t\t      ^^^^^^^^ ^^^^^^^^^^\n"
"\t  'showmode'\t\t     'showcmd'\t'ruler'\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:141
#, no-wrap
msgid ""
">\n"
"\tset incsearch\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:143
msgid "Display the match for a search pattern when halfway typing it."
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:146
#, no-wrap
msgid ""
">\n"
"\tmap Q gq\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:151
msgid ""
"This defines a key mapping.  More about that in the next section.  This "
"defines the \"Q\" command to do formatting with the \"gq\" operator.  This "
"is how it worked before Vim 5.0.  Otherwise the \"Q\" command starts Ex "
"mode, but you will not need it."
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:154
#, no-wrap
msgid ""
">\n"
"\tvnoremap _g y:exe \"grep /\" . escape(@\", '\\\\/') . \"/ *.c *.h\"<CR>\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:159
msgid ""
"This mapping yanks the visually selected text and searches for it in C "
"files.  This is a complicated mapping.  You can see that mappings can be "
"used to do quite complicated things.  Still, it is just a sequence of "
"commands that are executed like you typed them."
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:165
#, no-wrap
msgid ""
">\n"
"\tif &t_Co > 2 || has(\"gui_running\")\n"
"\t  syntax on\n"
"\t  set hlsearch\n"
"\tendif\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:170
msgid ""
"This switches on syntax highlighting, but only if colors are available.  And "
"the 'hlsearch' option tells Vim to highlight matches with the last used "
"search pattern.  The \"if\" command is very useful to set options only when "
"some condition is met.  More about that in |usr_41.txt|."
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:173
#, no-wrap
msgid ""
"\t\t\t\t\t\t\t*vimrc-filetype*  >\n"
"\tfiletype plugin indent on\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:183
#, no-wrap
msgid ""
"This switches on three very clever mechanisms:\n"
"1. Filetype detection.\n"
"   Whenever you start editing a file, Vim will try to figure out what kind of\n"
"   file this is.  When you edit \"main.c\", Vim will see the \".c\" extension and\n"
"   recognize this as a \"c\" filetype.  When you edit a file that starts with\n"
"   \"#!/bin/sh\", Vim will recognize it as a \"sh\" filetype.\n"
"   The filetype detection is used for syntax highlighting and the other two\n"
"   items below.\n"
"   See |filetypes|.\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:190
#, no-wrap
msgid ""
"2. Using filetype plugin files\n"
"   Many different filetypes are edited with different options.  For example,\n"
"   when you edit a \"c\" file, it's very useful to set the 'cindent' option to\n"
"   automatically indent the lines.  These commonly useful option settings are\n"
"   included with Vim in filetype plugins.  You can also add your own, see\n"
"   |write-filetype-plugin|.\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:195
#, no-wrap
msgid ""
"3. Using indent files\n"
"   When editing programs, the indent of a line can often be computed\n"
"   automatically.  Vim comes with these indent rules for a number of\n"
"   filetypes.  See |:filetype-indent-on| and 'indentexpr'.\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:198
#, no-wrap
msgid ""
">\n"
"\tautocmd FileType text setlocal textwidth=78\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:205
msgid ""
"This makes Vim break text to avoid lines getting longer than 78 characters.  "
"But only for files that have been detected to be plain text.  There are "
"actually two parts here.  \"autocmd FileType text\" is an autocommand.  This "
"defines that when the file type is set to \"text\" the following command is "
"automatically executed.  \"setlocal textwidth=78\" sets the 'textwidth' "
"option to 78, but only locally in one file."
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:211
#, no-wrap
msgid ""
"\t\t\t\t\t\t\t*restore-cursor*  >\n"
"\tautocmd BufReadPost *\n"
"\t    \\ if line(\"'\\\"\") > 1 && line(\"'\\\"\") <= line(\"$\") |\n"
"\t    \\   exe \"normal! g`\\\"\" |\n"
"\t    \\ endif\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:218
msgid ""
"Another autocommand.  This time it is used after reading any file.  The "
"complicated stuff after it checks if the '\" mark is defined, and jumps to "
"it if so.  The backslash at the start of a line is used to continue the "
"command from the previous line.  That avoids a line getting very long.  See |"
"line-continuation|.  This only works in a Vim script file, not when typing "
"commands at the command-line."
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:221
#, no-wrap
msgid "*05.3*\tSimple mappings\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:227
msgid ""
"A mapping enables you to bind a set of Vim commands to a single key.  "
"Suppose, for example, that you need to surround certain words with curly "
"braces.  In other words, you need to change a word such as \"amount\" into "
"\"{amount}\".  With the :map command, you can tell Vim that the F5 key does "
"this job.  The command is as follows: >"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:235
#, no-wrap
msgid ""
"\t:map <F5> i{<Esc>ea}<Esc>\n"
"<\n"
"\tNote:\n"
"\tWhen entering this command, you must enter <F5> by typing four\n"
"\tcharacters.  Similarly, <Esc> is not entered by pressing the <Esc>\n"
"\tkey, but by typing five characters.  Watch out for this difference\n"
"\twhen reading the manual!\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:239
#, no-wrap
msgid ""
"Let's break this down:\n"
"    <F5>\tThe F5 function key.  This is the trigger key that causes the\n"
"\t\tcommand to be executed as the key is pressed.\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:241
#, no-wrap
msgid "    i{<Esc>\tInsert the { character.  The <Esc> key ends Insert mode.\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:243
#, no-wrap
msgid "    e\t\tMove to the end of the word.\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:245
#, no-wrap
msgid "    a}<Esc>\tAppend the } to the word.\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:248
msgid ""
"After you execute the \":map\" command, all you have to do to put {} around "
"a word is to put the cursor on the first character and press F5."
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:256
#, no-wrap
msgid ""
"In this example, the trigger is a single key; it can be any string.  But when\n"
"you use an existing Vim command, that command will no longer be available.\n"
"You better avoid that.\n"
"   One key that can be used with mappings is the backslash.  Since you\n"
"probably want to define more than one mapping, add another character.  You\n"
"could map \"\\p\" to add parentheses around a word, and \"\\c\" to add curly braces,\n"
"for example: >\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:259
#, no-wrap
msgid ""
"\t:map \\p i(<Esc>ea)<Esc>\n"
"\t:map \\c i{<Esc>ea}<Esc>\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:262
msgid ""
"You need to type the \\ and the p quickly after another, so that Vim knows "
"they belong together."
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:265
msgid ""
"The \":map\" command (with no arguments) lists your current mappings.  At "
"least the ones for Normal mode.  More about mappings in section |40.1|."
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:268
#, no-wrap
msgid "*05.4*\tAdding a plugin\t\t\t\t\t*add-plugin* *plugin*\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:273
msgid ""
"Vim's functionality can be extended by adding plugins.  A plugin is nothing "
"more than a Vim script file that is loaded automatically when Vim starts.  "
"You can add a plugin very easily by dropping it in your plugin directory.  "
"{not available when Vim was compiled without the |+eval| feature}"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:275
msgid "There are two types of plugins:"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:278
#, no-wrap
msgid ""
"    global plugin: Used for all kinds of files\n"
"  filetype plugin: Only used for a specific type of file\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:281
msgid ""
"The global plugins will be discussed first, then the filetype ones |add-"
"filetype-plugin|."
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:284
#, no-wrap
msgid "GLOBAL PLUGINS\t\t\t\t\t\t*standard-plugin*\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:290
msgid ""
"When you start Vim, it will automatically load a number of global plugins.  "
"You don't have to do anything for this.  They add functionality that most "
"people will want to use, but which was implemented as a Vim script instead "
"of being compiled into Vim.  You can find them listed in the help index |"
"standard-plugin-list|.  Also see |load-plugins|."
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:296
#, no-wrap
msgid ""
"\t\t\t\t\t\t\t*add-global-plugin*\n"
"You can add a global plugin to add functionality that will always be present\n"
"when you use Vim.  There are only two steps for adding a global plugin:\n"
"1. Get a copy of the plugin.\n"
"2. Drop it in the right directory.\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:299
msgid "GETTING A GLOBAL PLUGIN"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:306
#, no-wrap
msgid ""
"Where can you find plugins?\n"
"- Some come with Vim.  You can find them in the directory $VIMRUNTIME/macros\n"
"  and its sub-directories.\n"
"- Download from the net.  There is a large collection on http://www.vim.org.\n"
"- They are sometimes posted in a Vim |maillist|.\n"
"- You could write one yourself, see |write-plugin|.\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:309
msgid ""
"Some plugins come as a vimball archive, see |vimball|.  Some plugins can be "
"updated automatically, see |getscript|."
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:312
msgid "USING A GLOBAL PLUGIN"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:315
msgid ""
"First read the text in the plugin itself to check for any special "
"conditions.  Then copy the file to your plugin directory:"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:323
#, no-wrap
msgid ""
"\tsystem\t\tplugin directory ~\n"
"\tUnix\t\t~/.vim/plugin/\n"
"\tPC and OS/2\t$HOME/vimfiles/plugin or $VIM/vimfiles/plugin\n"
"\tAmiga\t\ts:vimfiles/plugin\n"
"\tMacintosh\t$VIM:vimfiles:plugin\n"
"\tMac OS X\t~/.vim/plugin/\n"
"\tRISC-OS\t\tChoices:vimfiles.plugin\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:325
msgid "Example for Unix (assuming you didn't have a plugin directory yet): >"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:329
#, no-wrap
msgid ""
"\tmkdir ~/.vim\n"
"\tmkdir ~/.vim/plugin\n"
"\tcp /usr/local/share/vim/vim60/macros/justify.vim ~/.vim/plugin\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:332
msgid ""
"That's all! Now you can use the commands defined in this plugin to justify "
"text."
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:337
msgid ""
"Instead of putting plugins directly into the plugin/ directory, you may "
"better organize them by putting them into subdirectories under plugin/.  As "
"an example, consider using \"~/.vim/plugin/perl/*.vim\" for all your Perl "
"plugins."
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:340
#, no-wrap
msgid "FILETYPE PLUGINS\t\t\t*add-filetype-plugin* *ftplugins*\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:343
msgid ""
"The Vim distribution comes with a set of plugins for different filetypes "
"that you can start using with this command: >"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:345
#, no-wrap
msgid "\t:filetype plugin on\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:347
msgid "That's all! See |vimrc-filetype|."
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:352
msgid ""
"If you are missing a plugin for a filetype you are using, or you found a "
"better one, you can add it.  There are two steps for adding a filetype "
"plugin: 1. Get a copy of the plugin.  2. Drop it in the right directory."
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:355
msgid "GETTING A FILETYPE PLUGIN"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:360
msgid ""
"You can find them in the same places as the global plugins.  Watch out if "
"the type of file is mentioned, then you know if the plugin is a global or a "
"filetype one.  The scripts in $VIMRUNTIME/macros are global ones, the "
"filetype plugins are in $VIMRUNTIME/ftplugin."
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:363
#, no-wrap
msgid "USING A FILETYPE PLUGIN\t\t\t\t\t*ftplugin-name*\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:369
msgid ""
"You can add a filetype plugin by dropping it in the right directory.  The "
"name of this directory is in the same directory mentioned above for global "
"plugins, but the last part is \"ftplugin\".  Suppose you have found a plugin "
"for the \"stuff\" filetype, and you are on Unix.  Then you can move this "
"file to the ftplugin directory: >"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:371
#, no-wrap
msgid "\tmv thefile ~/.vim/ftplugin/stuff.vim\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:375
msgid ""
"If that file already exists you already have a plugin for \"stuff\".  You "
"might want to check if the existing plugin doesn't conflict with the one you "
"are adding.  If it's OK, you can give the new one another name: >"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:377
#, no-wrap
msgid "\tmv thefile ~/.vim/ftplugin/stuff_too.vim\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:381
msgid ""
"The underscore is used to separate the name of the filetype from the rest, "
"which can be anything.  If you use \"otherstuff.vim\" it wouldn't work, it "
"would be loaded for the \"otherstuff\" filetype."
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:385
msgid ""
"On MS-DOS you cannot use long filenames.  You would run into trouble if you "
"add a second plugin and the filetype has more than six characters.  You can "
"use an extra directory to get around this: >"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:388
#, no-wrap
msgid ""
"\tmkdir $VIM/vimfiles/ftplugin/fortran\n"
"\tcopy thefile $VIM/vimfiles/ftplugin/fortran/too.vim\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:390
msgid "The generic names for the filetype plugins are: >"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:394
#, no-wrap
msgid ""
"\tftplugin/<filetype>.vim\n"
"\tftplugin/<filetype>_<name>.vim\n"
"\tftplugin/<filetype>/<name>.vim\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:397
msgid ""
"Here \"<name>\" can be any name that you prefer.  Examples for the \"stuff\" "
"filetype on Unix: >"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:401
#, no-wrap
msgid ""
"\t~/.vim/ftplugin/stuff.vim\n"
"\t~/.vim/ftplugin/stuff_def.vim\n"
"\t~/.vim/ftplugin/stuff/header.vim\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:406
msgid ""
"The <filetype> part is the name of the filetype the plugin is to be used "
"for.  Only files of this filetype will use the settings from the plugin.  "
"The <name> part of the plugin file doesn't matter, you can use it to have "
"several plugins for the same filetype.  Note that it must end in \".vim\"."
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:417
#, no-wrap
msgid ""
"Further reading:\n"
"|filetype-plugins|\tDocumentation for the filetype plugins and information\n"
"\t\t\tabout how to avoid that mappings cause problems.\n"
"|load-plugins|\t\tWhen the global plugins are loaded during startup.\n"
"|ftplugin-overrule|\tOverruling the settings from a global plugin.\n"
"|write-plugin|\t\tHow to write a plugin script.\n"
"|plugin-details|\tFor more information about using plugins or when your\n"
"\t\t\tplugin doesn't work.\n"
"|new-filetype|\t\tHow to detect a new file type.\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:420
#, no-wrap
msgid "*05.5*\tAdding a help file\t\t*add-local-help* *matchit-install*\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:432
#, no-wrap
msgid ""
"If you are lucky, the plugin you installed also comes with a help file.  We\n"
"will explain how to install the help file, so that you can easily find help\n"
"for your new plugin.\n"
"   Let us use the \"matchit.vim\" plugin as an example (it is included with\n"
"Vim).  This plugin makes the \"%\" command jump to matching HTML tags,\n"
"if/else/endif in Vim scripts, etc.  Very useful, although it's not backwards\n"
"compatible (that's why it is not enabled by default).\n"
"   This plugin comes with documentation: \"matchit.txt\".  Let's first copy the\n"
"plugin to the right directory.  This time we will do it from inside Vim, so\n"
"that we can use $VIMRUNTIME.  (You may skip some of the \"mkdir\" commands if\n"
"you already have the directory.) >\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:436
#, no-wrap
msgid ""
"\t:!mkdir ~/.vim\n"
"\t:!mkdir ~/.vim/plugin\n"
"\t:!cp $VIMRUNTIME/macros/matchit.vim ~/.vim/plugin\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:438
msgid "The \"cp\" command is for Unix, on MS-DOS you can use \"copy\"."
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:440
msgid ""
"Now create a \"doc\" directory in one of the directories in 'runtimepath'. >"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:442
#, no-wrap
msgid "\t:!mkdir ~/.vim/doc\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:444
msgid "Copy the help file to the \"doc\" directory. >"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:446
#, no-wrap
msgid "\t:!cp $VIMRUNTIME/macros/matchit.txt ~/.vim/doc\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:449
msgid ""
"Now comes the trick, which allows you to jump to the subjects in the new "
"help file: Generate the local tags file with the |:helptags| command. >"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:451
#, no-wrap
msgid "\t:helptags ~/.vim/doc\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:453
msgid "Now you can use the >"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:455
#, no-wrap
msgid "\t:help g%\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:458
msgid ""
"command to find help for \"g%\" in the help file you just added.  You can "
"see an entry for the local help file when you do: >"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:460
#, no-wrap
msgid "\t:help local-additions\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:464
msgid ""
"The title lines from the local help files are automagically added to this "
"section.  There you can see which local help files have been added and jump "
"to them through the tag."
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:466
msgid "For writing a local help file, see |write-local-help|."
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:469
#, no-wrap
msgid "*05.6*\tThe option window\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:472
msgid ""
"If you are looking for an option that does what you want, you can search in "
"the help files here: |options|.  Another way is by using this command: >"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:474
#, no-wrap
msgid "\t:options\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:478
msgid ""
"This opens a new window, with a list of options with a one-line "
"explanation.  The options are grouped by subject.  Move the cursor to a "
"subject and press <Enter> to jump there.  Press <Enter> again to jump back.  "
"Or use CTRL-O."
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:481
msgid ""
"You can change the value of an option.  For example, move to the "
"\"displaying text\" subject.  Then move the cursor down to this line:"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:483
#, no-wrap
msgid "\tset wrap\tnowrap ~\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:485
msgid "When you hit <Enter>, the line will change to:"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:487
#, no-wrap
msgid "\tset nowrap\twrap ~\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:489
msgid "The option has now been switched off."
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:493
msgid ""
"Just above this line is a short description of the 'wrap' option.  Move the "
"cursor one line up to place it in this line.  Now hit <Enter> and you jump "
"to the full help on the 'wrap' option."
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:497
msgid ""
"For options that take a number or string argument you can edit the value.  "
"Then press <Enter> to apply the new value.  For example, move the cursor a "
"few lines up to this line:"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:499
#, no-wrap
msgid "\tset so=0 ~\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:505
msgid ""
"Position the cursor on the zero with \"$\".  Change it into a five with "
"\"r5\".  Then press <Enter> to apply the new value.  When you now move the "
"cursor around you will notice that the text starts scrolling before you "
"reach the border.  This is what the 'scrolloff' option does, it specifies an "
"offset from the window border where scrolling starts."
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:508
#, no-wrap
msgid "*05.7*\tOften used options\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:513
msgid ""
"There are an awful lot of options.  Most of them you will hardly ever use.  "
"Some of the more useful ones will be mentioned here.  Don't forget you can "
"find more help on these options with the \":help\" command, with single "
"quotes before and after the option name.  For example: >"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:515
#, no-wrap
msgid "\t:help 'wrap'\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:518
msgid ""
"In case you have messed up an option value, you can set it back to the "
"default by putting an ampersand (&) after the option name.  Example: >"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:520
#, no-wrap
msgid "\t:set iskeyword&\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:523
msgid "NOT WRAPPING LINES"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:528
msgid ""
"Vim normally wraps long lines, so that you can see all of the text.  "
"Sometimes it's better to let the text continue right of the window.  Then "
"you need to scroll the text left-right to see all of a long line.  Switch "
"wrapping off with this command: >"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:530 original/TXT/usr_23.txt:272
#, no-wrap
msgid "\t:set nowrap\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:533
msgid ""
"Vim will automatically scroll the text when you move to text that is not "
"displayed.  To see a context of ten characters, do this: >"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:535
#, no-wrap
msgid "\t:set sidescroll=10\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:537
msgid "This doesn't change the text in the file, only the way it is displayed."
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:540
msgid "WRAPPING MOVEMENT COMMANDS"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:544
msgid ""
"Most commands for moving around will stop moving at the start and end of a "
"line.  You can change that with the 'whichwrap' option.  This sets it to the "
"default value: >"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:546
#, no-wrap
msgid "\t:set whichwrap=b,s\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:550
msgid ""
"This allows the <BS> key, when used in the first position of a line, to move "
"the cursor to the end of the previous line.  And the <Space> key moves from "
"the end of a line to the start of the next one."
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:552
msgid ""
"To allow the cursor keys <Left> and <Right> to also wrap, use this command: >"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:554
#, no-wrap
msgid "\t:set whichwrap=b,s,<,>\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:557
msgid ""
"This is still only for Normal mode.  To let <Left> and <Right> do this in "
"Insert mode as well: >"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:559
#, no-wrap
msgid "\t:set whichwrap=b,s,<,>,[,]\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:561
msgid "There are a few other flags that can be added, see 'whichwrap'."
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:564
msgid "VIEWING TABS"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:567
msgid ""
"When there are tabs in a file, you cannot see where they are.  To make them "
"visible: >"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:569
#, no-wrap
msgid "\t:set list\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:575
#, no-wrap
msgid ""
"Now every tab is displayed as ^I.  And a $ is displayed at the end of each\n"
"line, so that you can spot trailing spaces that would otherwise go unnoticed.\n"
"   A disadvantage is that this looks ugly when there are many Tabs in a file.\n"
"If you have a color terminal, or are using the GUI, Vim can show the spaces\n"
"and tabs as highlighted characters.  Use the 'listchars' option: >\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:577
#, no-wrap
msgid "\t:set listchars=tab:>-,trail:-\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:580
msgid ""
"Now every tab will be displayed as \">---\" (with more or less \"-\") and "
"trailing white space as \"-\".  Looks a lot better, doesn't it?"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:583
msgid "KEYWORDS"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:585
msgid ""
"The 'iskeyword' option specifies which characters can appear in a word: >"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:588
#, no-wrap
msgid ""
"\t:set iskeyword\n"
"<\t  iskeyword=@,48-57,_,192-255 ~\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:594
#, no-wrap
msgid ""
"The \"@\" stands for all alphabetic letters.  \"48-57\" stands for ASCII\n"
"characters 48 to 57, which are the numbers 0 to 9.  \"192-255\" are the\n"
"printable latin characters.\n"
"   Sometimes you will want to include a dash in keywords, so that commands\n"
"like \"w\" consider \"upper-case\" to be one word.  You can do it like this: >\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:598
#, no-wrap
msgid ""
"\t:set iskeyword+=-\n"
"\t:set iskeyword\n"
"<\t  iskeyword=@,48-57,_,192-255,- ~\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:601
#, no-wrap
msgid ""
"If you look at the new value, you will see that Vim has added a comma for you.\n"
"   To remove a character use \"-=\".  For example, to remove the underscore: >\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:605
#, no-wrap
msgid ""
"\t:set iskeyword-=_\n"
"\t:set iskeyword\n"
"<\t  iskeyword=@,48-57,192-255,- ~\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:607
msgid "This time a comma is automatically deleted."
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:610
msgid "ROOM FOR MESSAGES"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:616
#, no-wrap
msgid ""
"When Vim starts there is one line at the bottom that is used for messages.\n"
"When a message is long, it is either truncated, thus you can only see part of\n"
"it, or the text scrolls and you have to press <Enter> to continue.\n"
"   You can set the 'cmdheight' option to the number of lines used for\n"
"messages.  Example: >\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:618
#, no-wrap
msgid "\t:set cmdheight=3\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:620
msgid "This does mean there is less room to edit text, thus it's a compromise."
msgstr ""

#. type: Plain text
#: original/TXT/usr_05.txt:624
msgid "Next chapter: |usr_06.txt| Using syntax highlighting"
msgstr ""
