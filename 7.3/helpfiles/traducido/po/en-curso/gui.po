# Omar Campagne <<ocampagne@gmail.com>>, 2009.
#. extracted from gui.txt
msgid ""
msgstr ""
"Project-Id-Version: Vim 7.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2009-08-06 14:46+0200\n"
"PO-Revision-Date: 2009-11-24 02:38+0100\n"
"Last-Translator: Omar Campagne <ocampagne@gmail.com>\n"
"Language-Team: Documentación de Vim en español\n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Generator: Virtaal 0.4.0-rc2\n"

#: gui.txt:1
msgid "*gui.txt*       For Vim version 7.2.  Last change: 2008 Jun 14"
msgstr "*gui.txt*\tPara Vim version 7.2.  Último cambio: 2008 Jun 14"

#: gui.txt:4
msgid "\t\t  VIM REFERENCE MANUAL    by Bram Moolenaar"
msgstr "\t\t MANUAL DE USUARIO DE VIM   por Bram Moolenaar"

#: gui.txt:7
msgid "Vim's Graphical User Interface\t\t\t\t*gui* *GUI*"
msgstr "Interfaz gráfica de usuario de Vim\t\t\t*gui* *GUI*"

#: gui.txt:9
msgid ""
"1. Starting the GUI\t\t|gui-start|\n"
"2. Scrollbars\t\t\t|gui-scrollbars|\n"
"3. Mouse Control\t\t|gui-mouse|\n"
"4. Making GUI Selections\t|gui-selections|\n"
"5. Menus\t\t\t|menus|\n"
"6. Extras\t\t\t|gui-extras|\n"
"7. Shell Commands\t\t|gui-shell|"
msgstr ""
"1. Iniciar la GUI\t\t|gui-start|\n"
"2. Barras de desplazamiento\t|gui-scrollbars|\n"
"3. Control del ratón\t\t|gui-mouse|\n"
"4. Seleccionar en la GUI\t|gui-selections|\n"
"5. Menús\t\t \t|menus|\n"
"6. Extras\t\t\t|gui-extras|\n"
"7. Órdenes de consola\t\t|gui-shell|"

#: gui.txt:17
msgid ""
"Other GUI documentation:\n"
"|gui_x11.txt|\tFor specific items of the X11 GUI.\n"
"|gui_w32.txt|\tFor specific items of the Win32 GUI."
msgstr ""
"Más documentación de la GUI:\n"
"|gui_x11.txt|\tPara elementos específicos de la GUI bajo X11.\n"
"|gui_w32.txt|\tPara elementos específicos de la GUI bajo Win32."

#: gui.txt:21
msgid "{Vi does not have any of these commands}"
msgstr "{Ninguna de estas órdenes está presente en Vi}"

#: gui.txt:23
msgid ""
"============================================================================"
"==\n"
"1. Starting the GUI\t\t\t\t*gui-start* *E229* *E233*"
msgstr ""
"============================================================================"
"==\n"
"1. Iniciar la GUI\t\t\t\t*gui-start* *E229* *E233*"

#: gui.txt:26
msgid ""
"First you must make sure you actually have a version of Vim with the GUI "
"code\n"
"included.  You can check this with the \":version\" command, it says \"with xxx\n"
"GUI\", where \"xxx\" is X11-Motif, X11-Athena, Photon, GTK, GTK2, etc., or\n"
"\"MS-Windows 32 bit GUI version\"."
msgstr ""
"Asegúrese primero de que realmente tiene una versión de Vim con el código de\n"
"la GUI integrado. Puede revisar esto con la orden :version, el cual\n"
"devuelve\n"
"«con GUI xxx», donde «xxx» puede ser X11-Motif, X11-Athena, Photon, GTK, "
"GTK2,\n"
"etc... o «versión GUI MS-Windows 32 bit»."

#: gui.txt:31
msgid ""
"How to start the GUI depends on the system used.  Mostly you can run the\n"
"GUI version of Vim with:\n"
"    gvim [options] [files...]"
msgstr ""
"Como iniciar la interfaz gráfica depende del sistema que se usa.\n"
"Generalmente, puede iniciar la versión GUI de Vim con:\n"
"    gvim [opciones] [archivos...]"

#: gui.txt:35
msgid ""
"The X11 version of Vim can run both in GUI and in non-GUI mode.  See\n"
"|gui-x11-start|."
msgstr ""
"La versión X11 de Vim puede ejecutarse en modo gráfico o no. Véase\n"
"|gui-x11-start|."

#: gui.txt:38
msgid ""
"\t\t\t\t\t*gui-init* *gvimrc* *.gvimrc* *_gvimrc*\n"
"The gvimrc file is where GUI-specific startup commands should be placed.  It\n"
"is always sourced after the |vimrc| file.  If you have one then the "
"$MYGVIMRC\n"
"environment variable has its name."
msgstr ""
"\t\t\t\t\t*gui-init* *gvimrc* *.gvimrc* *_gvimrc*\n"
"El archivo gvimrc es donde debe escribir las órdenes de inicio específicos "
"de\n"
"la GUI.\n"
"Siempre se lee después del archivo |vimrc|. Si tiene uno, la variable\n"
"de entorno $MYGVIMRC llevará su tal nombre."

#: gui.txt:43
msgid ""
"When the GUI starts up initializations are carried out, in this order:\n"
"- The 'term' option is set to \"builgin_gui\" and terminal options are reset "
"to\n"
"  their default value for the GUI |terminal-options|.\n"
"- If the system menu file exists, it is sourced.  The name of this file is\n"
"  normally \"$VIMRUNTIME/menu.vim\".  You can check this with \":version\".  "
"Also\n"
"  see |$VIMRUNTIME|.  To skip loading the system menu include 'M' in\n"
"  'guioptions'.\t\t\t\t*buffers-menu* *no_buffers_menu*\n"
"  The system menu file includes a \"Buffers\" menu.  If you don't want this, "
"set\n"
"  the \"no_buffers_menu\" variable in your .vimrc (not .gvimrc!): >\n"
"\t:let no_buffers_menu = 1\n"
"< NOTE: Switching on syntax highlighting also loads the menu file, thus\n"
"  disabling the Buffers menu must be done before \":syntax on\".\n"
"  The path names are truncated to 35 characters.  You can truncate them at a\n"
"  different length, for example 50, like this: >\n"
"\t:let bmenu_max_pathlen = 50\n"
"- If the \"-U {gvimrc}\" command-line option has been used when starting Vim,\n"
"  the {gvimrc} file will be read for initializations.  The following\n"
"  initializations are skipped.  When {gvimrc} is \"NONE\" no file will be read\n"
"  for initializations.\n"
"- For Unix and MS-Windows, if the system gvimrc exists, it is sourced.  The\n"
"  name of this file is normally \"$VIM/gvimrc\".  You can check this with\n"
"  \":version\".  Also see |$VIM|.\n"
"- The following are tried, and only the first one that exists is used:\n"
"  - If the GVIMINIT environment variable exists and is not empty, it is\n"
"    executed as an Ex command.\n"
"  - If the user gvimrc file exists, it is sourced.  The name of this file is\n"
"    normally \"$HOME/.gvimrc\".  You can check this with \":version\".\n"
"  - For Win32, when $HOME is not set, \"$VIM\\_gvimrc\" is used.\n"
"  - When a \"_gvimrc\" file is not found, \".gvimrc\" is tried too.  And vice\n"
"    versa.\n"
"  The name of the first file found is stored in $MYGVIMRC, unless it was\n"
"  already set.\n"
"- If the 'exrc' option is set (which is NOT the default) the file ./.gvimrc\n"
"  is sourced, if it exists and isn't the same file as the system or user\n"
"  gvimrc file.  If this file is not owned by you, some security restrictions\n"
"  apply.  When \".gvimrc\" is not found, \"_gvimrc\" is tried too.  For "
"Macintosh\n"
"  and DOS/Win32 \"_gvimrc\" is tried first."
msgstr ""
"Al ejecutar la GUI, las órdenes de inicio se llevan a cabo en este orden:\n"
"- La opción 'term' está definida como «builgin_gui» y las opciones de\n"
"  terminal se devuleven a sus valores predeterminados |terminal-options|.\n"
"- Si existe un archivo de menú del sistema, se lee. Generalmente, el nombre\n"
"  de este archivo es «$VIMRUNTIME/menu.vim». Puede cerciorarse con\n"
"  la orden «:version». Véase también |$VIMRUNTIME|. Para evitar cargar el\n"
"  menú del sistema, incluya 'M' en 'guioptions'.\n"
"\t\t\t\t\t*buffers-menu* *no_buffers_menu*\n"
"  "

#: gui.txt:81
msgid ""
"NOTE: All but the first one are not carried out if Vim was started with\n"
"\"-u NONE\" and no \"-U\" argument was given, or when started with \"-U NONE\"."
msgstr ""
"NOTA: Todas excepto la primera no se ejecutarán si inicia Vim con\n"
"«-u NONE» y si no se introdujo ningún argumento «-U», o si se inicia con\n"
"«-U NONE»."

#: gui.txt:84
msgid ""
"All this happens AFTER the normal Vim initializations, like reading your\n"
".vimrc file.  See |initialization|.\n"
"But the GUI window is only opened after all the initializations have been\n"
"carried out.  If you want some commands to be executed just after opening "
"the\n"
"GUI window, use the |GUIEnter| autocommand event.  Example: >\n"
"\t:autocmd GUIEnter * winpos 100 50"
msgstr "Todo esto ocurre despues de las órdenes de inicio de Vim, como si\n"
"leyese el archivo «.vimrc». Véase |initialization|.\n"
"La ventana de la interfaz gráfica solo se abre después de llevar a cabo\n"
"todas las órdenes de inicio. Si desea que alguna orden se ejecute justo\n"
"después de abrir la ventana de la interfaz gráfica, use el evento de\n"
"autorden |GUIEvent|. Ejemplo: >\n"
"\t:autocmd GUIEnter * winpos 100 50"

#: gui.txt:91
msgid ""
"You can use the gvimrc files to set up your own customized menus (see "
"|:menu|)\n"
"and initialize other things that you may want to set up differently from the\n"
"terminal version."
msgstr ""
"Puede usar los archivos gvimrc para crear sus propios menús\n"
"personalizados (véase |:menu|)."

#: gui.txt:95
msgid ""
"Recommended place for your personal GUI initializations:\n"
"\tUnix\t\t    $HOME/.gvimrc\n"
"\tOS/2\t\t    $HOME/.gvimrc or $VIM/.gvimrc\n"
"\tMS-DOS and Win32    $HOME/_gvimrc or $VIM/_gvimrc\n"
"\tAmiga\t\t    s:.gvimrc or $VIM/.gvimrc"
msgstr ""

#: gui.txt:101
msgid ""
"There are a number of options which only have meaning in the GUI version of\n"
"Vim.  These are 'guicursor', 'guifont', 'guipty' and 'guioptions'.  They are\n"
"documented in |options.txt| with all the other options."
msgstr "Hay un número de opciones que solo tienen efecto en la versión GUI\n"
"de Vim. Estos son 'guicursor', 'guifont', 'guipty' y 'guioptions'.\n"
"Están documentadas en |options.txt|, junto con el resto de opciones."

#: gui.txt:105
msgid ""
"If using the Motif or Athena version of the GUI (but not for the GTK+ or\n"
"Win32 version), a number of X resources are available.  See |gui-resources|."
msgstr ""

#: gui.txt:108
msgid ""
"Another way to set the colors for different occasions is with highlight\n"
"groups.  The \"Normal\" group is used to set the background and foreground\n"
"colors.  Example (which looks nice): >"
msgstr ""

#: gui.txt:112
msgid "\t:highlight Normal guibg=grey90"
msgstr "\t:highlight Normal guibg=grey90"

#: gui.txt:114
msgid ""
"The \"guibg\" and \"guifg\" settings override the normal background and\n"
"foreground settings.  The other settings for the Normal highlight group are\n"
"not used.  Use the 'guifont' option to set the font."
msgstr ""

#: gui.txt:118
msgid ""
"Also check out the 'guicursor' option, to set the colors for the cursor in\n"
"various modes."
msgstr ""

#: gui.txt:121
msgid ""
"Vim tries to make the window fit on the screen when it starts up.  This "
"avoids\n"
"that you can't see part of it.  On the X Window System this requires a bit "
"of\n"
"guesswork.  You can change the height that is used for the window title and "
"a\n"
"task bar with the 'guiheadroom' option."
msgstr ""

#: gui.txt:126
msgid ""
"\t\t\t\t\t\t*:winp* *:winpos* *E188*\n"
":winp[os]\n"
"\t\tDisplay current position of the top left corner of the GUI vim\n"
"\t\twindow in pixels.  Does not work in all versions."
msgstr ""

#: gui.txt:131
msgid ""
":winp[os] {X} {Y}\t\t\t\t\t\t\t*E466*\n"
"\t\tPut the GUI vim window at the given {X} and {Y} coordinates.\n"
"\t\tThe coordinates should specify the position in pixels of the\n"
"\t\ttop left corner of the window.  Does not work in all versions.\n"
"\t\tDoes work in an (new) xterm |xterm-color|.\n"
"\t\tWhen the GUI window has not been opened yet, the values are\n"
"\t\tremembered until the window is opened.  The position is\n"
"\t\tadjusted to make the window fit on the screen (if possible)."
msgstr ""

#: gui.txt:140
msgid ""
"\t\t\t\t\t\t    *:win* *:winsize* *E465*\n"
":win[size] {width} {height}\n"
"\t\tSet the window height to {width} by {height} characters.\n"
"\t\tObsolete, use \":set lines=11 columns=22\".\n"
"\t\tIf you get less lines than expected, check the 'guiheadroom'\n"
"\t\toption."
msgstr ""

#: gui.txt:147
msgid ""
"If you are running the X Window System, you can get information about the\n"
"window Vim is running in with this command: >\n"
"\t:!xwininfo -id $WINDOWID"
msgstr ""

#: gui.txt:151
msgid ""
"============================================================================"
"==\n"
"2. Scrollbars\t\t\t\t\t\t*gui-scrollbars*"
msgstr ""

#: gui.txt:154
msgid ""
"There are vertical scrollbars and a horizontal scrollbar.  You may\n"
"configure which ones appear with the 'guioptions' option."
msgstr ""

#: gui.txt:157
msgid "The interface looks like this (with \":set guioptions=mlrb\"):"
msgstr ""

#: gui.txt:159
msgid ""
"\t\t       +------------------------------+\n"
"\t\t       | File  Edit\t\t Help | <- Menu bar (m)\n"
"\t\t       +-+--------------------------+-+\n"
"\t\t       |^|\t\t\t    |^|\n"
"\t\t       |#| Text area.\t\t    |#|\n"
"\t\t       | |\t\t\t    | |\n"
"\t\t       |v|__________________________|v|\n"
" Normal status line -> |-+ File.c\t       5,2  +-|\n"
" between Vim windows   |^|\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"|^|\n"
"\t\t       | |\t\t\t    | |\n"
"\t\t       | | Another file buffer.     | |\n"
"\t\t       | |\t\t\t    | |\n"
"\t\t       |#|\t\t\t    |#|\n"
" Left scrollbar (l) -> |#|\t\t\t    |#| <- Right\n"
"\t\t       |#|\t\t\t    |#|    scrollbar (r)\n"
"\t\t       | |\t\t\t    | |\n"
"\t\t       |v|\t\t\t    |v|\n"
"\t\t       +-+--------------------------+-+\n"
"\t\t       | |< ####\t\t   >| | <- Bottom\n"
"\t\t       +-+--------------------------+-+    scrollbar (b)"
msgstr ""

#: gui.txt:180
msgid ""
"Any of the scrollbar or menu components may be turned off by not putting the\n"
"appropriate letter in the 'guioptions' string.  The bottom scrollbar is\n"
"only useful when 'nowrap' is set."
msgstr ""

#: gui.txt:185
msgid "VERTICAL SCROLLBARS\t\t\t\t\t*gui-vert-scroll*"
msgstr ""

#: gui.txt:187
msgid ""
"Each Vim window has a scrollbar next to it which may be scrolled up and down\n"
"to move through the text in that buffer.  The size of the scrollbar-thumb\n"
"indicates the fraction of the buffer which can be seen in the window.\n"
"When the scrollbar is dragged all the way down, the last line of the file\n"
"will appear in the top of the window."
msgstr ""

#: gui.txt:193
msgid ""
"If a window is shrunk to zero height (by the growth of another window) its\n"
"scrollbar disappears.  It reappears when the window is restored."
msgstr ""

#: gui.txt:196
msgid ""
"If a window is vertically split, it will get a scrollbar when it is the\n"
"current window and when, taking the middle of the current window and drawing "
"a\n"
"vertical line, this line goes through the window.\n"
"When there are scrollbars on both sides, and the middle of the current "
"window\n"
"is on the left half, the right scrollbar column will contain scrollbars for\n"
"the rightmost windows.  The same happens on the other side."
msgstr ""

#: gui.txt:204
msgid "HORIZONTAL SCROLLBARS\t\t\t\t\t*gui-horiz-scroll*"
msgstr ""

#: gui.txt:206
msgid ""
"The horizontal scrollbar (at the bottom of the Vim GUI) may be used to\n"
"scroll text sideways when the 'wrap' option is turned off.  The\n"
"scrollbar-thumb size is such that the text of the longest visible line may "
"be\n"
"scrolled as far as possible left and right.  The cursor is moved when\n"
"necessary, it must remain on a visible character (unless 'virtualedit' is\n"
"set)."
msgstr ""

#: gui.txt:213
msgid ""
"Computing the length of the longest visible line takes quite a bit of\n"
"computation, and it has to be done every time something changes.  If this\n"
"takes too much time or you don't like the cursor jumping to another line,\n"
"include the 'h' flag in 'guioptions'.  Then the scrolling is limited by the\n"
"text of the current cursor line."
msgstr ""

#: gui.txt:219
msgid ""
"\t\t\t\t\t\t\t*athena-intellimouse*\n"
"If you have an Intellimouse and an X server that supports using the wheel,\n"
"then you can use the wheel to scroll the text up and down in gvim.  This "
"works\n"
"with XFree86 4.0 and later, and with some older versions when you add "
"patches.\n"
"See |scroll-mouse-wheel|."
msgstr ""

#: gui.txt:225
msgid ""
"For older versions of XFree86 you must patch your X server.  The following\n"
"page has a bit of information about using the Intellimouse on Linux as well "
"as\n"
"links to the patches and X server binaries (may not have the one you need\n"
"though):\n"
"    http://www.inria.fr/koala/colas/mouse-wheel-scroll/"
msgstr ""

#: gui.txt:231
msgid ""
"============================================================================"
"==\n"
"3. Mouse Control\t\t\t\t\t*gui-mouse*"
msgstr ""

#: gui.txt:234
msgid ""
"The mouse only works if the appropriate flag in the 'mouse' option is set.\n"
"When the GUI is switched on, and 'mouse' wasn't set yet, the 'mouse' option "
"is\n"
"automatically set to \"a\", enabling it for all modes except for the\n"
"|hit-enter| prompt.  If you don't want this, a good place to change the\n"
"'mouse' option is the \"gvimrc\" file."
msgstr ""

#: gui.txt:240
msgid ""
"Other options that are relevant:\n"
"'mousefocus'\twindow focus follows mouse pointer |gui-mouse-focus|\n"
"'mousemodel'\twhat mouse button does which action\n"
"'mousehide'\thide mouse pointer while typing text\n"
"'selectmode'\twhether to start Select mode or Visual mode"
msgstr ""

#: gui.txt:246
msgid ""
"A quick way to set these is with the \":behave\" command.\n"
"\t\t\t\t\t\t\t*:behave* *:be*\n"
":be[have] {model}\tSet behavior for mouse and selection.  Valid\n"
"\t\t\targuments are:\n"
"\t\t\t   mswin\tMS-Windows behavior\n"
"\t\t\t   xterm\tXterm behavior"
msgstr ""

#: gui.txt:253
msgid ""
"\t\t\tUsing \":behave\" changes these options:\n"
"\t\t\toption\t\tmswin\t\t\txterm\t~\n"
"\t\t\t'selectmode'\t\"mouse,key\"\t\t\"\"\n"
"\t\t\t'mousemodel'\t\"popup\"\t\t\t\"extend\"\n"
"\t\t\t'keymodel'\t\"startsel,stopsel\"\t\"\"\n"
"\t\t\t'selection'\t\"exclusive\"\t\t\"inclusive\""
msgstr ""

#: gui.txt:260
msgid ""
"In the $VIMRUNTIME directory, there is a script called |mswin.vim|, which "
"will\n"
"also map a few keys to the MS-Windows cut/copy/paste commands.  This is NOT\n"
"compatible, since it uses the CTRL-V, CTRL-X and CTRL-C keys.  If you don't\n"
"mind, use this command: >\n"
"\t:so $VIMRUNTIME/mswin.vim"
msgstr ""

#: gui.txt:266
msgid "For scrolling with a wheel on a mouse, see |scroll-mouse-wheel|."
msgstr ""

#: gui.txt:269
msgid "3.1 Moving Cursor with Mouse\t\t\t\t*gui-mouse-move*"
msgstr ""

#: gui.txt:271
msgid ""
"Click the left mouse button somewhere in a text buffer where you want the\n"
"cursor to go, and it does!\n"
"This works in\t    when 'mouse' contains ~\n"
"Normal mode\t    'n' or 'a'\n"
"Visual mode\t    'v' or 'a'\n"
"Insert mode\t    'i' or 'a'"
msgstr ""

#: gui.txt:278
msgid "Select mode is handled like Visual mode."
msgstr ""

#: gui.txt:280
msgid ""
"You may use this with an operator such as 'd' to delete text from the "
"current\n"
"cursor position to the position you point to with the mouse.  That is, you "
"hit\n"
"'d' and then click the mouse somewhere."
msgstr ""

#: gui.txt:284
msgid ""
"\t\t\t\t\t\t\t*gui-mouse-focus*\n"
"The 'mousefocus' option can be set to make the keyboard focus follow the\n"
"mouse pointer.  This means that the window where the mouse pointer is, is "
"the\n"
"active window.  Warning: this doesn't work very well when using a menu,\n"
"because the menu command will always be applied to the top window."
msgstr ""

#: gui.txt:290
msgid ""
"If you are on the ':' line (or '/' or '?'), then clicking the left or right\n"
"mouse button will position the cursor on the ':' line (if 'mouse' contains\n"
"'c', 'a' or 'A')."
msgstr ""

#: gui.txt:294
msgid ""
"In any situation the middle mouse button may be clicked to paste the current\n"
"selection."
msgstr ""

#: gui.txt:298
msgid "3.2 Selection with Mouse\t\t\t\t*gui-mouse-select*"
msgstr ""

#: gui.txt:300
msgid ""
"The mouse can be used to start a selection.  How depends on the 'mousemodel'\n"
"option:\n"
"'mousemodel' is \"extend\": use the right mouse button\n"
"'mousemodel' is \"popup\":  use the left mouse button, while keeping the Shift\n"
"key pressed."
msgstr ""

#: gui.txt:306
msgid ""
"If there was no selection yet, this starts a selection from the old cursor\n"
"position to the position pointed to with the mouse.  If there already is a\n"
"selection then the closest end will be extended."
msgstr ""

#: gui.txt:310
msgid ""
"If 'selectmode' contains \"mouse\", then the selection will be in Select mode.\n"
"This means that typing normal text will replace the selection.  See\n"
"|Select-mode|.  Otherwise, the selection will be in Visual mode."
msgstr ""

#: gui.txt:314
msgid ""
"Double clicking may be done to make the selection word-wise, triple clicking\n"
"makes it line-wise, and quadruple clicking makes it rectangular block-wise."
msgstr ""

#: gui.txt:317
msgid "See |gui-selections| on how the selection is used."
msgstr ""

#: gui.txt:320
msgid ""
"3.3 Other Text Selection with Mouse\t\t*gui-mouse-modeless*\n"
"\t\t\t\t\t\t*modeless-selection*\n"
"A different kind of selection is used when:\n"
"- in Command-line mode\n"
"- in the Command-line window and pointing in another window\n"
"- at the |hit-enter| prompt\n"
"- whenever the current mode is not in the 'mouse' option\n"
"- when holding the CTRL and SHIFT keys in the GUI"
msgstr ""

#: gui.txt:329
msgid ""
"Since Vim continues like the selection isn't there, and there is no mode\n"
"associated with the selection, this is called modeless selection.  Any text "
"in\n"
"the Vim window can be selected.  Select the text by pressing the left mouse\n"
"button at the start, drag to the end and release.  To extend the selection,\n"
"use the right mouse button when 'mousemodel' is \"extend\", or the left mouse\n"
"button with the shift key pressed when 'mousemodel' is \"popup\".\n"
"The selection is removed when the selected text is scrolled or changed."
msgstr ""

#: gui.txt:337
msgid ""
"On the command line CTRL-Y can be used to copy the selection into the\n"
"clipboard.  To do this from Insert mode, use CTRL-O : CTRL-Y <CR>.  When\n"
"'guioptions' contains a or A (default on X11), the selection is "
"automatically\n"
"copied to the \"* register."
msgstr ""

#: gui.txt:342
msgid ""
"The middle mouse button can then paste the text.  On non-X11 systems, you "
"can\n"
"use CTRL-R +."
msgstr ""

#: gui.txt:346
msgid "3.4 Using Mouse on Status Lines\t\t\t\t*gui-mouse-status*"
msgstr ""

#: gui.txt:348
msgid ""
"Clicking the left or right mouse button on the status line below a Vim\n"
"window makes that window the current window.  This actually happens on "
"button\n"
"release (to be able to distinguish a click from a drag action)."
msgstr ""

#: gui.txt:352
msgid ""
"With the left mouse button a status line can be dragged up and down, thus\n"
"resizing the windows above and below it.  This does not change window focus."
msgstr ""

#: gui.txt:355
msgid ""
"The same can be used on the vertical separator: click to give the window "
"left\n"
"of it focus, drag left and right to make windows wider and narrower."
msgstr ""

#: gui.txt:359
msgid "3.5 Various Mouse Clicks\t\t\t\t*gui-mouse-various*"
msgstr ""

#: gui.txt:361
msgid ""
"    <S-LeftMouse>\tSearch forward for the word under the mouse click.\n"
"\t\t\tWhen 'mousemodel' is \"popup\" this starts or extends a\n"
"\t\t\tselection.\n"
"    <S-RightMouse>\tSearch backward for the word under the mouse click.\n"
"    <C-LeftMouse>\tJump to the tag name under the mouse click.\n"
"    <C-RightMouse>\tJump back to position before the previous tag jump\n"
"\t\t\t(same as \"CTRL-T\")"
msgstr ""

#: gui.txt:370
msgid "3.6 Mouse Mappings\t\t\t\t\t*gui-mouse-mapping*"
msgstr ""

#: gui.txt:372
msgid ""
"The mouse events, complete with modifiers, may be mapped.  Eg: >\n"
"   :map <S-LeftMouse>     <RightMouse>\n"
"   :map <S-LeftDrag>      <RightDrag>\n"
"   :map <S-LeftRelease>   <RightRelease>\n"
"   :map <2-S-LeftMouse>   <2-RightMouse>\n"
"   :map <2-S-LeftDrag>    <2-RightDrag>\n"
"   :map <2-S-LeftRelease> <2-RightRelease>\n"
"   :map <3-S-LeftMouse>   <3-RightMouse>\n"
"   :map <3-S-LeftDrag>    <3-RightDrag>\n"
"   :map <3-S-LeftRelease> <3-RightRelease>\n"
"   :map <4-S-LeftMouse>   <4-RightMouse>\n"
"   :map <4-S-LeftDrag>    <4-RightDrag>\n"
"   :map <4-S-LeftRelease> <4-RightRelease>\n"
"These mappings make selection work the way it probably should in a Motif\n"
"application, with shift-left mouse allowing for extending the visual area\n"
"rather than the right mouse button."
msgstr ""

#: gui.txt:389
msgid "Mouse mapping with modifiers does not work for modeless selection."
msgstr ""

#: gui.txt:392
msgid "3.7 Drag and drop\t\t\t\t\t\t*drag-n-drop*"
msgstr ""

#: gui.txt:394
msgid ""
"You can drag and drop one or more files into the Vim window, where they will\n"
"be opened as if a |:drop| command was used."
msgstr ""

#: gui.txt:397
msgid ""
"If you hold down Shift while doing this, Vim changes to the first dropped\n"
"file's directory.  If you hold Ctrl Vim will always split a new window for "
"the\n"
"file.  Otherwise it's only done if the current buffer has been changed."
msgstr ""

#: gui.txt:401
msgid ""
"You can also drop a directory on Vim.  This starts the explorer plugin for\n"
"that directory (assuming it was enabled, otherwise you'll get an error\n"
"message).  Keep Shift pressed to change to the directory instead."
msgstr ""

#: gui.txt:405
msgid ""
"If Vim happens to be editing a command line, the names of the dropped files\n"
"and directories will be inserted at the cursor.  This allows you to use "
"these\n"
"names with any Ex command.  Special characters (space, tab, double quote and\n"
"'|'; backslash on non-MS-Windows systems) will be escaped."
msgstr ""

#: gui.txt:410
msgid ""
"============================================================================"
"==\n"
"4. Making GUI Selections\t\t\t\t*gui-selections*"
msgstr ""

#: gui.txt:413
msgid ""
"\t\t\t\t\t\t\t*quotestar*\n"
"You may make selections with the mouse (see |gui-mouse-select|), or by using\n"
"Vim's Visual mode (see |v|).  If 'a' is present in 'guioptions', then\n"
"whenever a selection is started (Visual or Select mode), or when the "
"selection\n"
"is changed, Vim becomes the owner of the windowing system's primary "
"selection\n"
"(on MS-Windows the |gui-clipboard| is used; under X11, the |x11-selection| "
"is\n"
"used - you should read whichever of these is appropriate now)."
msgstr ""

#: gui.txt:421
msgid ""
"\t\t\t\t\t\t\t*clipboard*\n"
"There is a special register for storing this selection, it is the \"*\n"
"register.  Nothing is put in here unless the information about what text is\n"
"selected is about to change (e.g. with a left mouse click somewhere), or "
"when\n"
"another application wants to paste the selected text.  Then the text is put\n"
"in the \"* register.  For example, to cut a line and make it the current\n"
"selection/put it on the clipboard: >"
msgstr ""

#: gui.txt:429
msgid "\t\"*dd"
msgstr ""

#: gui.txt:431
msgid ""
"Similarly, when you want to paste a selection from another application, "
"e.g.,\n"
"by clicking the middle mouse button, the selection is put in the \"* register\n"
"first, and then 'put' like any other register.  For example, to put the\n"
"selection (contents of the clipboard): >"
msgstr ""

#: gui.txt:436
msgid "\t\"*p"
msgstr ""

#: gui.txt:438
msgid ""
"When using this register under X11, also see |x11-selection|.  This also\n"
"explains the related \"+ register."
msgstr ""

#: gui.txt:441
msgid ""
"Note that when pasting text from one Vim into another separate Vim, the type\n"
"of selection (character, line, or block) will also be copied.  For other\n"
"applications the type is always character.  However, if the text gets\n"
"transferred via the |x11-cut-buffer|, the selection type is ALWAYS lost."
msgstr ""

#: gui.txt:446
msgid ""
"When the \"unnamed\" string is included in the 'clipboard' option, the unnamed\n"
"register is the same as the \"* register.  Thus you can yank to and paste the\n"
"selection without prepending \"* to commands."
msgstr ""

#: gui.txt:450
msgid ""
"============================================================================"
"==\n"
"5. Menus\t\t\t\t\t\t*menus*"
msgstr ""

#: gui.txt:453
msgid "For an introduction see |usr_42.txt| in the user manual."
msgstr ""

#: gui.txt:456
msgid "5.1 Using Menus\t\t\t\t\t\t*using-menus*"
msgstr ""

#: gui.txt:458
msgid ""
"Basically, menus can be used just like mappings.  You can define your own\n"
"menus, as many as you like.\n"
"Long-time Vim users won't use menus much.  But the power is in adding your "
"own\n"
"menus and menu items.  They are most useful for things that you can't "
"remember\n"
"what the key sequence was."
msgstr ""

#: gui.txt:464
msgid "For creating menus in a different language, see |:menutrans|."
msgstr ""

#: gui.txt:466
msgid ""
"\t\t\t\t\t\t\t*menu.vim*\n"
"The default menus are read from the file \"$VIMRUNTIME/menu.vim\".  See\n"
"|$VIMRUNTIME| for where the path comes from.  You can set up your own menus.\n"
"Starting off with the default set is a good idea.  You can add more items, "
"or,\n"
"if you don't like the defaults at all, start with removing all menus\n"
"|:unmenu-all|.  You can also avoid the default menus being loaded by adding\n"
"this line to your .vimrc file (NOT your .gvimrc file!): >\n"
"\t:let did_install_default_menus = 1\n"
"If you also want to avoid the Syntax menu: >\n"
"\t:let did_install_syntax_menu = 1\n"
"If you do want the Syntax menu but not all the entries for each available\n"
"syntax file (which take quite a bit of time to load): >\n"
"\t:let skip_syntax_sel_menu = 1\n"
"<\n"
"\t\t\t\t\t\t\t*console-menus*\n"
"Although this documentation is in the GUI section, you can actually use "
"menus\n"
"in console mode too.  You will have to load |menu.vim| explicitly then, it "
"is\n"
"not done by default.  You can use the |:emenu| command and command-line\n"
"completion with 'wildmenu' to access the menu entries almost like a real "
"menu\n"
"system.  To do this, put these commands in your .vimrc file: >\n"
"\t:source $VIMRUNTIME/menu.vim\n"
"\t:set wildmenu\n"
"\t:set cpo-=<\n"
"\t:set wcm=<C-Z>\n"
"\t:map <F4> :emenu <C-Z>\n"
"Pressing <F4> will start the menu.  You can now use the cursor keys to "
"select\n"
"a menu entry.  Hit <Enter> to execute it.  Hit <Esc> if you want to cancel.\n"
"This does require the |+menu| feature enabled at compile time."
msgstr ""

#: gui.txt:495
msgid ""
"\t\t\t\t\t\t\t*tear-off-menus*\n"
"GTK+ and Motif support Tear-off menus.  These are sort of sticky menus or\n"
"pop-up menus that are present all the time.  If the resizing does not work\n"
"correctly, this may be caused by using something like \"Vim*geometry\" in the\n"
"defaults.  Use \"Vim.geometry\" instead."
msgstr ""

#: gui.txt:501
msgid ""
"The Win32 GUI version emulates Motif's tear-off menus.  Actually, a Motif "
"user\n"
"will spot the differences easily, but hopefully they're just as useful.  You\n"
"can also use the |:tearoff| command together with |hidden-menus| to create\n"
"floating menus that do not appear on the main menu bar."
msgstr ""

#: gui.txt:507
msgid "5.2 Creating New Menus\t\t\t\t\t*creating-menus*"
msgstr ""

#: gui.txt:509
msgid ""
"\t\t\t\t*:me*  *:menu*  *:noreme*  *:noremenu*\n"
"\t\t\t\t*:am*  *:amenu* *:an*      *:anoremenu*\n"
"\t\t\t\t*:nme* *:nmenu* *:nnoreme* *:nnoremenu*\n"
"\t\t\t\t*:ome* *:omenu* *:onoreme* *:onoremenu*\n"
"\t\t\t\t*:vme* *:vmenu* *:vnoreme* *:vnoremenu*\n"
"\t\t\t\t*:xme* *:xmenu* *:xnoreme* *:xnoremenu*\n"
"\t\t\t\t*:sme* *:smenu* *:snoreme* *:snoremenu*\n"
"\t\t\t\t*:ime* *:imenu* *:inoreme* *:inoremenu*\n"
"\t\t\t\t*:cme* *:cmenu* *:cnoreme* *:cnoremenu*\n"
"\t\t\t\t*E330* *E327* *E331* *E336* *E333*\n"
"\t\t\t\t*E328* *E329* *E337* *E792*\n"
"To create a new menu item, use the \":menu\" commands.  They are mostly like\n"
"the \":map\" set of commands but the first argument is a menu item name, given\n"
"as a path of menus and submenus with a '.' between them, e.g.: >"
msgstr ""

#: gui.txt:524
msgid ""
"   :menu File.Save  :w<CR>\n"
"   :inoremenu File.Save  <C-O>:w<CR>\n"
"   :menu Edit.Big\\ Changes.Delete\\ All\\ Spaces  :%s/[ ^I]//g<CR>"
msgstr ""

#: gui.txt:528
msgid ""
"This last one will create a new item in the menu bar called \"Edit\", holding\n"
"the mouse button down on this will pop up a menu containing the item\n"
"\"Big Changes\", which is a sub-menu containing the item \"Delete All Spaces\",\n"
"which when selected, performs the operation."
msgstr ""

#: gui.txt:533
msgid "Special characters in a menu name:"
msgstr ""

#: gui.txt:535
msgid ""
"\t&\tThe next character is the shortcut key.  Make sure each\n"
"\t\tshortcut key is only used once in a (sub)menu.  If you want to\n"
"\t\tinsert a literal \"&\" in the menu name use \"&&\".\n"
"\t<Tab>\tSeparates the menu name from right-aligned text.  This can be\n"
"\t\tused to show the equivalent typed command.  The text \"<Tab>\"\n"
"\t\tcan be used here for convenience.  If you are using a real\n"
"\t\ttab, don't forget to put a backslash before it!\n"
"Example: >"
msgstr ""

#: gui.txt:544
msgid "   :amenu &File.&Open<Tab>:e  :browse e<CR>"
msgstr ""

#: gui.txt:546
msgid ""
"[typed literally]\n"
"With the shortcut \"F\" (while keeping the <Alt> key pressed), and then \"O\",\n"
"this menu can be used.  The second part is shown as \"Open     :e\".  The \":e\"\n"
"is right aligned, and the \"O\" is underlined, to indicate it is the shortcut."
msgstr ""

#: gui.txt:551
msgid ""
"The \":amenu\" command can be used to define menu entries for all modes at "
"once.\n"
"To make the command work correctly, a character is automatically inserted "
"for\n"
"some modes:\n"
"\tmode\t\tinserted\tappended\t~\n"
"\tNormal\t\tnothing\t\tnothing\n"
"\tVisual\t\t<C-C>\t\t<C-\\><C-G>\n"
"\tInsert\t\t<C-O>\n"
"\tCmdline\t\t<C-C>\t\t<C-\\><C-G>\n"
"\tOp-pending\t<C-C>\t\t<C-\\><C-G>"
msgstr ""

#: gui.txt:561
msgid ""
"Appending CTRL-\\ CTRL-G is for going back to insert mode when 'insertmode' "
"is\n"
"set. |CTRL-\\_CTRL-G|"
msgstr ""

#: gui.txt:564
msgid "Example: >"
msgstr ""

#: gui.txt:566
msgid "   :amenu File.Next\t:next^M"
msgstr ""

#: gui.txt:568
msgid "is equal to: >"
msgstr ""

#: gui.txt:570
msgid ""
"   :nmenu File.Next\t:next^M\n"
"   :vmenu File.Next\t^C:next^M^\\^G\n"
"   :imenu File.Next\t^O:next^M\n"
"   :cmenu File.Next\t^C:next^M^\\^G\n"
"   :omenu File.Next\t^C:next^M^\\^G"
msgstr ""

#: gui.txt:576
msgid ""
"Careful: In Insert mode this only works for a SINGLE Normal mode command,\n"
"because of the CTRL-O.  If you have two or more commands, you will need to "
"use\n"
"the \":imenu\" command.  For inserting text in any mode, you can use the\n"
"expression register: >"
msgstr ""

#: gui.txt:581
msgid "   :amenu Insert.foobar   \"='foobar'<CR>P"
msgstr ""

#: gui.txt:583
msgid ""
"Note that the '<' and 'k' flags in 'cpoptions' also apply here (when\n"
"included they make the <> form and raw key codes not being recognized)."
msgstr ""

#: gui.txt:586
msgid ""
"Note that <Esc> in Cmdline mode executes the command, like in a mapping.  "
"This\n"
"is Vi compatible.  Use CTRL-C to quit Cmdline mode."
msgstr ""

#: gui.txt:589
msgid ""
"\t\t\t\t\t\t*:menu-<silent>* *:menu-silent*\n"
"To define a menu which will not be echoed on the command line, add\n"
"\"<silent>\" as the first argument.  Example: >\n"
"\t:menu <silent> Settings.Ignore\\ case  :set ic<CR>\n"
"The \":set ic\" will not be echoed when using this menu.  Messages from the\n"
"executed command are still given though.  To shut them up too, add a "
"\":silent\"\n"
"in the executed command: >\n"
"\t:menu <silent> Search.Header :exe \":silent normal /Header\\r\"<CR>\n"
"\"<silent>\" may also appear just after \"<special>\" or \"<script>\"."
msgstr ""

#: gui.txt:599
msgid ""
"\t\t\t\t\t*:menu-<special>* *:menu-special*\n"
"Define a menu with <> notation for special keys, even though the \"<\" flag\n"
"may appear in 'cpoptions'.  This is useful if the side effect of setting\n"
"'cpoptions' is not desired.  Example: >\n"
"\t:menu <special> Search.Header /Header<CR>\n"
"\"<special>\" must appear as the very first argument to the \":menu\" command or\n"
"just after \"<silent>\" or \"<script>\"."
msgstr ""

#: gui.txt:607
msgid ""
"\t\t\t\t\t\t*:menu-<script>* *:menu-script*\n"
"The \"to\" part of the menu will be inspected for mappings.  If you don't want\n"
"this, use the \":noremenu\" command (or the similar one for a specific mode).\n"
"If you do want to use script-local mappings, add \"<script>\" as the very "
"first\n"
"argument to the \":menu\" command or just after \"<silent>\" or \"<special>\"."
msgstr ""

#: gui.txt:613
msgid ""
"\t\t\t\t\t\t\t*menu-priority*\n"
"You can give a priority to a menu.  Menus with a higher priority go more to\n"
"the right.  The priority is given as a number before the \":menu\" command.\n"
"Example: >\n"
"\t:80menu Buffer.next :bn<CR>"
msgstr ""

#: gui.txt:619
msgid ""
"The default menus have these priorities:\n"
"\tFile\t\t10\n"
"\tEdit\t\t20\n"
"\tTools\t\t40\n"
"\tSyntax\t\t50\n"
"\tBuffers\t\t60\n"
"\tWindow\t\t70\n"
"\tHelp\t\t9999"
msgstr ""

#: gui.txt:628
msgid ""
"When no or zero priority is given, 500 is used.\n"
"The priority for the PopUp menu is not used."
msgstr ""

#: gui.txt:631
msgid ""
"The Help menu will be placed on the far right side of the menu bar on "
"systems\n"
"which support this (Motif and GTK+).  For GTK+ 2, this is not done anymore\n"
"because right-aligning the Help menu is now discouraged UI design."
msgstr ""

#: gui.txt:635
msgid ""
"You can use a priority higher than 9999, to make it go after the Help menu,\n"
"but that is non-standard and is discouraged.  The highest possible priority "
"is\n"
"about 32000.  The lowest is 1."
msgstr ""

#: gui.txt:639
msgid ""
"\t\t\t\t\t\t\t*sub-menu-priority*\n"
"The same mechanism can be used to position a sub-menu.  The priority is then\n"
"given as a dot-separated list of priorities, before the menu name: >\n"
"\t:menu 80.500 Buffer.next :bn<CR>\n"
"Giving the sub-menu priority is only needed when the item is not to be put\n"
"in a normal position.  For example, to put a sub-menu before the other "
"items: >\n"
"\t:menu 80.100 Buffer.first :brew<CR>\n"
"Or to put a sub-menu after the other items, and further items with default\n"
"priority will be put before it: >\n"
"\t:menu 80.900 Buffer.last :blast<CR>\n"
"When a number is missing, the default value 500 will be used: >\n"
"\t:menu .900 myMenu.test :echo \"text\"<CR>\n"
"The menu priority is only used when creating a new menu.  When it already\n"
"existed, e.g., in another mode, the priority will not change.  Thus, the\n"
"priority only needs to be given the first time a menu is used.\n"
"An exception is the PopUp menu.  There is a separate menu for each mode\n"
"(Normal, Op-pending, Visual, Insert, Cmdline).  The order in each of these\n"
"menus can be different.  This is different from menu-bar menus, which have\n"
"the same order for all modes.\n"
"NOTE: sub-menu priorities currently don't work for all versions of the GUI."
msgstr ""

#: gui.txt:660
msgid ""
"\t\t\t\t\t\t\t*menu-separator* *E332*\n"
"Menu items can be separated by a special item that inserts some space "
"between\n"
"items.  Depending on the system this is displayed as a line or a dotted "
"line.\n"
"These items must start with a '-' and end in a '-'.  The part in between is\n"
"used to give it a unique name.  Priorities can be used as with normal items.\n"
"Example: >\n"
"\t:menu Example.item1\t:do something\n"
"\t:menu Example.-Sep-\t:\n"
"\t:menu Example.item2\t:do something different\n"
"Note that the separator also requires a rhs.  It doesn't matter what it is,\n"
"because the item will never be selected.  Use a single colon to keep it\n"
"simple."
msgstr ""

#: gui.txt:673
msgid ""
"\t\t\t\t\t\t\t*gui-toolbar*\n"
"The toolbar is currently available in the Win32, Athena, Motif, GTK+ (X11),\n"
"and Photon GUI.  It should turn up in other GUIs in due course.  The\n"
"default toolbar is setup in menu.vim.\n"
"The display of the toolbar is controlled by the 'guioptions' letter 'T'.  "
"You\n"
"can thus have menu & toolbar together, or either on its own, or neither.\n"
"The appearance is controlled by the 'toolbar' option.  You can chose between\n"
"an image, text or both."
msgstr ""

#: gui.txt:682
msgid ""
"\t\t\t\t\t\t\t*toolbar-icon*\n"
"The toolbar is defined as a special menu called ToolBar, which only has one\n"
"level.  Vim interprets the items in this menu as follows:\n"
"1)  If an \"icon=\" argument was specified, the file with this name is used.\n"
"    The file can either be specified with the full path or with the base "
"name.\n"
"    In the last case it is searched for in the \"bitmaps\" directory in\n"
"    'runtimepath', like in point 3.  Examples: >\n"
"\t:amenu icon=/usr/local/pixmaps/foo_icon.xpm ToolBar.Foo :echo \"Foo\"<CR>\n"
"\t:amenu icon=FooIcon ToolBar.Foo :echo \"Foo\"<CR>\n"
"<   Note that in the first case the extension is included, while in the "
"second\n"
"    case it is omitted.\n"
"    If the file cannot be opened the next points are tried.\n"
"    A space in the file name must be escaped with a backslash.\n"
"    A menu priority must come _after_ the icon argument: >\n"
"\t:amenu icon=foo 1.42 ToolBar.Foo :echo \"42!\"<CR>\n"
"2)  An item called 'BuiltIn##', where ## is a number, is taken as number ## "
"of\n"
"    the built-in bitmaps available in Vim.  Currently there are 31 numbered\n"
"    from 0 to 30 which cover most common editing operations |builtin-tools|. "
">\n"
"\t:amenu ToolBar.BuiltIn22 :call SearchNext(\"back\")<CR>\n"
"3)  An item with another name is first searched for in the directory\n"
"    \"bitmaps\" in 'runtimepath'.  If found, the bitmap file is used as the\n"
"    toolbar button image.  Note that the exact filename is OS-specific: For\n"
"    example, under Win32 the command >\n"
"\t:amenu ToolBar.Hello :echo \"hello\"<CR>\n"
"<   would find the file 'hello.bmp'.  Under GTK+/X11 it is 'Hello.xpm'.  "
"With\n"
"    GTK+ 2 the files 'Hello.png', 'Hello.xpm' and 'Hello.bmp' are checked "
"for\n"
"    existence, and the first one found would be used.\n"
"    For MS-Windows and GTK+ 2 the bitmap is scaled to fit the button.  For\n"
"    MS-Windows a size of 18 by 18 pixels works best.\n"
"    For MS-Windows the bitmap should have 16 colors with the standard "
"palette.\n"
"    The light grey pixels will be changed to the Window frame color and the\n"
"    dark grey pixels to the window shadow color.  More colors might also "
"work,\n"
"    depending on your system.\n"
"4)  If the bitmap is still not found, Vim checks for a match against its "
"list\n"
"    of built-in names.  Each built-in button image has a name.\n"
"    So the command >\n"
"\t:amenu ToolBar.Open :e\n"
"<   will show the built-in \"open a file\" button image if no open.bmp exists.\n"
"    All the built-in names can be seen used in menu.vim.\n"
"5)  If all else fails, a blank, but functioning, button is displayed."
msgstr ""

#: gui.txt:723
msgid ""
"\t\t\t\t\t\t\t*builtin-tools*\n"
"nr  Name\t\tNormal action  ~\n"
"00  New\t\t\topen new window\n"
"01  Open\t\tbrowse for file to open in current window\n"
"02  Save\t\twrite buffer to file\n"
"03  Undo\t\tundo last change\n"
"04  Redo\t\tredo last undone change\n"
"05  Cut\t\t\tdelete selected text to clipboard\n"
"06  Copy\t\tcopy selected text to clipboard\n"
"07  Paste\t\tpaste text from clipboard\n"
"08  Print\t\tprint current buffer\n"
"09  Help\t\topen a buffer on Vim's builtin help\n"
"10  Find\t\tstart a search command\n"
"11  SaveAll\t\twrite all modified buffers to file\n"
"12  SaveSesn\t\twrite session file for current situation\n"
"13  NewSesn\t\twrite new session file\n"
"14  LoadSesn\t\tload session file\n"
"15  RunScript\t\tbrowse for file to run as a Vim script\n"
"16  Replace\t\tprompt for substitute command\n"
"17  WinClose\t\tclose current window\n"
"18  WinMax\t\tmake current window use many lines\n"
"19  WinMin\t\tmake current window use few lines\n"
"20  WinSplit\t\tsplit current window\n"
"21  Shell\t\tstart a shell\n"
"22  FindPrev\t\tsearch again, backward\n"
"23  FindNext\t\tsearch again, forward\n"
"24  FindHelp\t\tprompt for word to search help for\n"
"25  Make\t\trun make and jump to first error\n"
"26  TagJump\t\tjump to tag under the cursor\n"
"27  RunCtags\t\tbuild tags for files in current directory\n"
"28  WinVSplit\t\tsplit current window vertically\n"
"29  WinMaxWidth\t\tmake current window use many columns\n"
"30  WinMinWidth\t\tmake current window use few columns"
msgstr ""

#: gui.txt:757
msgid ""
"\t\t\t\t\t*hidden-menus* *win32-hidden-menus*\n"
"In the Win32 and GTK+ GUI, starting a menu name with ']' excludes that menu\n"
"from the main menu bar.  You must then use the |:popup| or |:tearoff| "
"command\n"
"to display it."
msgstr ""

#: gui.txt:762
msgid ""
"\t\t\t\t\t\t\t*popup-menu*\n"
"In the Win32, GTK+, Motif, Athena and Photon GUI, you can define the\n"
"special menu \"PopUp\".  This is the menu that is displayed when the right "
"mouse\n"
"button is pressed, if 'mousemodel' is set to popup or popup_setpos."
msgstr ""

#: gui.txt:768
msgid "5.3 Showing What Menus Are Mapped To\t\t\t*showing-menus*"
msgstr ""

#: gui.txt:770
msgid ""
"To see what an existing menu is mapped to, use just one argument after the\n"
"menu commands (just like you would with the \":map\" commands).  If the menu\n"
"specified is a submenu, then all menus under that hierarchy will be shown.\n"
"If no argument is given after :menu at all, then ALL menu items are shown\n"
"for the appropriate mode (e.g., Command-line mode for :cmenu)."
msgstr ""

#: gui.txt:776
msgid ""
"Special characters in the list, just before the rhs:\n"
"*\tThe menu was defined with \"nore\" to disallow remapping.\n"
"&\tThe menu was defined with \"<script>\" to allow remapping script-local\n"
"\tmappings only.\n"
"-\tThe menu was disabled."
msgstr ""

#: gui.txt:782
msgid ""
"Note that hitting <Tab> while entering a menu name after a menu command may\n"
"be used to complete the name of the menu item."
msgstr ""

#: gui.txt:786
msgid "5.4 Executing Menus\t\t\t\t\t*execute-menus*"
msgstr ""

#: gui.txt:788
msgid ""
"\t\t\t\t\t\t*:em*  *:emenu* *E334* *E335*\n"
":[range]em[enu] {menu}\t\tExecute {menu} from the command line.\n"
"\t\t\t\tThe default is to execute the Normal mode\n"
"\t\t\t\tmenu.  If a range is specified, it executes\n"
"\t\t\t\tthe Visual mode menu.\n"
"\t\t\t\tIf used from <c-o>, it executes the\n"
"\t\t\t\tinsert-mode menu Eg: >\n"
"\t:emenu File.Exit"
msgstr ""

#: gui.txt:797
msgid ""
"If the console-mode vim has been compiled with WANT_MENU defined, you can\n"
"use :emenu to access useful menu items you may have got used to from GUI\n"
"mode.  See 'wildmenu' for an option that works well with this.  See\n"
"|console-menus| for an example."
msgstr ""

#: gui.txt:802
msgid ""
"When using a range, if the lines match with '<,'>, then the menu is executed\n"
"using the last visual selection."
msgstr ""

#: gui.txt:806
msgid "5.5 Deleting Menus\t\t\t\t\t*delete-menus*"
msgstr ""

#: gui.txt:808
msgid ""
"\t\t\t\t\t\t*:unme*  *:unmenu*\n"
"\t\t\t\t\t\t*:aun*   *:aunmenu*\n"
"\t\t\t\t\t\t*:nunme* *:nunmenu*\n"
"\t\t\t\t\t\t*:ounme* *:ounmenu*\n"
"\t\t\t\t\t\t*:vunme* *:vunmenu*\n"
"\t\t\t\t\t\t*:xunme* *:xunmenu*\n"
"\t\t\t\t\t\t*:sunme* *:sunmenu*\n"
"\t\t\t\t\t\t*:iunme* *:iunmenu*\n"
"\t\t\t\t\t\t*:cunme* *:cunmenu*\n"
"To delete a menu item or a whole submenu, use the unmenu commands, which are\n"
"analogous to the unmap commands.  Eg: >\n"
"    :unmenu! Edit.Paste"
msgstr ""

#: gui.txt:821
msgid ""
"This will remove the Paste item from the Edit menu for Insert and\n"
"Command-line modes."
msgstr ""

#: gui.txt:824
msgid ""
"Note that hitting <Tab> while entering a menu name after an umenu command\n"
"may be used to complete the name of the menu item for the appropriate mode."
msgstr ""

#: gui.txt:827
msgid ""
"To remove all menus use:\t\t\t*:unmenu-all*  >\n"
"\t:unmenu *\t\" remove all menus in Normal and visual mode\n"
"\t:unmenu! *\t\" remove all menus in Insert and Command-line mode\n"
"\t:aunmenu *\t\" remove all menus in all modes"
msgstr ""

#: gui.txt:832
msgid ""
"If you want to get rid of the menu bar: >\n"
"\t:set guioptions-=m"
msgstr ""

#: gui.txt:836
msgid "5.6 Disabling Menus\t\t\t\t\t*disable-menus*"
msgstr ""

#: gui.txt:838
msgid ""
"\t\t\t\t\t\t*:menu-disable* *:menu-enable*\n"
"If you do not want to remove a menu, but disable it for a moment, this can "
"be\n"
"done by adding the \"enable\" or \"disable\" keyword to a \":menu\" command.\n"
"Examples: >\n"
"\t:menu disable &File.&Open\\.\\.\\.\n"
"\t:amenu enable *\n"
"\t:amenu disable &Tools.*"
msgstr ""

#: gui.txt:846
msgid ""
"The command applies to the modes as used with all menu commands.  Note that\n"
"characters like \"&\" need to be included for translated names to be found.\n"
"When the argument is \"*\", all menus are affected.  Otherwise the given menu\n"
"name and all existing submenus below it are affected."
msgstr ""

#: gui.txt:852
msgid "5.7 Examples for Menus\t\t\t\t\t*menu-examples*"
msgstr ""

#: gui.txt:854
msgid ""
"Here is an example on how to add menu items with menu's!  You can add a menu\n"
"item for the keyword under the cursor.  The register \"z\" is used. >"
msgstr ""

#: gui.txt:857
msgid ""
"  :nmenu Words.Add\\ Var\t\twb\"zye:menu! Words.<C-R>z <C-R>z<CR>\n"
"  :nmenu Words.Remove\\ Var\twb\"zye:unmenu! Words.<C-R>z<CR>\n"
"  :vmenu Words.Add\\ Var\t\t\"zy:menu! Words.<C-R>z <C-R>z <CR>\n"
"  :vmenu Words.Remove\\ Var\t\"zy:unmenu! Words.<C-R>z<CR>\n"
"  :imenu Words.Add\\ Var\t\t<Esc>wb\"zye:menu! Words.<C-R>z <C-R>z<CR>a\n"
"  :imenu Words.Remove\\ Var\t<Esc>wb\"zye:unmenu! Words.<C-R>z<CR>a"
msgstr ""

#: gui.txt:864
msgid ""
"(the rhs is in <> notation, you can copy/paste this text to try out the\n"
"mappings, or put these lines in your gvimrc; \"<C-R>\" is CTRL-R, \"<CR>\" is\n"
"the <CR> key.  |<>|)"
msgstr ""

#: gui.txt:869
msgid "5.8 Tooltips & Menu tips"
msgstr ""

#: gui.txt:871
msgid "See section |42.4| in the user manual."
msgstr ""

#: gui.txt:873
msgid ""
"\t\t\t\t\t\t\t*:tmenu* *:tm*\n"
":tm[enu] {menupath} {rhs}\tDefine a tip for a menu or tool.  {only in\n"
"\t\t\t\tX11 and Win32 GUI}"
msgstr ""

#: gui.txt:877
msgid ":tm[enu] [menupath]\t\tList menu tips. {only in X11 and Win32 GUI}"
msgstr ""

#: gui.txt:879
msgid ""
"\t\t\t\t\t\t\t*:tunmenu* *:tu*\n"
":tu[nmenu] {menupath}\t\tRemove a tip for a menu or tool.\n"
"\t\t\t\t{only in X11 and Win32 GUI}"
msgstr ""

#: gui.txt:883
msgid ""
"When a tip is defined for a menu item, it appears in the command-line area\n"
"when the mouse is over that item, much like a standard Windows menu hint in\n"
"the status bar.  (Except when Vim is in Command-line mode, when of course\n"
"nothing is displayed.)\n"
"When a tip is defined for a ToolBar item, it appears as a tooltip when the\n"
"mouse pauses over that button, in the usual fashion.  Use the |hl-Tooltip|\n"
"highlight group to change its colors."
msgstr ""

#: gui.txt:891
msgid ""
"A \"tip\" can be defined for each menu item.  For example, when defining a "
"menu\n"
"item like this: >\n"
"\t:amenu MyMenu.Hello :echo \"Hello\"<CR>\n"
"The tip is defined like this: >\n"
"\t:tmenu MyMenu.Hello Displays a greeting.\n"
"And delete it with: >\n"
"\t:tunmenu MyMenu.Hello"
msgstr ""

#: gui.txt:899
msgid ""
"Tooltips are currently only supported for the X11 and Win32 GUI.  However, "
"they\n"
"should appear for the other gui platforms in the not too distant future."
msgstr ""

#: gui.txt:902
msgid ""
"The \":tmenu\" command works just like other menu commands, it uses the same\n"
"arguments.  \":tunmenu\" deletes an existing menu tip, in the same way as the\n"
"other unmenu commands."
msgstr ""

#: gui.txt:906
msgid ""
"If a menu item becomes invalid (i.e. its actions in all modes are deleted) "
"Vim\n"
"deletes the menu tip (and the item) for you.  This means that :aunmenu "
"deletes\n"
"a menu item - you don't need to do a :tunmenu as well."
msgstr ""

#: gui.txt:911
msgid "5.9 Popup Menus"
msgstr ""

#: gui.txt:913
msgid ""
"In the Win32 and GTK+ GUI, you can cause a menu to popup at the cursor.\n"
"This behaves similarly to the PopUp menus except that any menu tree can\n"
"be popped up."
msgstr ""

#: gui.txt:917
msgid ""
"This command is for backwards compatibility, using it is discouraged, "
"because\n"
"it behaves in a strange way."
msgstr ""

#: gui.txt:920
msgid ""
"\t\t\t\t\t\t\t*:popup* *:popu*\n"
":popu[p] {name}\t\t\tPopup the menu {name}.  The menu named must\n"
"\t\t\t\thave at least one subentry, but need not\n"
"\t\t\t\tappear on the menu-bar (see |hidden-menus|).\n"
"\t\t\t\t{only available for Win32 and GTK GUI}"
msgstr ""

#: gui.txt:926
msgid ""
":popu[p]! {name}\t\tLike above, but use the position of the mouse\n"
"\t\t\t\tpointer instead of the cursor."
msgstr ""

#: gui.txt:929
msgid ""
"Example: >\n"
"\t:popup File\n"
"will make the \"File\" menu (if there is one) appear at the text cursor (mouse\n"
"pointer if ! was used). >"
msgstr ""

#: gui.txt:934
msgid ""
"\t:amenu ]Toolbar.Make\t:make<CR>\n"
"\t:popup ]Toolbar\n"
"This creates a popup menu that doesn't exist on the main menu-bar."
msgstr ""

#: gui.txt:938
msgid "Note that a menu that starts with ']' will not be displayed."
msgstr ""

#: gui.txt:940
msgid ""
"============================================================================"
"==\n"
"6. Extras\t\t\t\t\t\t*gui-extras*"
msgstr ""

#: gui.txt:943
msgid "This section describes other features which are related to the GUI."
msgstr ""

#: gui.txt:945
msgid ""
"- With the GUI, there is no wait for one second after hitting escape, "
"because\n"
"  the key codes don't start with <Esc>."
msgstr ""

#: gui.txt:948
msgid ""
"- Typing ^V followed by a special key in the GUI will insert \"<Key>\", since\n"
"  the internal string used is meaningless.  Modifiers may also be held down "
"to\n"
"  get \"<Modifiers-Key>\"."
msgstr ""

#: gui.txt:952
msgid ""
"- In the GUI, the modifiers SHIFT, CTRL, and ALT (or META) may be used "
"within\n"
"  mappings of special keys and mouse events.  E.g.: :map <M-LeftDrag> "
"<LeftDrag>"
msgstr ""

#: gui.txt:955
msgid ""
"- In the GUI, several normal keys may have modifiers in mappings etc, these\n"
"  are <Space>, <Tab>, <NL>, <CR>, <Esc>."
msgstr ""

#: gui.txt:958
msgid ""
"- To check in a Vim script if the GUI is being used, you can use something\n"
"  like this: >"
msgstr ""

#: gui.txt:961
msgid ""
"\tif has(\"gui_running\")\n"
"\t   echo \"yes, we have a GUI\"\n"
"\telse\n"
"\t   echo \"Boring old console\"\n"
"\tendif\n"
"<\t\t\t\t\t\t\t*setting-guifont*\n"
"- When you use the same vimrc file on various systems, you can use something\n"
"  like this to set options specifically for each type of GUI: >"
msgstr ""

#: gui.txt:970
msgid ""
"\tif has(\"gui_running\")\n"
"\t    if has(\"gui_gtk2\")\n"
"\t\t:set guifont=Luxi\\ Mono\\ 12\n"
"\t    elseif has(\"x11\")\n"
"\t\t\" Also for GTK 1\n"
"\t\t:set guifont=*-lucidatypewriter-medium-r-normal-*-*-180-*-*-m-*-*\n"
"\t    elseif has(\"gui_win32\")\n"
"\t\t:set guifont=Luxi_Mono:h12:cANSI\n"
"\t    endif\n"
"\tendif"
msgstr ""

#: gui.txt:981
msgid ""
"A recommended Japanese font is MS Mincho.  You can find info here:\n"
"http://www.lexikan.com/mincho.htm"
msgstr ""

#: gui.txt:984
msgid ""
"============================================================================"
"==\n"
"7. Shell Commands\t\t\t\t\t*gui-shell*"
msgstr ""

#: gui.txt:987
msgid ""
"For the X11 GUI the external commands are executed inside the gvim window.\n"
"See |gui-pty|."
msgstr ""

#: gui.txt:990
msgid ""
"WARNING: Executing an external command from the X11 GUI will not always\n"
"work.  \"normal\" commands like \"ls\", \"grep\" and \"make\" mostly work fine.\n"
"Commands that require an intelligent terminal like \"less\" and \"ispell\" won't\n"
"work.  Some may even hang and need to be killed from another terminal.  So "
"be\n"
"careful!"
msgstr ""

#: gui.txt:996
msgid ""
"For the Win32 GUI the external commands are executed in a separate window.\n"
"See |gui-shell-win32|."
msgstr ""

#: gui.txt:999
msgid " vim:tw=78:sw=4:ts=8:ft=help:norl:"
msgstr ""
