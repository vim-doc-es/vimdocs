*usr_08.txt*	For Vim version 7.2.  Last change: 2006 Jul 18

		 MANUAL DE USUARIO DE VIM - por Bram Moolenaar

				Dividir en ventanas


Mostrar dos archivos diferentes uno encima del otro.  Mirar dos puntos del
mismo archivo a la vez.  Ver las diferencias entre un archivo y otro
poniéndolos uno al lado del otro.  Todo esto es posible dividiendo en ventanas.

|08.1|  Dividir una ventana
|08.2|  Dividir una ventana con otro archivo
|08.3|  Tamaño de ventana
|08.4|  Divisiones verticales
|08.5|  Mover ventanas
|08.6|  Comandos sobre todas las ventanas
|08.7|  Ver las diferencias con vimdiff
|08.8|  Varios
|08.9|  Pestañas

 Capítulo siguiente: |usr_09.txt|  Uso de la GUI
  Capítulo anterior: |usr_07.txt|  Editar más de un archivo
         Contenidos: |usr_toc.txt|

==============================================================================
*08.1*  Dividir una ventana

La manera más sencilla de abrir una nueva ventana es usando lo siguiente: >

	:split

Esto parte la pantalla en dos ventanas y pone el cursor en la que se encuentre
más arriba:

	+----------------------------------+
	|/* archivo uno.c */		   |
	|~				   |
	|~				   |
	|uno.c=============================|
	|/* archivo uno.c */		   |
	|~				   |
	|uno.c=============================|
	|				   |
	+----------------------------------+

Lo que puedes observar aquí son dos ventanas en el mismo archivo.  La línea
con "====" es la línea de estado.  Muestra información sobre la ventana
situada encima.  (En la práctica esta línea estará en "vídeo inverso").
   Las dos ventanas te permiten ver dos partes del mismo archivo.  Por
ejemplo, puedes hacer que la ventana superior te muestre las declaraciones de
variables de un programa, y la de abajo el código que usa esas variables.

El comando CTRL-W w puede ser usado para saltar de una ventana a otra.  Si
estás en la ventana superior, CTRL-W w salta a la ventana inferior.  Si estás
en la ventana inferior saltará a la primera ventana.  (CTRL-W CTRL-W hace lo
mismo, en caso de que sueltes la tecla CTRL un poco después.)


CERRAR LA VENTANA

Para cerrar la ventana usa el comando: >

	:close

De hecho, cualquier comando que salga del archivo funciona, como ":quit" y
"ZZ".  Pero ":close" prevendrá que salgas de Vim cuando cierres la última
ventana.


CERRAR TODAS LAS OTRAS VENTANAS

Si has abierto un montón de ventanas y ahora quieres concentrarte en una de
ellas, este comando puede serte útil: >

	:only

Esto cierra todas las ventas, excepto la actual.  Si cualquiera de las otras
ventanas tiene cambios, obtendrás un mensaje de error y esa ventana no será
cerrada.

==============================================================================
*08.2*  Dividir una ventana con otro archivo

El siguiente comando abre una segunda ventana y comienza a editar un archivo:
>
	:split dos.c

Si estuvieras editando uno.c, entonces el resultado tendrá este aspecto:

	+----------------------------------+
	|/* archivo dos.c */		   |
	|~				   |
	|~				   |
	|two.c=============================|
	|/* archivo uno.c */		   |
	|~				   |
	|one.c=============================|
	|				   |
	+----------------------------------+

Para abrir una ventana en un archivo nuevo y vacío, usa lo siguiente: >

	:new

Puedes repetir los comandos ":split" y ":new" para crear tantas ventanas como
quieras.

==============================================================================
*08.3*  Tamaño de ventana

El comando ":split" puede recibir un argumento numérico.  Si se especifica,
este será la altura de la nueva ventana.  Por ejemplo, el siguiente abre una
nueva ventana con una altura de tres líneas y edita el archivo alpha.c: >

	:3split alpha.c

Para ventanas ya existentes puedes cambiar el tamaño de varias formas.  Cuando
tienes un ratón, es fácil: Coloca el puntero en la línea de estado que separa
las dos ventanas y arrástrala.

Para incrementar el tamaño de una ventana: >

	CTRL-W +

Para disminuirlo: >

	CTRL-W -

Ambos comandos reciben un multiplicador que modificará la altura de ventana
ese número de líneas.  "4 CTRL-W +" hará la ventana cuatro líneas más alta.

Para definir la altura de la ventana con un número específico de líneas: >

	{altura}CTRL-W _

O sea: un número {altura}, CTRL-W y luego una barra baja (Mayúsculas más la
tecla -).
   Para maximizar una ventana, usa el comando CTRL-W _ sin ningún
multiplicador ni argumento.


USO DEL RATÓN

En Vim puedes hacer muchas cosas muy rápidamente desde el teclado.  Por
desgracia, los comandos de ajuste de las ventanas requieren mucho trabajo.  En
este caso, usar el ratón es más rápido.  Coloca el ratón sobre la línea de
estado.  Ahora presiona el botón izquierdo y arrastra.  La línea de estado se
desplazará, ajustando el tamaño de la ventana.


OPCIONES

La opción 'winheight' puede ser ajustada a una altura mínima de ventana y
'winminheight' a un mínimo estricto.
   Del mismo modo, hay un ancho 'winwidth' para el ancho mínimo deseado y un
'winminheight' para un ancho mínimo estricto.
   La opción 'equalalways', cuando está activa, hace que Vim equilibre el
tamaño de las ventanas cuando éstas se cierran o se abren nuevas.

==============================================================================
*08.4*  Divisiones verticales

El comando ":split" crea una nueva ventana sobre la actual.  Para hacer que
una ventana aparezca en el lateral izquierda, usa: >

	:vsplit

o: >
	:vsplit two.c

El resultado tiene el siguiente aspecto:

	+--------------------------------------+
	|/*archivo dos.c */ |/*archivo uno.c */|
	|~                  |~                 |
	|~                  |~                 |
	|~                  |~                 |
	|two.c===============one.c=============|
	|                                      |
	+--------------------------------------+

De hecho, la línea de "|" en el centro estará en vídeo inverso.  A esto se le
llama separador vertical.

También hay un comando ":vnew", para abrir una partición vertical con un
archivo nuevo.  Otra forma de hacer esto es la siguiente: >

	:vertical new

El comando ":vertical" puede insertarse justo antes de otro comando que divida
la ventana.  Esto puede hacer que la ventana se divida verticalmente en lugar
de horizontalmente.  (Si el comando no divide ventanas se ejecuta de modo
normal.)


MOVERTE DE UNA VENTANA A OTRA

Ya que puedes partir ventanas horizontal y verticalmente a voluntad, puedes
crear casi cualquier estructura.  Una vez las hayas creado te puedes desplazar
por ellas:

	CTRL-W h        moverte a la ventana de la izquierda
	CTRL-W j        moverte a la ventana de abajo
	CTRL-W k        moverte a la ventana de arriba
	CTRL-W l        moverte a la ventana de la derecha

	CTRL-W t        moverte a la ventana superior (TOP)
	CTRL-W b        moverte a la ventana inferior (BOTTOM)

Te habrás dado cuenta de que son las mismas teclas empleadas para mover el
cursor.  También puedes usar las teclas de flechas si lo deseas.
   Más comandos para moverte a otras ventanas: |Q_wi|.

==============================================================================
*08.5*  Mover ventanas

Imagina que has creado unas cuantas ventanas, pero están en el lugar
equivocado.  Necesitarás un comando para mover las ventanas a otro lugar.  Por
ejemplo, tienes tres ventanas como estas:

	+----------------------------------+
	|/* archivo dos.c */		   |
	|~				   |
	|~				   |
	|dos.c=============================|
	|/* archivo tres.c */		   |
	|~				   |
	|~				   |
	|tres.c============================|
	|/* archivo uno.c */		   |
	|~				   |
	|uno.c=============================|
	|				   |
	+----------------------------------+

Claramente la última ventana debería estar en la parte superior.  Ve a esa
ventana (usando CTRL-W w) y luego teclea el siguiente comando: >

	CTRL-W K

Esto emplea la letra mayúscula K.  Lo que ocurre a continuación es que la
ventana se mueve a la parte superior.  
   Cuando tienes divisiones verticales, CTRL-W K desplazará la ventana actual
a la parte superior y la hará ocupar la anchura completa de la ventana de Vim.
Si este es el esqueleto:

	+-------------------------------------------+
	|/* dos.c */  |/*  tres.c */  |/* uno.c */  |
	|~	      |~	      |~	    |
	|~	      |~	      |~	    |
	|~	      |~	      |~	    |
	|~	      |~	      |~	    |
	|~	      |~	      |~	    |
	|dos.c==========tres.c=========uno.c========|
	|					    |
	+-------------------------------------------+

Usar CTRL-W K en la ventana central (tres.c) producirá lo siguiente:

	+-------------------------------------------+
	|/* tres.c */				    |
	|~					    |
	|~					    |
	|tres.c=====================================|
	|/* dos.c */	       |/* uno.c */	    |
	|~		       |~		    |
	|dos.c==================uno.c===============|
	|					    |
	+-------------------------------------------+

Hay otros tres comandos similares (probablemente puedas adivinar qué hacen):

	CTRL-W H	mover la ventana al extremo izquierdo
	CTRL-W J	mover la ventana al extremo inferior
	CTRL-W L	mover la ventana al extremo derecho

==============================================================================
*08.6*  Comandos sobre todas las ventanas

Cuando tienes varias ventanas abiertas y quieres salir de Vim, puedes cerrar
cada ventana por su cuenta.  Una forma más rápida es la siguiente: >

	:qall

Esto viene de "quit all" (salir de todo).  Si alguna de las ventanas contiene
cambios, Vim no saldrá.  El cursor se pondrá en la ventana con cambios.
Puedes usar ":w" para guardar los cambios, o ":q!" para eliminarlos
completamente.

Si sabes que hay ventanas con cambios, y quieres guardar todos estos cambios,
puedes usar el siguiente comando: >

	:wall

Esto viene de "write all" (guardar todo).  Pero, de hecho, sólo escribe
archivos con cambios.  Vim sabe que no tiene sentido guardar archivos sin
cambios.
   También hay una combinación de ":qall" y ":wall": el comando "guardar y
salir de todas las ventanas": >

	:wqall

Esto guarda todos los archivos modificados y sale de Vim.
   Por último, hay un comando que sale de Vim y no guarda nada: >

	:qall!

¡Ten cuidado, no hay modo de deshacer este comando!


ABRIR UNA VENTANA PARA CADA ARGUMENTO

Para hacer que Vim abra una ventana para cada archivo, arráncalo con "-o": >

	vim -o uno.txt dos.txt tres.txt

Los resultados en: >

	+-------------------------------+
	|archivo uno.txt		|
	|~				|
	|uno.txt========================|
	|archivo dos.txt		|
	|~				|
	|dos.txt========================|
	|archivo tres.txt		|
	|~				|
	|tres.txt=======================|
	|				|
	+-------------------------------+

El argumento "-O" se usa para que las divisiones se hagan verticalmente.
   Cuando Vim está corriendo, el comando ":all" abre una ventana para cada
archivo en la lista de argumentos.  ":vertical all" lo hace verticalmente.

==============================================================================
*08.7*  Ver las diferencias con Vim

Existe una manera especial de arrancar Vim que muestra las diferencias entre
dos archivos.  Cojamos un archivo "main.c" e insertemos unos caracteres en una
línea.  Escribe el archivo con la opción 'backup' activada, de manera que el
archivo "main.c~" contendrá la versión anterior.
   Escribe el siguiente comando en una shell (no en Vim): >

	vimdiff main.c~ main.c

Vim arrancará con dos ventanas verticales.  Verás solamente la línea en la que
has añadido los cambios y unas cuántas líneas por debajo.

	 VV		      VV
	+-----------------------------------------+
	|+ +--123 lines: /* a|+ +--123 lines: /* a|  <- pliegue
	|  texto	     |	texto		  |
	|  texto	     |	texto		  |
	|  texto	     |	texto		  |
	|  texto	     |	texto modificado  |  <- línea modificada
	|  texto	     |	texto		  |
	|  texto	     |	------------------|  <- línea eliminada
	|  texto	     |	texto		  |
	|  texto	     |	texto		  |
	|  texto	     |	texto		  |
	|+ +--432 lines:texto|+ +--432 lines:texto|  <- pliegue
	|  ~		     |	~		  |
	|  ~		     |	~		  |
	|main.c~==============main.c==============|
	|					  |
	+-----------------------------------------+

(Esta figura no muestra los colores, prueba vimdiff para hacerte una idea
mejor.)

Las líneas que no fueron modificadas se han agrupado en una sola línea.  A
esto se le denomina pliegue (fold) cerrado.  Están indicados como "<- pliegue"
en la figura.  La línea de arriba marca que hay 123 líneas.  Estas líneas son
iguales en ambos archivos.
   La línea marcada con "<- línea modificada" está coloreada y el texto
insertado se muestra con otro color.  Esto muestra claramente las diferencias
entre los dos archivos.
   La línea que fue eliminada se muestra con "---" en la ventan main.c.
Observa el "<- línea eliminada" en la figura.  Estos caracteres no están ahí
realmente.  Simplemente llenan el espacio en main.c necesario para que ambos
archivos tengan el mismo número de líneas.


LA COLUMNA DE PLIEGUE

Cada ventana tiene una columna en la izquierda que tiene un fondo ligeramente
diferente.  En la figura de arriba se indican con "VV".  Fíjate que hay un
carácter "+" en ese sitio, enfrente de cada pliegue cerrado.  Mueve el puntero
del ratón a ese signo "+" y haz click on el botón izquierdo.  Esto abrirá el
pliegue, mostrando el texto que contiene.
   La columna del pliegue muestra un "-" para un pliegue abierto.  Si haces
click en este "-", el pliegue se cerrará.
   Obviamente, esto sólo funciona cuando tienes un ratón configurado.  También
puedes usar "zo" para abrir un pliegue y "zc" para cerrarlo.


DIFF DENTRO DE VIM

Otra manera de iniciar el modo diff es hacerlo desde Vim.  Edita el archivo
"main.c", después haz un split y muestra las diferencias: >

	:edit main.c
	:vertical diffsplit main.c~ 

El comando ":vertical" se usa para hacer que las ventanas se dividan
verticalmente.  Si omites esto, obtendrás una división horizontal.

Si tienes un parche o un archivo diff, puedes usarlo como una tercera manera
de iniciar el modo diff.  Primero edita el archivo sobre el cuál el parche es
aplicado.  Entonces escribe el siguiente comando: >

	:edit main.c
	:vertical diffpatch main.c.diff

ATENCIÓN: El parche debe contener un solo parche, el del archivo que estás
editando.  En caso contrario recibirás un montón de mensajes de error y
algunos archivos pueden verse parcheados de forma imprevista.
   El parcheo será realizado sólo sobre una copia del archivo en Vim.  El
archivo del disco duro no será modificado hasta que no lo guardes.


VINCULACIÓN DEL DESPLAZAMIENTO

Cuando los archivos tienen muchos cambios, puedes desplazarte de forma normal.
Vim intentará hacer que ambas ventanas comiencen con el mismo desplazamiento,
para que puedas ver las diferencias en cada lado.
   Cuando no quieras que esto ocurra, usa lo siguiente: >

	:set noscrollbind


IR A LOS CAMBIOS

Cuando hayas desactivado los pliegues de algún modo, puede ser más difícil
encontrar los cambios.  Usa este comando para saltar al siguiente cambio: >

	]c

Para ir en la otra dirección usa: >

	[c

Teclea antes un número multiplicador para saltar más lejos.


ELIMINANDO CAMBIOS

Puedes mover texto de una ventana a otra.  Esto elimina diferencias o añade
unas nuevas.  Vim no mantiene el texto coloreado en todas las situaciones.
Para actualizarlo deberás escribir: >

	:diffupdate

Para eliminar una diferencia, puedes mover el texto de un bloque resaltado
desde una ventana a otra.  Coge el "main.c" y el "main.c~" del ejemplo.  Mueve
el cursor a la izquierda de la ventana, sobre la línea que fue eliminada en la
otra ventana.  Ahora escribe este comando: >

	dp

El cambio será eliminado poniendo el texto de la ventana actual en la otra
ventana.  "dp" viene de "diff put" (put = poner).
   Puedes hacerlo también de la forma completamente opuesta.  Mueve el cursor
a la ventana de la derecha, donde el cambio fue insertado.  Escribe: >

	do

El cambio será ahora eliminado obteniendo el texto desde la otra ventana.  Ya
que no hay cambios restantes, Vim pondrá todo el texto en un pliegue cerrado.
"do" viene de "diff obtain" (obtain = obtener).  "dg" podría ser mejor (de g =
get = obtener) pero "dgg" ya tenía un significado diferente.

Para más detalles sobre el modo diff, ver |vimdiff|.

==============================================================================
*08.8*  Varios

La opción 'laststatus' puede ser empleada para especificar cuándo la última
ventana tiene una línea de estado:

	0	nunca
	1	sólo cuando hay más ventanas (por defecto)
	2	siempre

Muchos comandos que editan otro archivo disponen de una variante que divide la
ventana.  Para los de la línea de comandos se hace con el prefijo "s".  Por
ejemplo ":tag" salta a una etiqueta, ":stag" parte la ventana y salta a la
etiqueta.
   Para comandos del modo normal se teclea CTRL-W antes.  CTRL-^ salta al
archivo alterno, CTRL-W CTRL-^ parte la ventana y edita el archivo alterno.

La opción 'splitbelow' puede ser activada para hacer que la nueva ventana
aparezca debajo de la actual.  La opción 'splitright' puede ser activada para
hacer que una partición vertical aparezca a la derecha de la ventana actual.

Cuando dividas una ventana puedes poner un prefijo modificador que diga dónde
debe aparecer la ventana: 

	:leftabove {cmd}	izquierda o encima de la actual
	:aboveleft {cmd}	idem
	:rightbelow {cmd}	derecha o debajo de la actual
	:belowright {cmd}	idem
	:topleft {cmd}		encima o a la izquierda de la ventana de Vim
	:botright {cmd}		debajo o a la derecha de la ventana de Vim


==============================================================================
*08.9*  Pestañas

Habrás notado que las ventanas no se superponen.  esto significa que puedes
acabar rápidamente sin espacio suficiente.  La solución son las pestañas:

Imagina que estás editando "estearchivo".  Para crear una nueva pestaña: >

	:tabedit "aquélarchivo"

Esto editará el archivo "aquélarchivo" en una ventana que ocupe todo el
espacio de Vim.  Verás que hay una nueva barra en la parte superior:

	+----------------------------------+
	| estearcivo | /aquélarchivo/ ____X|   (aquélarchivo está en negrita)
	|/* aquélarchivo */		   |
	|aquél				   |
	|aquél				   |
	|~				   |
	|~				   |
	|~				   |
	|				   |
	+----------------------------------+

Ahora tienes dos pestañas.  La primera tiene tiene una ventana para
"estearchivo" y la segunda para "aquélarchivo".  Es como dos páginas una
encima de la otra, con una pestaña sobresaliendo de cada página.

Ahora usa el ratón para hacer click en "estearchivo" sobre la línea superior.

	+----------------------------------+
	| /estearchivo/ | aquélarchivo ___X|   (estearchivo está en negrita)
	|/* estearchivo */		   |
	|este				   |
	|este				   |
	|~				   |
	|~				   |
	|~				   |
	|				   |
	+----------------------------------+

Puedes cambiar de este modo entre pestañas haciendo click en la etiqueta de la
línea superior.  Si no dispones del ratón o no lo quieres usar, puedes emplear
el comando "gt".  Nemotecnia: Goto Tab (ir a pestaña).

A continuación creemos otra pestaña con el comando: >

	:tab split

Esto hace que una nueva página con el mismo búfer que teníamos abierto se
muestre:

	+----------------------------------------------+
	| estearchivo | /estearchivo/ | aquélarchivo _X| (estearchivo está
	|/* estearchivo */			       |  en negrita)
	|este					       |
	|este					       |
	|~					       |
	|~					       |
	|~					       |
	|					       |
	+----------------------------------------------+

Puedes poner ":tab" antes de cualquier comando Ex que abra una ventana.  La
ventana se abrirá en una nueva ventana.  Otro ejemplo: >

	:tab help gt

Esto mostrará el texto de ayuda para "gt" en una ventana nueva.

Un par de cosas más que puedes hacer con las pestañas:

- click con el ratón en el espacio después de la última pestaña.
	La próxima pestaña será seleccionada, igual que si escribieses "qt".

- click con el ratón sobre la "X" en la esquina superior derecha.  La
	La pestaña actual se cerrará a menos que haya cambios sin guardar en la
	pestaña.

- doble click con el ratón sobre la línea superior
	Se creará una nueva ventana.

- el comando "tabonly"
	Cierra todas las pestañas excepto la actual (a menos que haya cambios
	sin guardar en las otras pestañas).

Para más información sobre pestañas ver |tab-page|.

==============================================================================

Capítulo siguiente: |usr_09.txt|  Uso de la GUI

Copyright: ver |manual-copyright|  vim:tw=78:ts=8:ft=help:norl:
