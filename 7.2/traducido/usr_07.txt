*usr_07.txt*	For Vim version 7.2.  último cambio: 2006 Abr 24

		     VIM USER MANUAL - por Bram Moolenaar

			  Editar más de un archivo


No importa cuántos archivos tengas, puedes editarlos todos sin salir de Vim.
Define una lista de archivos de trabajo y salta de uno a otro.  Copia texto de
un archivo a otro.

|07.1|	Edita otro archivo
|07.2|	Una lista de archivos
|07.3|	Saltar de archivo a archivo
|07.4|	Copias de seguridad
|07.5|	Copiar texto entre archivos
|07.6|	Ver un archivo
|07.7|	Cambiar el nombre de archivo

 Capítulo siguiente: |usr_08.txt|  Dividir en ventanas
  Capítulo anterior: |usr_06.txt|  Uso del coloreado de sintaxis
         Contenidos: |usr_toc.txt|

==============================================================================
*07.1*	Editar otro archivo

Hasta ahora has tenido que iniciar Vim para cada archivo que querías editar.
Hay una manera más sencilla:  Para editar otro archivo, escribe: >

	:edit foo.txt

Puedes usar cualquier nombre de archivo en lugar de "foo.txt".  Vim cerrará el
archivo actual y abrirá uno nuevo.  Si el archivo actual tiene cambios no
guardados, sin embargo, Vim mostrará un error y no abrirá el archivo nuevo:

	E37: No write since last change (use ! to override) ~

	Note:
	Vim coloca una ID de error al comienzo de cada mensaje de error.  Si
	no entiendes el mensaje o su causa, puedes buscar ayuda para esta ID.
	En este caso: >

		:help E37

En este punto, tienes una serie de alternativas.  Puedes escribir el archivo
usando este comando: >

	:write

O puedes forzar que Vim descarte tus cambios y edite un archivo nuevo usando
el carácter "!": >

	:edit! foo.txt

Si quieres editar otro archivo, pero no escribir los cambios en el archivo
actual todavía, puedes hacer que se oculte: >

	:hide edit foo.txt

El texto con los cambios está todavía aquí, pero no lo puedes ver.  Esto se
explica con más detalle en la sección |22.4|: La lista de búfers.

==============================================================================
*07.2*	Una lista de archivos

Puedes comenzar Vim para editar una secuencia de archivos.  Por ejemplo: >

	vim uno.c dos.c tres.c

Este comando comienza Vim y le dice que vas a editar tres archivos.  Vim
muestra solamente el primero.  Tras haber terminado con el primero, puedes
editar el siguiente con este comando: >

	:next

Si tienes cambios sin guardar en el archivo actual, obtendrás un mensaje de
error y ":next" no funcionará.  Este es el mismo problema con el mencionado
con ":edit" en la sección anterior.  Para abandonar los cambios: >

	:next!

Pero habitualmente querrás guardar los cambios e ir al siguiente archivo.  Hay
un comando especial para esto: >

	:wnext

Esto hace lo mismo que usar los siguientes comandos: >

	:write
	:next


¿DÓNDE ESTOY?

Para ver qué archivo de la lista de argumentos estás editando, mira en el
título de la ventana.  Debería mostrar algo como "(2 de 3)".  Esto significa
que estás editando un segundo archivo de una lista de tres.
   Si quieres ver la lista de archivos, usa este comando: >

	:args

Esta es la abreviatura de "argumentos".  La salida será algo así:

	uno.c [dos.c] tres.c ~

Estos son los archivos con los que has ejecutado Vim.  El que estás editando
actualmente "dos.c", se encuentra entre corchetes.


DESPLAZARSE A OTROS ARGUMENTOS

Para ir hacia atrás un archivo: >

	:previous

Esto es justo como el comando ":next", excepto que va en la otra dirección.
Una vez más, existe un comando para cuando quieres escribir el archivo
primero: >

	:wprevious

Para saltar al último archivo de la lista: >

	:last

Para volver al primero de nuevo: >

	:first

No hay un comando ":wlast" ni ":wfirst".

Puedes usar un multiplicador para ":next" y ":previous".  Dos archivos:
>
	:2next


GUARDAR AUTOMÁTICAMENTE

Cuando te muevas por los archivos y hagas cambios, tienes que recordar usar
":write".  En caso contrario, obtendrás mensajes de error.  Si estás seguro de
que siempre vas a escribir los archivos modificados, puedes decirle a Vim que
los escriba automáticamente: >

	:set autowrite

Cuando edites un archivo que no quieres escribir automáticamente, desactívalo
de nuevo: >

	:set noautowrite


EDITAR OTRA LISTA DE ARCHIVOS

Puedes redefinir la lista de archivos son la necesidad de salir de Vim y
arrancarlo de nuevo.  Emplea este comando para editar otros tres archivos: >

	:args cinco.c seis.c siete.h

O usa comodines, del mismo modo que se hace en la shell: >

	:args *.txt

Vim te llevará al primer archivo en la lista.  De nuevo, si el archivo actual
cambia, puedes tanto guardar el archivo antes como usar ":args!" (con el !
añadido) para abandonar los cambios.


¿HAS EDITADO EL HASTA EL ÚLTIMO ARCHIVO?
							*arglist-quit*
Cuando usas una lista de archivos, Vim asume que quieres editarlos todos.
Para evitar que salgas antes de tiempo, obtendrás un error cuando no hayas
editado el último archivo en la lista e intentes salir.

	E173: 46 more files to edit ~

Si realmente quieres salir, simplemente inténtalo de nuevo.  Entonces
funcionará (pero no si ejecutas otros comandos enmedio).

==============================================================================
*07.3*	Saltar de un archivo a otro

Para saltar rápidamente entre dos archivos, pulsa CTRL-^ (en teclados
Inglés-EEUU el ^ se encuentra encima de la tecla 6).  Por ejemplo: >

	:args uno.c dos.c tres.c

Ahora estás en uno.c >

	:next

Ahora estás en two.c.  Usa CTRL-^ para volver a uno.c.  Usa CTRL-^ otra vez y
estarás de vuelta en dos.c.  Otro CTRL-^ y estarás en uno.c de nuevo.  Si
haces: >

	:next

Estás en tres.c.  Observa que el comando CTRL-^ no cambia la idea de dónde
estás en la lista de archivos.  Sólo comandos como ":next" y ":previous" lo
hacen.

El archivo que hayas estado editando anteriormente se llama el archivo
"alterno".  Hasta que no haya un archivo anterior, CTRL-^ no funcionará.


MARCAS PREDEFINIDAS

Tras saltar a otro archivo, puedes usar dos marcas predefinidas que son de
gran utilidad: >

	`"

Esto te lleva a la posición en la que estaba el cursor cuando saliste del
archivo.  Otra marca que es recordada es la posición donde hiciste el último
cambio: >

	`.

Supón que estás editando el archivo "uno".  En algún lugar a mitad de camino
en el archivo usa "x" para eliminar un carácter.  Ahora ve a la última línea
con "G" y escribe el archivo con ":w".  Edita otros archivos y usa ":edit
uno.txt" para volver a "uno.txt".  Si ahora usas `" Vim saltará a la última
línea del archivo.  Usar `. te llevará a la posición donde eliminaste el
carácter.  Incluso cuando te muevas por el archivo `" y `. te llevará a la
posición recordada. Al menos hasta que realices otro cambio o salgas del
archivo.


MARCAS DE ARCHIVO

En el capítulo 4 explicamos cómo puedes poner un marcador en el archivo con
"mx" y saltar a esa posición con "`x".  Esto funciona en un archivo.  Si editas
otro archivo y colocas un marcador ahí, esta será específica para ese archivo.
Así cada archivo tiene su propio conjunto de marcadores locales.
   Hasta ahora estábamos empleando marcadores con una letra en minúscula.
También hay marcadores con letras mayúsculas.  Éstos son globales, pudiendo
ser empleados desde cualquier archivo.  Por ejemplo, supón que editamos
"foo.txt", ve a cualquier punto y coloca el marcador F ahí: >

	50%mF

Ahora edita el archivo "bar.txt" y coloca el marcador B en su última línea:
>
	GmB

Ahora puedes usar el comando "'F" para saltar al punto marcado de foo.txt.  O
edita otro archivo, escribe "'B" y estarás en el final de bar.txt de nuevo.

Estas marcas de archivo serán recordadas hasta que sean colocadas en algún
otro lugar.  Así podrás colocar los marcadores, trabajar durante horas y aún
tendrás la posibilidad de volver al punto marcado.
   Es útil pensar en una conexión sencilla entre la letra del marcador y el
lugar donde es colocada.  Por ejemplo, usa la letra H para un archivo de
cabecera (*.h), M para un Makefile y C para código C.

Para ver dónde está un marcador específico, escribe ":marks" con un argumento:
>
	:marks M

También puedes darle varios argumentos: >

	:marks MCP

No olvides que puedes usar CTRL-O y CTRL-I para saltar a posiciones anteriores
y posteriores sin necesidad de poner marcadores en esos puntos.

==============================================================================
*07.4*	Copias de seguridad

Habitualmente Vim no produce copias de seguridad.  Si quieres que lo haga,lo
único que tienes que hacer es ejecutar el siguiente comando: >

	:set backup

El nombre del archivo de seguridad es el original con un ~ añadido al final.
Si tu archivo se llama datos.txt, por ejemplo, el archivo de seguridad será
datos.txt~.
   Si no te gusta el hecho de que las copias de seguridad terminen con ~,
puedes cambiar la extensión: >

	:set backupext=.bak

Esto hará que Vim use datos.txt.bak en lugar de datos.txt~.
   Otra opción que resulta importante aquí es 'backupdir'.  Especifica dónde
será escrito el archivo de seguridad.  La opción por defecto, escribir la
copia de seguridad en el mismo directorio, es habitualmente la mejor.

	Note:
	Cuando la opción 'backup' no está activada pero 'writebackup' lo está,
	Vim igualmente creará la copia de seguridad.  Sin embargo, será
	eliminada tan pronto como se escriba el archivo con éxito.  Esto
	funciona como seguridad ante la pérdida de tu archivo original cuando
	la escritura falla por algún motivo (el disco lleno es el más habitual,
	un rayo puede ser otra causa aunque menos común).


MANTENER EL ARCHIVO ORIGINAL

Si estás editando archivos fuente, quizá quieras mantener el archivo antes de
hacer ningún cambio.  Pero la copia de seguridad será sobreescrita cada vez que
escribas el archivo.  Así sólo contendrá la versión previa y no la original.
   Para hacer que Vim mantenga el archivo original, activa la opción
'patchmode'. Esto especifica la extensión usada para la primera copia de
seguridad de un archivo modificado.  Habitualmente harás esto: >

	:set patchmode=.orig

Cuando edites el archivo datos.txt por primera vez, hagas cambios y escribas el
archivo, Vim mantendrá una copia del archivo sin cambios bajo el nombre
"datos.txt.orig".
   Si haces más cambios, Vim notará que "datos.txt.orig" ya existe y lo dejará
en paz.  El resto de copias de seguridad se llamarán "datos.txt~" (o lo que
hayas especificado con 'backupext').
   Si dejas 'patchmode' vacío (la opción por defecto), el archivo original no
será mantenido.

==============================================================================
*07.5*	Copiar texto entre archivos

A continuación explicamos cómo copiar texto desde un archivo a otro.  Vamos a
comenzar con un simple ejemplo.  Edita el archivo que contiene el texto que
quieres copiar. Mueve el cursor al comienzo de lo que quieres editar y pulsa
"v".  Ahora mueve el cursor al final del texto y pulsa "y".  Esto copia (yank)
el texto seleccionado.
   Para copiar el texto del párrafo anterior, harías lo siguiente: >

	:edit estearchivo
	/Este
	vjjjj$y

Ahora edita el archivo donde quieres poner el texto.  Mueve el cursor al
carácter donde quieres que el texto sea colocado a continuación.  Usa "p" para
poner el texto allí. >
	:edit otroarchivo
	/Allí
	p

Naturalmente podrás usar cualquier otro comando de copia.  Por ejemplo, para
seleccionar líneas completas comienza el modo Visual con "V".  O pulsa CTRL-V
para seleccionar bloques rectangulares.  Puedes usar "Y" para simplemente
copiar una línea, "yaw" para pegar una palabra (yank-a-word).
   El comando "p" pone el texto después del cursor.  Usa "P" para ponerlo
antes del cursor.  Repara en el hecho de que Vim recuerda si has copiado una
línea completa o un bloque y lo pondrá del mismo modo.


USAR REGISTROS

Cuando quieras copiar diversas porciones de un texto de un archivo a otro,
tener que cambiar entre los archivos y guardarlos lleva mucho tiempo.  Para
evitar esto, copia cada porción en un registro independiente.
   Un registro es un lugar donde Vim guarda texto.  Aquí usaremos los
registros nombrados desde la "a" a la "z" (más tarde te percatarás de que hay
otros).  Vamos a copiar una frase en el registro f: >

	"fyas

El comando "yas" copia una frase.  Es el "f que le dice a Vim que el texto
debe situarse en el registro f.  Esto debe aparecer justo antes del comando
copiar.
   Ahora copia tres líneas completas en el registro l: >

	"l3Y

El multiplicador puede situarse antes del "l también.  Para copiar un bloque de
texto al registro b: >

	CTRL-Vjjww"by

Fíjate en que la especificación del registro "b se encuentra justo antes del
comando "y".  Esto se imprescindible.  Si lo hubieras puesto antes del comando
"w", no habría funcionado.
   Ahora tienes tres porciones de texto en los registros f, l, y b.  Edita
otro archivo, desplázate por el texto y allá donde quieras: >

	"fp

Una vez más, la especificación del registro "f viene antes del comando "p".
   Puedes poner los registros en cualquier orden, y el texto se mantendrá en
cualquier orden hasta que copies algo dentro de él.  Así podrás ponerlo tantas
veces como quieras.

Cuando elimines texto, también puedes especificar un registro.  Usa esto para
mover varias porciones de texto de un lado para otro.  Por ejemplo, para
eliminar una palabra y ponerla en el registro w (delete-a-word): >

	"wdaw

Una vez más, la especificación del registro viene antes del comando eliminar.


AÑADIR A UN ARCHIVO

Cuando quieras recoger una serie de líneas en un archivo, puedes usar esto: >

	:write >> log

Esto escribirá el texto del archivo actual al final de "archivo_log",
añadiéndose a éste.  Evita que tengas que copiar las líneas, editar el archivo
de bitácora (log) y ponerlas allí, ahorrándote dos pasos.  Sin embargo, sólo
podrás añadirlo al final del archivo.
   Para añadir sólo unas líneas, selecciónalas en el modo Visual antes de
escribir ":write".  El cap. 10 explicará otras maneras de seleccionar rangos.

==============================================================================
*07.6*	Ver un archivo

A veces sólo quieres ver qué contiene un archivo, sin la intención de guardar
ningún cambio.  Existe el riesgo de que escribas ":w" sin pensar y
sobreescribas el archivo original.  Para evitar esto, edita el archivo como
sólo lectura.  Para ejecutar Vim en modo sólo lectura, usa lo siguiente: >

	vim -R archivo

En Unix este comando deberá funcionar igualmente: >

	view archivo

Ahora estás editando "archivo" en modo sólo lectura.  Cuando pruebes a usar
":w" te darás cuenta de que aparecerá un mensaje de error y no será escrito.
   Cuando intentes hacer un cambio al archivo, Vim te advertirá: 

	W10: Warning: Changing a readonly file ~

El cambio se realizará igualmente.  Esto permite formatear el archivo, por
ejemplo, para facilitar su lectura.
   Si intentas hacer cambios a un archivo y olvidas que era de sólo lectura,
aún podrás guardarlo.  Añade ! al comando guardar para forzar la escritura.

Si realmente quieres prohibir los cambios en un archivo, haz lo siguiente: >

	vim -M file

Ahora cualquier intento de cambiar el texto fallará.  Los archivos de ayuda
son así, por ejemplo.  Si intentas cambiar algo, obtendrás el siguiente error:

	E21: Cannot make changes, 'modifiable' is off ~

Puedes usar el argumento -M para configurar Vim para que trabaje en modo
visor.  Esto es alterable, ya que estos comandos eliminan la protección. >

	:set modifiable
	:set write

==============================================================================
*07.7*	Cambiar el nombre de un archivo

Una forma inteligente de comenzar la edición de un archivo nuevo es usar un
archivo similar de partida que contenga algo parecido.  Por ejemplo, empiezas
a escribir un programa para filtrar archivos.  Sabes que ya tienes un código
que copia archivos, así que podrías comenzar con él: >

	:edit copiar.c

Puedes eliminar lo que no necesitas.  A continuación tendrás que guardar el
archivo bajo un nombre distinto.  El comando ":saveas" es adecuado para esto:
>
	:saveas filtrar.c

Vim escribirá el archivo con el nuevo nombre y editará el nuevo archivo.
Así la próxima vez que hagas ":write", escribirá "filtrar.c".  "copiar.c" se
mantiene sin modificaciones.
   Cuando quieres cambiar el nombre del archivo que estás editando pero no
quieras escribirlo, puedes usar el siguiente comando: >

	:file move.c

Vim marcará el archivo como "no editado".  Esto significa que Vim sabe que
este no es el archivo que comenzaste a editar.  Cuando intentes guardar el
archivo, puede que veas el siguiente mensaje:

	E13: File exists (use ! to override) ~

Esto evita que sobreescribas otro archivo con el mismo nombre.

==============================================================================

Capítulo siguiente: |usr_08.txt|  Dividir en ventanas

Copyright: ver |manual-copyright|  vim:tw=78:ts=8:ft=help:norl:
