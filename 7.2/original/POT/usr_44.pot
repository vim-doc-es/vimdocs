#. extracted from usr_44.txt
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2009-08-04 13:42+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Translate Toolkit 1.3.0\n"

#: usr_44.txt:1
msgid "*usr_44.txt*\tFor Vim version 7.2.  Last change: 2006 Apr 24"
msgstr ""

#: usr_44.txt:3
msgid "\t\t     VIM USER MANUAL - by Bram Moolenaar"
msgstr ""

#: usr_44.txt:5
msgid "\t\t\t Your own syntax highlighted"
msgstr ""

#: usr_44.txt:8
msgid ""
"Vim comes with highlighting for a couple of hundred different file types.  "
"If\n"
"the file you are editing isn't included, read this chapter to find out how "
"to\n"
"get this type of file highlighted.  Also see |:syn-define| in the reference\n"
"manual."
msgstr ""

#: usr_44.txt:13
msgid ""
"|44.1|\tBasic syntax commands\n"
"|44.2|\tKeywords\n"
"|44.3|\tMatches\n"
"|44.4|\tRegions\n"
"|44.5|\tNested items\n"
"|44.6|\tFollowing groups\n"
"|44.7|\tOther arguments\n"
"|44.8|\tClusters\n"
"|44.9|\tIncluding another syntax file\n"
"|44.10|\tSynchronizing\n"
"|44.11|\tInstalling a syntax file\n"
"|44.12|\tPortable syntax file layout"
msgstr ""

#: usr_44.txt:26
msgid ""
"     Next chapter: |usr_45.txt|  Select your language\n"
" Previous chapter: |usr_43.txt|  Using filetypes\n"
"Table of contents: |usr_toc.txt|"
msgstr ""

#: usr_44.txt:30
msgid ""
"============================================================================"
"==\n"
"*44.1*\tBasic syntax commands"
msgstr ""

#: usr_44.txt:33
msgid ""
"Using an existing syntax file to start with will save you a lot of time.  "
"Try\n"
"finding a syntax file in $VIMRUNTIME/syntax for a language that is similar.\n"
"These files will also show you the normal layout of a syntax file.  To\n"
"understand it, you need to read the following."
msgstr ""

#: usr_44.txt:38
msgid ""
"Let's start with the basic arguments.  Before we start defining any new\n"
"syntax, we need to clear out any old definitions: >"
msgstr ""

#: usr_44.txt:41
msgid "\t:syntax clear"
msgstr ""

#: usr_44.txt:43
msgid ""
"This isn't required in the final syntax file, but very useful when\n"
"experimenting."
msgstr ""

#: usr_44.txt:46
msgid ""
"There are more simplifications in this chapter.  If you are writing a syntax\n"
"file to be used by others, read all the way through the end to find out the\n"
"details."
msgstr ""

#: usr_44.txt:51
msgid "LISTING DEFINED ITEMS"
msgstr ""

#: usr_44.txt:53
msgid "To check which syntax items are currently defined, use this command: >"
msgstr ""

#: usr_44.txt:55
msgid "\t:syntax"
msgstr ""

#: usr_44.txt:57
msgid ""
"You can use this to check which items have actually been defined.  Quite\n"
"useful when you are experimenting with a new syntax file.  It also shows the\n"
"colors used for each item, which helps to find out what is what.\n"
"   To list the items in a specific syntax group use: >"
msgstr ""

#: usr_44.txt:62
msgid "\t:syntax list {group-name}"
msgstr ""

#: usr_44.txt:64
msgid ""
"This also can be used to list clusters (explained in |44.8|).  Just include\n"
"the @ in the name."
msgstr ""

#: usr_44.txt:68
msgid "MATCHING CASE"
msgstr ""

#: usr_44.txt:70
msgid ""
"Some languages are not case sensitive, such as Pascal.  Others, such as C, "
"are\n"
"case sensitive.  You need to tell which type you have with the following\n"
"commands: >\n"
"\t:syntax case match\n"
"\t:syntax case ignore"
msgstr ""

#: usr_44.txt:76
msgid ""
"The \"match\" argument means that Vim will match the case of syntax elements.\n"
"Therefore, \"int\" differs from \"Int\" and \"INT\".  If the \"ignore\" argument is\n"
"used, the following are equivalent: \"Procedure\", \"PROCEDURE\" and "
"\"procedure\".\n"
"   The \":syntax case\" commands can appear anywhere in a syntax file and "
"affect\n"
"the syntax definitions that follow.  In most cases, you have only one "
"\":syntax\n"
"case\" command in your syntax file; if you work with an unusual language that\n"
"contains both case-sensitive and non-case-sensitive elements, however, you "
"can\n"
"scatter the \":syntax case\" command throughout the file."
msgstr ""

#: usr_44.txt:85
msgid ""
"============================================================================"
"==\n"
"*44.2*\tKeywords"
msgstr ""

#: usr_44.txt:88
msgid ""
"The most basic syntax elements are keywords.  To define a keyword, use the\n"
"following form: >"
msgstr ""

#: usr_44.txt:91
msgid "\t:syntax keyword {group} {keyword} ..."
msgstr ""

#: usr_44.txt:93
msgid ""
"The {group} is the name of a syntax group.  With the \":highlight\" command "
"you\n"
"can assign colors to a {group}.  The {keyword} argument is an actual "
"keyword.\n"
"Here are a few examples: >"
msgstr ""

#: usr_44.txt:97
msgid ""
"\t:syntax keyword xType int long char\n"
"\t:syntax keyword xStatement if then else endif"
msgstr ""

#: usr_44.txt:100
msgid ""
"This example uses the group names \"xType\" and \"xStatement\".  By convention,\n"
"each group name is prefixed by the filetype for the language being defined.\n"
"This example defines syntax for the x language (eXample language without an\n"
"interesting name).  In a syntax file for \"csh\" scripts the name \"cshType\"\n"
"would be used.  Thus the prefix is equal to the value of 'filetype'.\n"
"   These commands cause the words \"int\", \"long\" and \"char\" to be highlighted\n"
"one way and the words \"if\", \"then\", \"else\" and \"endif\" to be highlighted\n"
"another way.  Now you need to connect the x group names to standard Vim\n"
"names.  You do this with the following commands: >"
msgstr ""

#: usr_44.txt:110
msgid ""
"\t:highlight link xType Type\n"
"\t:highlight link xStatement Statement"
msgstr ""

#: usr_44.txt:113
msgid ""
"This tells Vim to highlight \"xType\" like \"Type\" and \"xStatement\" like\n"
"\"Statement\".  See |group-name| for the standard names."
msgstr ""

#: usr_44.txt:117
msgid "UNUSUAL KEYWORDS"
msgstr ""

#: usr_44.txt:119
msgid ""
"The characters used in a keyword must be in the 'iskeyword' option.  If you\n"
"use another character, the word will never match.  Vim doesn't give a "
"warning\n"
"message for this.\n"
"   The x language uses the '-' character in keywords.  This is how it's "
"done:\n"
">\n"
"\t:setlocal iskeyword+=-\n"
"\t:syntax keyword xStatement when-not"
msgstr ""

#: usr_44.txt:127
msgid ""
"The \":setlocal\" command is used to change 'iskeyword' only for the current\n"
"buffer.  Still it does change the behavior of commands like \"w\" and \"*\".  If\n"
"that is not wanted, don't define a keyword but use a match (explained in the\n"
"next section)."
msgstr ""

#: usr_44.txt:132
msgid ""
"The x language allows for abbreviations.  For example, \"next\" can be\n"
"abbreviated to \"n\", \"ne\" or \"nex\".  You can define them by using this "
"command:\n"
">\n"
"\t:syntax keyword xStatement n[ext]"
msgstr ""

#: usr_44.txt:137
msgid "This doesn't match \"nextone\", keywords always match whole words only."
msgstr ""

#: usr_44.txt:139
msgid ""
"============================================================================"
"==\n"
"*44.3*\tMatches"
msgstr ""

#: usr_44.txt:142
msgid ""
"Consider defining something a bit more complex.  You want to match ordinary\n"
"identifiers.  To do this, you define a match syntax item.  This one matches\n"
"any word consisting of only lowercase letters: >"
msgstr ""

#: usr_44.txt:146
msgid ""
"\t:syntax match xIdentifier /\\<\\l\\+\\>/\n"
"<\n"
"\tNote:\n"
"\tKeywords overrule any other syntax item.  Thus the keywords \"if\",\n"
"\t\"then\", etc., will be keywords, as defined with the \":syntax keyword\"\n"
"\tcommands above, even though they also match the pattern for\n"
"\txIdentifier."
msgstr ""

#: usr_44.txt:154
msgid ""
"The part at the end is a pattern, like it's used for searching.  The // is\n"
"used to surround the pattern (like how it's done in a \":substitute\" "
"command).\n"
"You can use any other character, like a plus or a quote."
msgstr ""

#: usr_44.txt:158
msgid ""
"Now define a match for a comment.  In the x language it is anything from # "
"to\n"
"the end of a line: >"
msgstr ""

#: usr_44.txt:161
msgid "\t:syntax match xComment /#.*/"
msgstr ""

#: usr_44.txt:163
msgid ""
"Since you can use any search pattern, you can highlight very complex things\n"
"with a match item.  See |pattern| for help on search patterns."
msgstr ""

#: usr_44.txt:166
msgid ""
"============================================================================"
"==\n"
"*44.4*\tRegions"
msgstr ""

#: usr_44.txt:169
msgid ""
"In the example x language, strings are enclosed in double quotation marks "
"(\").\n"
"To highlight strings you define a region.  You need a region start (double\n"
"quote) and a region end (double quote).  The definition is as follows: >"
msgstr ""

#: usr_44.txt:173
msgid "\t:syntax region xString start=/\"/ end=/\"/"
msgstr ""

#: usr_44.txt:175
msgid ""
"The \"start\" and \"end\" directives define the patterns used to find the start\n"
"and end of the region.  But what about strings that look like this?"
msgstr ""

#: usr_44.txt:178
msgid "\t\"A string with a double quote (\\\") in it\" ~"
msgstr ""

#: usr_44.txt:180
msgid ""
"This creates a problem: The double quotation marks in the middle of the "
"string\n"
"will end the region.  You need to tell Vim to skip over any escaped double\n"
"quotes in the string.  Do this with the skip keyword: >"
msgstr ""

#: usr_44.txt:184
msgid "\t:syntax region xString start=/\"/ skip=/\\\\\"/ end=/\"/"
msgstr ""

#: usr_44.txt:186
msgid ""
"The double backslash matches a single backslash, since the backslash is a\n"
"special character in search patterns."
msgstr ""

#: usr_44.txt:189
msgid ""
"When to use a region instead of a match?  The main difference is that a "
"match\n"
"item is a single pattern, which must match as a whole.  A region starts as\n"
"soon as the \"start\" pattern matches.  Whether the \"end\" pattern is found or\n"
"not doesn't matter.  Thus when the item depends on the \"end\" pattern to "
"match,\n"
"you cannot use a region.  Otherwise, regions are often simpler to define.  "
"And\n"
"it is easier to use nested items, as is explained in the next section."
msgstr ""

#: usr_44.txt:196
msgid ""
"============================================================================"
"==\n"
"*44.5*\tNested items"
msgstr ""

#: usr_44.txt:199
msgid "Take a look at this comment:"
msgstr ""

#: usr_44.txt:201
msgid "\t%Get input  TODO: Skip white space ~"
msgstr ""

#: usr_44.txt:203
msgid ""
"You want to highlight TODO in big yellow letters, even though it is in a\n"
"comment that is highlighted blue.  To let Vim know about this, you define "
"the\n"
"following syntax groups: >"
msgstr ""

#: usr_44.txt:207
msgid ""
"\t:syntax keyword xTodo TODO contained\n"
"\t:syntax match xComment /%.*/ contains=xTodo"
msgstr ""

#: usr_44.txt:210
msgid ""
"In the first line, the \"contained\" argument tells Vim that this keyword can\n"
"exist only inside another syntax item.  The next line has \"contains=xTodo\".\n"
"This indicates that the xTodo syntax element is inside it.  The result is "
"that\n"
"the comment line as a whole is matched with \"xComment\" and made blue.  The\n"
"word TODO inside it is matched by xTodo and highlighted yellow (highlighting\n"
"for xTodo was setup for this)."
msgstr ""

#: usr_44.txt:218
msgid "RECURSIVE NESTING"
msgstr ""

#: usr_44.txt:220
msgid ""
"The x language defines code blocks in curly braces.  And a code block may\n"
"contain other code blocks.  This can be defined this way: >"
msgstr ""

#: usr_44.txt:223
msgid "\t:syntax region xBlock start=/{/ end=/}/ contains=xBlock"
msgstr ""

#: usr_44.txt:225
msgid "Suppose you have this text:"
msgstr ""

#: usr_44.txt:227
msgid ""
"\twhile i < b { ~\n"
"\t\tif a { ~\n"
"\t\t\tb = c; ~\n"
"\t\t} ~\n"
"\t} ~"
msgstr ""

#: usr_44.txt:233
msgid ""
"First a xBlock starts at the { in the first line.  In the second line "
"another\n"
"{ is found.  Since we are inside a xBlock item, and it contains itself, a\n"
"nested xBlock item will start here.  Thus the \"b = c\" line is inside the\n"
"second level xBlock region.  Then a } is found in the next line, which "
"matches\n"
"with the end pattern of the region.  This ends the nested xBlock.  Because "
"the\n"
"} is included in the nested region, it is hidden from the first xBlock "
"region.\n"
"Then at the last } the first xBlock region ends."
msgstr ""

#: usr_44.txt:242
msgid "KEEPING THE END"
msgstr ""

#: usr_44.txt:244
msgid "Consider the following two syntax items: >"
msgstr ""

#: usr_44.txt:246
msgid ""
"\t:syntax region xComment start=/%/ end=/$/ contained\n"
"\t:syntax region xPreProc start=/#/ end=/$/ contains=xComment"
msgstr ""

#: usr_44.txt:249
msgid ""
"You define a comment as anything from % to the end of the line.  A\n"
"preprocessor directive is anything from # to the end of the line.  Because "
"you\n"
"can have a comment on a preprocessor line, the preprocessor definition\n"
"includes a \"contains=xComment\" argument.  Now look what happens with this\n"
"text:"
msgstr ""

#: usr_44.txt:255
msgid ""
"\t#define X = Y  % Comment text ~\n"
"\tint foo = 1; ~"
msgstr ""

#: usr_44.txt:258
msgid ""
"What you see is that the second line is also highlighted as xPreProc.  The\n"
"preprocessor directive should end at the end of the line.  That is why\n"
"you have used \"end=/$/\".  So what is going wrong?\n"
"   The problem is the contained comment.  The comment starts with % and ends\n"
"at the end of the line.  After the comment ends, the preprocessor syntax\n"
"continues.  This is after the end of the line has been seen, so the next\n"
"line is included as well.\n"
"   To avoid this problem and to avoid a contained syntax item eating a "
"needed\n"
"end of line, use the \"keepend\" argument.  This takes care of\n"
"the double end-of-line matching: >"
msgstr ""

#: usr_44.txt:269
msgid ""
"\t:syntax region xComment start=/%/ end=/$/ contained\n"
"\t:syntax region xPreProc start=/#/ end=/$/ contains=xComment keepend"
msgstr ""

#: usr_44.txt:273
msgid "CONTAINING MANY ITEMS"
msgstr ""

#: usr_44.txt:275
msgid ""
"You can use the contains argument to specify that everything can be "
"contained.\n"
"For example: >"
msgstr ""

#: usr_44.txt:278
msgid "\t:syntax region xList start=/\\[/ end=/\\]/ contains=ALL"
msgstr ""

#: usr_44.txt:280
msgid ""
"All syntax items will be contained in this one.  It also contains itself, "
"but\n"
"not at the same position (that would cause an endless loop).\n"
"   You can specify that some groups are not contained.  Thus contain all\n"
"groups but the ones that are listed:\n"
">\n"
"\t:syntax region xList start=/\\[/ end=/\\]/ contains=ALLBUT,xString"
msgstr ""

#: usr_44.txt:287
msgid ""
"With the \"TOP\" item you can include all items that don't have a \"contained\"\n"
"argument.  \"CONTAINED\" is used to only include items with a \"contained\"\n"
"argument.  See |:syn-contains| for the details."
msgstr ""

#: usr_44.txt:291
msgid ""
"============================================================================"
"==\n"
"*44.6*\tFollowing groups"
msgstr ""

#: usr_44.txt:294
msgid "The x language has statements in this form:"
msgstr ""

#: usr_44.txt:296
msgid "\tif (condition) then ~"
msgstr ""

#: usr_44.txt:298
msgid ""
"You want to highlight the three items differently.  But \"(condition)\" and\n"
"\"then\" might also appear in other places, where they get different\n"
"highlighting.  This is how you can do this: >"
msgstr ""

#: usr_44.txt:302
msgid ""
"\t:syntax match xIf /if/ nextgroup=xIfCondition skipwhite\n"
"\t:syntax match xIfCondition /([^)]*)/ contained nextgroup=xThen skipwhite\n"
"\t:syntax match xThen /then/ contained"
msgstr ""

#: usr_44.txt:306
msgid ""
"The \"nextgroup\" argument specifies which item can come next.  This is not\n"
"required.  If none of the items that are specified are found, nothing "
"happens.\n"
"For example, in this text:"
msgstr ""

#: usr_44.txt:310
msgid "\tif not (condition) then ~"
msgstr ""

#: usr_44.txt:312
msgid ""
"The \"if\" is matched by xIf.  \"not\" doesn't match the specified nextgroup\n"
"xIfCondition, thus only the \"if\" is highlighted."
msgstr ""

#: usr_44.txt:315
msgid ""
"The \"skipwhite\" argument tells Vim that white space (spaces and tabs) may\n"
"appear in between the items.  Similar arguments are \"skipnl\", which allows a\n"
"line break in between the items, and \"skipempty\", which allows empty lines.\n"
"Notice that \"skipnl\" doesn't skip an empty line, something must match after\n"
"the line break."
msgstr ""

#: usr_44.txt:321
msgid ""
"============================================================================"
"==\n"
"*44.7*\tOther arguments"
msgstr ""

#: usr_44.txt:324
msgid "MATCHGROUP"
msgstr ""

#: usr_44.txt:326
msgid ""
"When you define a region, the entire region is highlighted according to the\n"
"group name specified.  To highlight the text enclosed in parentheses () with\n"
"the group xInside, for example, use the following command: >"
msgstr ""

#: usr_44.txt:330
msgid "\t:syntax region xInside start=/(/ end=/)/"
msgstr ""

#: usr_44.txt:332
msgid ""
"Suppose, that you want to highlight the parentheses differently.  You can do\n"
"this with a lot of convoluted region statements, or you can use the\n"
"\"matchgroup\" argument.  This tells Vim to highlight the start and end of a\n"
"region with a different highlight group (in this case, the xParen group): >"
msgstr ""

#: usr_44.txt:337
msgid "\t:syntax region xInside matchgroup=xParen start=/(/ end=/)/"
msgstr ""

#: usr_44.txt:339
msgid ""
"The \"matchgroup\" argument applies to the start or end match that comes after\n"
"it.  In the previous example both start and end are highlighted with xParen.\n"
"To highlight the end with xParenEnd: >"
msgstr ""

#: usr_44.txt:343
msgid ""
"\t:syntax region xInside matchgroup=xParen start=/(/\n"
"\t\t\\ matchgroup=xParenEnd end=/)/"
msgstr ""

#: usr_44.txt:346
msgid ""
"A side effect of using \"matchgroup\" is that contained items will not match "
"in\n"
"the start or end of the region.  The example for \"transparent\" uses this."
msgstr ""

#: usr_44.txt:350
msgid "TRANSPARENT"
msgstr ""

#: usr_44.txt:352
msgid ""
"In a C language file you would like to highlight the () text after a \"while\"\n"
"differently from the () text after a \"for\".  In both of these there can be\n"
"nested () items, which should be highlighted in the same way.  You must make\n"
"sure the () highlighting stops at the matching ).  This is one way to do "
"this:\n"
">\n"
"\t:syntax region cWhile matchgroup=cWhile start=/while\\s*(/ end=/)/\n"
"\t\t\\ contains=cCondNest\n"
"\t:syntax region cFor matchgroup=cFor start=/for\\s*(/ end=/)/\n"
"\t\t\\ contains=cCondNest\n"
"\t:syntax region cCondNest start=/(/ end=/)/ contained transparent"
msgstr ""

#: usr_44.txt:363
msgid ""
"Now you can give cWhile and cFor different highlighting.  The cCondNest item\n"
"can appear in either of them, but take over the highlighting of the item it "
"is\n"
"contained in.  The \"transparent\" argument causes this.\n"
"   Notice that the \"matchgroup\" argument has the same group as the item\n"
"itself.  Why define it then?  Well, the side effect of using a matchgroup is\n"
"that contained items are not found in the match with the start item then.\n"
"This avoids that the cCondNest group matches the ( just after the \"while\" or\n"
"\"for\".  If this would happen, it would span the whole text until the "
"matching\n"
") and the region would continue after it.  Now cCondNest only matches after\n"
"the match with the start pattern, thus after the first (."
msgstr ""

#: usr_44.txt:375
msgid "OFFSETS"
msgstr ""

#: usr_44.txt:377
msgid ""
"Suppose you want to define a region for the text between ( and ) after an\n"
"\"if\".  But you don't want to include the \"if\" or the ( and ).  You can do "
"this\n"
"by specifying offsets for the patterns.  Example: >"
msgstr ""

#: usr_44.txt:381
msgid "\t:syntax region xCond start=/if\\s*(/ms=e+1 end=/)/me=s-1"
msgstr ""

#: usr_44.txt:383
msgid ""
"The offset for the start pattern is \"ms=e+1\".  \"ms\" stands for Match Start.\n"
"This defines an offset for the start of the match.  Normally the match "
"starts\n"
"where the pattern matches.  \"e+1\" means that the match now starts at the end\n"
"of the pattern match, and then one character further.\n"
"   The offset for the end pattern is \"me=s-1\".  \"me\" stands for Match End.\n"
"\"s-1\" means the start of the pattern match and then one character back.  The\n"
"result is that in this text:"
msgstr ""

#: usr_44.txt:391
msgid "\tif (foo == bar) ~"
msgstr ""

#: usr_44.txt:393
msgid "Only the text \"foo == bar\" will be highlighted as xCond."
msgstr ""

#: usr_44.txt:395
msgid "More about offsets here: |:syn-pattern-offset|."
msgstr ""

#: usr_44.txt:398
msgid "ONELINE"
msgstr ""

#: usr_44.txt:400
msgid ""
"The \"oneline\" argument indicates that the region does not cross a line\n"
"boundary.  For example: >"
msgstr ""

#: usr_44.txt:403
msgid "\t:syntax region xIfThen start=/if/ end=/then/ oneline"
msgstr ""

#: usr_44.txt:405
msgid ""
"This defines a region that starts at \"if\" and ends at \"then\".  But if there "
"is\n"
"no \"then\" after the \"if\", the region doesn't match."
msgstr ""

#: usr_44.txt:408
msgid ""
"\tNote:\n"
"\tWhen using \"oneline\" the region doesn't start if the end pattern\n"
"\tdoesn't match in the same line.  Without \"oneline\" Vim does _not_\n"
"\tcheck if there is a match for the end pattern.  The region starts even\n"
"\twhen the end pattern doesn't match in the rest of the file."
msgstr ""

#: usr_44.txt:415
msgid "CONTINUATION LINES AND AVOIDING THEM"
msgstr ""

#: usr_44.txt:417
msgid ""
"Things now become a little more complex.  Let's define a preprocessor line.\n"
"This starts with a # in the first column and continues until the end of the\n"
"line.  A line that ends with \\ makes the next line a continuation line.  The\n"
"way you handle this is to allow the syntax item to contain a continuation\n"
"pattern: >"
msgstr ""

#: usr_44.txt:423
msgid ""
"\t:syntax region xPreProc start=/^#/ end=/$/ contains=xLineContinue\n"
"\t:syntax match xLineContinue \"\\\\$\" contained"
msgstr ""

#: usr_44.txt:426
msgid ""
"In this case, although xPreProc normally matches a single line, the group\n"
"contained in it (namely xLineContinue) lets it go on for more than one line.\n"
"For example, it would match both of these lines:"
msgstr ""

#: usr_44.txt:430
msgid ""
"\t#define SPAM  spam spam spam \\ ~\n"
"\t\t\tbacon and spam ~"
msgstr ""

#: usr_44.txt:433
msgid ""
"In this case, this is what you want.  If it is not what you want, you can "
"call\n"
"for the region to be on a single line by adding \"excludenl\" to the contained\n"
"pattern.  For example, you want to highlight \"end\" in xPreProc, but only at\n"
"the end of the line.  To avoid making the xPreProc continue on the next "
"line,\n"
"like xLineContinue does, use \"excludenl\" like this: >"
msgstr ""

#: usr_44.txt:439
msgid ""
"\t:syntax region xPreProc start=/^#/ end=/$/\n"
"\t\t\\ contains=xLineContinue,xPreProcEnd\n"
"\t:syntax match xPreProcEnd excludenl /end$/ contained\n"
"\t:syntax match xLineContinue \"\\\\$\" contained"
msgstr ""

#: usr_44.txt:444
msgid ""
"\"excludenl\" must be placed before the pattern.  Since \"xLineContinue\" "
"doesn't\n"
"have \"excludenl\", a match with it will extend xPreProc to the next line as\n"
"before."
msgstr ""

#: usr_44.txt:448
msgid ""
"============================================================================"
"==\n"
"*44.8*\tClusters"
msgstr ""

#: usr_44.txt:451
msgid ""
"One of the things you will notice as you start to write a syntax file is "
"that\n"
"you wind up generating a lot of syntax groups.  Vim enables you to define a\n"
"collection of syntax groups called a cluster.\n"
"   Suppose you have a language that contains for loops, if statements, while\n"
"loops, and functions.  Each of them contains the same syntax elements: "
"numbers\n"
"and identifiers.  You define them like this: >"
msgstr ""

#: usr_44.txt:458
msgid ""
"\t:syntax match xFor /^for.*/ contains=xNumber,xIdent\n"
"\t:syntax match xIf /^if.*/ contains=xNumber,xIdent\n"
"\t:syntax match xWhile /^while.*/ contains=xNumber,xIdent"
msgstr ""

#: usr_44.txt:462
msgid ""
"You have to repeat the same \"contains=\" every time.  If you want to add\n"
"another contained item, you have to add it three times.  Syntax clusters\n"
"simplify these definitions by enabling you to have one cluster stand for\n"
"several syntax groups.\n"
"   To define a cluster for the two items that the three groups contain, use\n"
"the following command: >"
msgstr ""

#: usr_44.txt:469
msgid "\t:syntax cluster xState contains=xNumber,xIdent"
msgstr ""

#: usr_44.txt:471
msgid ""
"Clusters are used inside other syntax items just like any syntax group.\n"
"Their names start with @.  Thus, you can define the three groups like this: "
">"
msgstr ""

#: usr_44.txt:474
msgid ""
"\t:syntax match xFor /^for.*/ contains=@xState\n"
"\t:syntax match xIf /^if.*/ contains=@xState\n"
"\t:syntax match xWhile /^while.*/ contains=@xState"
msgstr ""

#: usr_44.txt:478
msgid "You can add new group names to this cluster with the \"add\" argument: >"
msgstr ""

#: usr_44.txt:480
msgid "\t:syntax cluster xState add=xString"
msgstr ""

#: usr_44.txt:482
msgid "You can remove syntax groups from this list as well: >"
msgstr ""

#: usr_44.txt:484
msgid "\t:syntax cluster xState remove=xNumber"
msgstr ""

#: usr_44.txt:486
msgid ""
"============================================================================"
"==\n"
"*44.9*\tIncluding another syntax file"
msgstr ""

#: usr_44.txt:489
msgid ""
"The C++ language syntax is a superset of the C language.  Because you do not\n"
"want to write two syntax files, you can have the C++ syntax file read in the\n"
"one for C by using the following command: >"
msgstr ""

#: usr_44.txt:493
msgid "\t:runtime! syntax/c.vim"
msgstr ""

#: usr_44.txt:495
msgid ""
"The \":runtime!\" command searches 'runtimepath' for all \"syntax/c.vim\" files.\n"
"This makes the C syntax be defined like for C files.  If you have replaced "
"the\n"
"c.vim syntax file, or added items with an extra file, these will be loaded "
"as\n"
"well.\n"
"   After loading the C syntax items the specific C++ items can be defined.\n"
"For example, add keywords that are not used in C: >"
msgstr ""

#: usr_44.txt:502
msgid "\t:syntax keyword cppStatement\tnew delete this friend using"
msgstr ""

#: usr_44.txt:504
msgid "This works just like in any other syntax file."
msgstr ""

#: usr_44.txt:506
msgid ""
"Now consider the Perl language.  It consists of two distinct parts: a\n"
"documentation section in POD format, and a program written in Perl itself.\n"
"The POD section starts with \"=head\" and ends with \"=cut\".\n"
"   You want to define the POD syntax in one file, and use it from the Perl\n"
"syntax file.  The \":syntax include\" command reads in a syntax file and "
"stores\n"
"the elements it defined in a syntax cluster.  For Perl, the statements are "
"as\n"
"follows: >"
msgstr ""

#: usr_44.txt:514
msgid ""
"\t:syntax include @Pod <sfile>:p:h/pod.vim\n"
"\t:syntax region perlPOD start=/^=head/ end=/^=cut/ contains=@Pod"
msgstr ""

#: usr_44.txt:517
msgid ""
"When \"=head\" is found in a Perl file, the perlPOD region starts.  In this\n"
"region the @Pod cluster is contained.  All the items defined as top-level\n"
"items in the pod.vim syntax files will match here.  When \"=cut\" is found, "
"the\n"
"region ends and we go back to the items defined in the Perl file.\n"
"   The \":syntax include\" command is clever enough to ignore a \":syntax "
"clear\"\n"
"command in the included file.  And an argument such as \"contains=ALL\" will\n"
"only contain items defined in the included file, not in the file that "
"includes\n"
"it.\n"
"   The \"<sfile>:p:h/\" part uses the name of the current file (<sfile>),\n"
"expands it to a full path (:p) and then takes the head (:h).  This results "
"in\n"
"the directory name of the file.  This causes the pod.vim file in the same\n"
"directory to be included."
msgstr ""

#: usr_44.txt:530
msgid ""
"============================================================================"
"==\n"
"*44.10*\tSynchronizing"
msgstr ""

#: usr_44.txt:533
msgid ""
"Compilers have it easy.  They start at the beginning of a file and parse it\n"
"straight through.  Vim does not have it so easy.  It must start in the "
"middle,\n"
"where the editing is being done.  So how does it tell where it is?\n"
"   The secret is the \":syntax sync\" command.  This tells Vim how to figure "
"out\n"
"where it is.  For example, the following command tells Vim to scan backward\n"
"for the beginning or end of a C-style comment and begin syntax coloring from\n"
"there: >"
msgstr ""

#: usr_44.txt:541
msgid "\t:syntax sync ccomment"
msgstr ""

#: usr_44.txt:543
msgid ""
"You can tune this processing with some arguments.  The \"minlines\" argument\n"
"tells Vim the minimum number of lines to look backward, and \"maxlines\" tells\n"
"the editor the maximum number of lines to scan.\n"
"   For example, the following command tells Vim to look at least 10 lines\n"
"before the top of the screen: >"
msgstr ""

#: usr_44.txt:549
msgid "\t:syntax sync ccomment minlines=10 maxlines=500"
msgstr ""

#: usr_44.txt:551
msgid ""
"If it cannot figure out where it is in that space, it starts looking farther\n"
"and farther back until it figures out what to do.  But it looks no farther\n"
"back than 500 lines.  (A large \"maxlines\" slows down processing.  A small "
"one\n"
"might cause synchronization to fail.)\n"
"   To make synchronizing go a bit faster, tell Vim which syntax items can be\n"
"skipped.  Every match and region that only needs to be used when actually\n"
"displaying text can be given the \"display\" argument.\n"
"   By default, the comment to be found will be colored as part of the "
"Comment\n"
"syntax group.  If you want to color things another way, you can specify a\n"
"different syntax group: >"
msgstr ""

#: usr_44.txt:562
msgid "\t:syntax sync ccomment xAltComment"
msgstr ""

#: usr_44.txt:564
msgid ""
"If your programming language does not have C-style comments in it, you can "
"try\n"
"another method of synchronization.  The simplest way is to tell Vim to space\n"
"back a number of lines and try to figure out things from there.  The "
"following\n"
"command tells Vim to go back 150 lines and start parsing from there: >"
msgstr ""

#: usr_44.txt:569
msgid "\t:syntax sync minlines=150"
msgstr ""

#: usr_44.txt:571
msgid ""
"A large \"minlines\" value can make Vim slower, especially when scrolling\n"
"backwards in the file.\n"
"   Finally, you can specify a syntax group to look for by using this "
"command:\n"
">\n"
"\t:syntax sync match {sync-group-name}\n"
"\t\t\\ grouphere {group-name} {pattern}"
msgstr ""

#: usr_44.txt:578
msgid ""
"This tells Vim that when it sees {pattern} the syntax group named {group-"
"name}\n"
"begins just after the pattern given.  The {sync-group-name} is used to give "
"a\n"
"name to this synchronization specification.  For example, the sh scripting\n"
"language begins an if statement with \"if\" and ends it with \"fi\":"
msgstr ""

#: usr_44.txt:583
msgid ""
"\tif [ --f file.txt ] ; then ~\n"
"\t\techo \"File exists\" ~\n"
"\tfi ~"
msgstr ""

#: usr_44.txt:587
msgid ""
"To define a \"grouphere\" directive for this syntax, you use the following\n"
"command: >"
msgstr ""

#: usr_44.txt:590
msgid "\t:syntax sync match shIfSync grouphere shIf \"\\<if\\>\""
msgstr ""

#: usr_44.txt:592
msgid ""
"The \"groupthere\" argument tells Vim that the pattern ends a group.  For\n"
"example, the end of the if/fi group is as follows: >"
msgstr ""

#: usr_44.txt:595
msgid "\t:syntax sync match shIfSync groupthere NONE \"\\<fi\\>\""
msgstr ""

#: usr_44.txt:597
msgid ""
"In this example, the NONE tells Vim that you are not in any special syntax\n"
"region.  In particular, you are not inside an if block."
msgstr ""

#: usr_44.txt:600
msgid ""
"You also can define matches and regions that are with no \"grouphere\" or\n"
"\"groupthere\" arguments.  These groups are for syntax groups skipped during\n"
"synchronization.  For example, the following skips over anything inside {},\n"
"even if it would normally match another synchronization method: >"
msgstr ""

#: usr_44.txt:605
msgid "\t:syntax sync match xSpecial /{.*}/"
msgstr ""

#: usr_44.txt:607
msgid "More about synchronizing in the reference manual: |:syn-sync|."
msgstr ""

#: usr_44.txt:609
msgid ""
"============================================================================"
"==\n"
"*44.11*\tInstalling a syntax file"
msgstr ""

#: usr_44.txt:612
msgid ""
"When your new syntax file is ready to be used, drop it in a \"syntax\" "
"directory\n"
"in 'runtimepath'.  For Unix that would be \"~/.vim/syntax\".\n"
"  The name of the syntax file must be equal to the file type, with \".vim\"\n"
"added.  Thus for the x language, the full path of the file would be:"
msgstr ""

#: usr_44.txt:617
msgid "\t~/.vim/syntax/x.vim ~"
msgstr ""

#: usr_44.txt:619
msgid "You must also make the file type be recognized.  See |43.2|."
msgstr ""

#: usr_44.txt:621
msgid ""
"If your file works well, you might want to make it available to other Vim\n"
"users.  First read the next section to make sure your file works well for\n"
"others.  Then e-mail it to the Vim maintainer: <maintainer@vim.org>.  Also\n"
"explain how the filetype can be detected.  With a bit of luck your file will\n"
"be included in the next Vim version!"
msgstr ""

#: usr_44.txt:628
msgid "ADDING TO AN EXISTING SYNTAX FILE"
msgstr ""

#: usr_44.txt:630
msgid ""
"We were assuming you were adding a completely new syntax file.  When an "
"existing\n"
"syntax file works, but is missing some items, you can add items in a "
"separate\n"
"file.  That avoids changing the distributed syntax file, which will be lost\n"
"when installing a new version of Vim.\n"
"   Write syntax commands in your file, possibly using group names from the\n"
"existing syntax.  For example, to add new variable types to the C syntax "
"file:\n"
">\n"
"\t:syntax keyword cType off_t uint"
msgstr ""

#: usr_44.txt:639
msgid ""
"Write the file with the same name as the original syntax file.  In this case\n"
"\"c.vim\".  Place it in a directory near the end of 'runtimepath'.  This makes\n"
"it loaded after the original syntax file.  For Unix this would be:"
msgstr ""

#: usr_44.txt:643
msgid "\t~/.vim/after/syntax/c.vim ~"
msgstr ""

#: usr_44.txt:645
msgid ""
"============================================================================"
"==\n"
"*44.12*\tPortable syntax file layout"
msgstr ""

#: usr_44.txt:648
msgid ""
"Wouldn't it be nice if all Vim users exchange syntax files?  To make this\n"
"possible, the syntax file must follow a few guidelines."
msgstr ""

#: usr_44.txt:651
msgid ""
"Start with a header that explains what the syntax file is for, who maintains\n"
"it and when it was last updated.  Don't include too much information about\n"
"changes history, not many people will read it.  Example: >"
msgstr ""

#: usr_44.txt:655
msgid ""
"\t\" Vim syntax file\n"
"\t\" Language:\tC\n"
"\t\" Maintainer:\tBram Moolenaar <Bram@vim.org>\n"
"\t\" Last Change:\t2001 Jun 18\n"
"\t\" Remark:\tIncluded by the C++ syntax."
msgstr ""

#: usr_44.txt:661
msgid ""
"Use the same layout as the other syntax files.  Using an existing syntax "
"file\n"
"as an example will save you a lot of time."
msgstr ""

#: usr_44.txt:664
msgid ""
"Choose a good, descriptive name for your syntax file.  Use lowercase letters\n"
"and digits.  Don't make it too long, it is used in many places: The name of\n"
"the syntax file \"name.vim\", 'filetype', b:current_syntax the start of each\n"
"syntax group (nameType, nameStatement, nameString, etc)."
msgstr ""

#: usr_44.txt:669
msgid ""
"Start with a check for \"b:current_syntax\".  If it is defined, some other\n"
"syntax file, earlier in 'runtimepath' was already loaded: >"
msgstr ""

#: usr_44.txt:672
msgid ""
"\tif exists(\"b:current_syntax\")\n"
"\t  finish\n"
"\tendif"
msgstr ""

#: usr_44.txt:676
msgid "To be compatible with Vim 5.8 use: >"
msgstr ""

#: usr_44.txt:678
msgid ""
"\tif version < 600\n"
"\t  syntax clear\n"
"\telseif exists(\"b:current_syntax\")\n"
"\t  finish\n"
"\tendif"
msgstr ""

#: usr_44.txt:684
msgid ""
"Set \"b:current_syntax\" to the name of the syntax at the end.  Don't forget\n"
"that included files do this too, you might have to reset \"b:current_syntax\" "
"if\n"
"you include two files."
msgstr ""

#: usr_44.txt:688
msgid ""
"If you want your syntax file to work with Vim 5.x, add a check for "
"v:version.\n"
"See yacc.vim for an example."
msgstr ""

#: usr_44.txt:691
msgid ""
"Do not include anything that is a user preference.  Don't set 'tabstop',\n"
"'expandtab', etc.  These belong in a filetype plugin."
msgstr ""

#: usr_44.txt:694
msgid ""
"Do not include mappings or abbreviations.  Only include setting 'iskeyword' "
"if\n"
"it is really necessary for recognizing keywords."
msgstr ""

#: usr_44.txt:697
msgid ""
"To allow users select their own preferred colors, make a different group "
"name\n"
"for every kind of highlighted item.  Then link each of them to one of the\n"
"standard highlight groups.  That will make it work with every color scheme.\n"
"If you select specific colors it will look bad with some color schemes.  And\n"
"don't forget that some people use a different background color, or have only\n"
"eight colors available."
msgstr ""

#: usr_44.txt:704
msgid ""
"For the linking use \"hi def link\", so that the user can select different\n"
"highlighting before your syntax file is loaded.  Example: >"
msgstr ""

#: usr_44.txt:707
msgid ""
"\t  hi def link nameString\tString\n"
"\t  hi def link nameNumber\tNumber\n"
"\t  hi def link nameCommand\tStatement\n"
"\t  ... etc ..."
msgstr ""

#: usr_44.txt:712
msgid ""
"Add the \"display\" argument to items that are not used when syncing, to speed\n"
"up scrolling backwards and CTRL-L."
msgstr ""

#: usr_44.txt:715
msgid ""
"============================================================================"
"=="
msgstr ""

#: usr_44.txt:717
msgid "Next chapter: |usr_45.txt|  Select your language"
msgstr ""

#: usr_44.txt:719
msgid "Copyright: see |manual-copyright|  vim:tw=78:ts=8:ft=help:norl:"
msgstr ""
