#. extracted from usr_28.txt
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2009-08-04 13:40+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Translate Toolkit 1.3.0\n"

#: usr_28.txt:1
msgid "*usr_28.txt*\tFor Vim version 7.2.  Last change: 2008 Jun 14"
msgstr ""

#: usr_28.txt:3
msgid "\t\t     VIM USER MANUAL - by Bram Moolenaar"
msgstr ""

#: usr_28.txt:5
msgid "\t\t\t\t   Folding"
msgstr ""

#: usr_28.txt:8
msgid ""
"Structured text can be separated in sections.  And sections in sub-sections.\n"
"Folding allows you to display a section as one line, providing an overview.\n"
"This chapter explains the different ways this can be done."
msgstr ""

#: usr_28.txt:12
msgid ""
"|28.1|\tWhat is folding?\n"
"|28.2|\tManual folding\n"
"|28.3|\tWorking with folds\n"
"|28.4|\tSaving and restoring folds\n"
"|28.5|\tFolding by indent\n"
"|28.6|\tFolding with markers\n"
"|28.7|\tFolding by syntax\n"
"|28.8|\tFolding by expression\n"
"|28.9|\tFolding unchanged lines\n"
"|28.10| Which fold method to use?"
msgstr ""

#: usr_28.txt:23
msgid ""
"     Next chapter: |usr_29.txt|  Moving through programs\n"
" Previous chapter: |usr_27.txt|  Search commands and patterns\n"
"Table of contents: |usr_toc.txt|"
msgstr ""

#: usr_28.txt:27
msgid ""
"============================================================================"
"==\n"
"*28.1*\tWhat is folding?"
msgstr ""

#: usr_28.txt:30
msgid ""
"Folding is used to show a range of lines in the buffer as a single line on "
"the\n"
"screen.  Like a piece of paper which is folded to make it shorter:"
msgstr ""

#: usr_28.txt:33
msgid ""
"\t+------------------------+\n"
"\t| line 1\t\t |\n"
"\t| line 2\t\t |\n"
"\t| line 3\t\t |\n"
"\t|_______________________ |\n"
"\t\\\t\t\t \\\n"
"\t \\________________________\\\n"
"\t / folded lines\t\t  /\n"
"\t/________________________/\n"
"\t| line 12\t\t |\n"
"\t| line 13\t\t |\n"
"\t| line 14\t\t |\n"
"\t+------------------------+"
msgstr ""

#: usr_28.txt:47
msgid ""
"The text is still in the buffer, unchanged.  Only the way lines are "
"displayed\n"
"is affected by folding."
msgstr ""

#: usr_28.txt:50
msgid ""
"The advantage of folding is that you can get a better overview of the\n"
"structure of text, by folding lines of a section and replacing it with a "
"line\n"
"that indicates that there is a section."
msgstr ""

#: usr_28.txt:54
msgid ""
"============================================================================"
"==\n"
"*28.2*\tManual folding"
msgstr ""

#: usr_28.txt:57
msgid "Try it out: Position the cursor in a paragraph and type: >"
msgstr ""

#: usr_28.txt:59
msgid "\tzfap"
msgstr ""

#: usr_28.txt:61
msgid ""
"You will see that the paragraph is replaced by a highlighted line.  You have\n"
"created a fold.  |zf| is an operator and |ap| a text object selection.  You\n"
"can use the |zf| operator with any movement command to create a fold for the\n"
"text that it moved over.  |zf| also works in Visual mode."
msgstr ""

#: usr_28.txt:66
msgid "To view the text again, open the fold by typing: >"
msgstr ""

#: usr_28.txt:68
msgid "\tzo"
msgstr ""

#: usr_28.txt:70
msgid "And you can close the fold again with: >"
msgstr ""

#: usr_28.txt:72
msgid "\tzc"
msgstr ""

#: usr_28.txt:74
msgid ""
"All the folding commands start with \"z\".  With some fantasy, this looks like "
"a\n"
"folded piece of paper, seen from the side.  The letter after the \"z\" has a\n"
"mnemonic meaning to make it easier to remember the commands:"
msgstr ""

#: usr_28.txt:78
msgid ""
"\tzf\tF-old creation\n"
"\tzo\tO-pen a fold\n"
"\tzc\tC-lose a fold"
msgstr ""

#: usr_28.txt:82
msgid ""
"Folds can be nested: A region of text that contains folds can be folded\n"
"again.  For example, you can fold each paragraph in this section, and then\n"
"fold all the sections in this chapter.  Try it out.  You will notice that\n"
"opening the fold for the whole chapter will restore the nested folds as they\n"
"were, some may be open and some may be closed."
msgstr ""

#: usr_28.txt:88
msgid ""
"Suppose you have created several folds, and now want to view all the text.\n"
"You could go to each fold and type \"zo\".  To do this faster, use this "
"command: >"
msgstr ""

#: usr_28.txt:91
msgid "\tzr"
msgstr ""

#: usr_28.txt:93
msgid "This will R-educe the folding.  The opposite is: >"
msgstr ""

#: usr_28.txt:95
msgid "\tzm"
msgstr ""

#: usr_28.txt:97
msgid ""
"This folds M-ore.  You can repeat \"zr\" and \"zm\" to open and close nested "
"folds\n"
"of several levels."
msgstr ""

#: usr_28.txt:100
msgid ""
"If you have nested several levels deep, you can open all of them with: >"
msgstr ""

#: usr_28.txt:102
msgid "\tzR"
msgstr ""

#: usr_28.txt:104
msgid ""
"This R-educes folds until there are none left.  And you can close all folds\n"
"with: >"
msgstr ""

#: usr_28.txt:107
msgid "\tzM"
msgstr ""

#: usr_28.txt:109
msgid "This folds M-ore and M-ore."
msgstr ""

#: usr_28.txt:111
msgid ""
"You can quickly disable the folding with the |zn| command.  Then |zN| brings\n"
"back the folding as it was.  |zi| toggles between the two.  This is a useful\n"
"way of working:\n"
"- create folds to get overview on your file\n"
"- move around to where you want to do your work\n"
"- do |zi| to look at the text and edit it\n"
"- do |zi| again to go back to moving around"
msgstr ""

#: usr_28.txt:119
msgid "More about manual folding in the reference manual: |fold-manual|"
msgstr ""

#: usr_28.txt:121
msgid ""
"============================================================================"
"==\n"
"*28.3*\tWorking with folds"
msgstr ""

#: usr_28.txt:124
msgid ""
"When some folds are closed, movement commands like \"j\" and \"k\" move over a\n"
"fold like it was a single, empty line.  This allows you to quickly move "
"around\n"
"over folded text."
msgstr ""

#: usr_28.txt:128
msgid ""
"You can yank, delete and put folds as if it was a single line.  This is very\n"
"useful if you want to reorder functions in a program.  First make sure that\n"
"each fold contains a whole function (or a bit less) by selecting the right\n"
"'foldmethod'.  Then delete the function with \"dd\", move the cursor and put "
"it\n"
"with \"p\".  If some lines of the function are above or below the fold, you "
"can\n"
"use Visual selection:\n"
"- put the cursor on the first line to be moved\n"
"- hit \"V\" to start Visual mode\n"
"- put the cursor on the last line to be moved\n"
"- hit \"d\" to delete the selected lines.\n"
"- move the cursor to the new position and \"p\"ut the lines there."
msgstr ""

#: usr_28.txt:140
msgid ""
"It is sometimes difficult to see or remember where a fold is located, thus\n"
"where a |zo| command would actually work.  To see the defined folds: >"
msgstr ""

#: usr_28.txt:143
msgid "\t:set foldcolumn=4"
msgstr ""

#: usr_28.txt:145
msgid ""
"This will show a small column on the left of the window to indicate folds.\n"
"A \"+\" is shown for a closed fold.  A \"-\" is shown at the start of each open\n"
"fold and \"|\" at following lines of the fold."
msgstr ""

#: usr_28.txt:149
msgid ""
"You can use the mouse to open a fold by clicking on the \"+\" in the "
"foldcolumn.\n"
"Clicking on the \"-\" or a \"|\" below it will close an open fold."
msgstr ""

#: usr_28.txt:152
msgid ""
"To open all folds at the cursor line use |zO|.\n"
"To close all folds at the cursor line use |zC|.\n"
"To delete a fold at the cursor line use |zd|.\n"
"To delete all folds at the cursor line use |zD|."
msgstr ""

#: usr_28.txt:157
msgid ""
"When in Insert mode, the fold at the cursor line is never closed.  That "
"allows\n"
"you to see what you type!"
msgstr ""

#: usr_28.txt:160
msgid ""
"Folds are opened automatically when jumping around or moving the cursor left\n"
"or right.  For example, the \"0\" command opens the fold under the cursor\n"
"(if 'foldopen' contains \"hor\", which is the default).  The 'foldopen' option\n"
"can be changed to open folds for specific commands.  If you want the line\n"
"under the cursor always to be open, do this: >"
msgstr ""

#: usr_28.txt:166
msgid "\t:set foldopen=all"
msgstr ""

#: usr_28.txt:168
msgid ""
"Warning: You won't be able to move onto a closed fold then.  You might want "
"to\n"
"use this only temporarily and then set it back to the default: >"
msgstr ""

#: usr_28.txt:171
msgid "\t:set foldopen&"
msgstr ""

#: usr_28.txt:173
msgid "You can make folds close automatically when you move out of it: >"
msgstr ""

#: usr_28.txt:175
msgid "\t:set foldclose=all"
msgstr ""

#: usr_28.txt:177
msgid ""
"This will re-apply 'foldlevel' to all folds that don't contain the cursor.\n"
"You have to try it out if you like how this feels.  Use |zm| to fold more "
"and\n"
"|zr| to fold less (reduce folds)."
msgstr ""

#: usr_28.txt:181
msgid ""
"The folding is local to the window.  This allows you to open two windows on\n"
"the same buffer, one with folds and one without folds.  Or one with all "
"folds\n"
"closed and one with all folds open."
msgstr ""

#: usr_28.txt:185
msgid ""
"============================================================================"
"==\n"
"*28.4*\tSaving and restoring folds"
msgstr ""

#: usr_28.txt:188
msgid ""
"When you abandon a file (starting to edit another one), the state of the "
"folds\n"
"is lost.  If you come back to the same file later, all manually opened and\n"
"closed folds are back to their default.  When folds have been created\n"
"manually, all folds are gone!  To save the folds use the |:mkview| command: "
">"
msgstr ""

#: usr_28.txt:193
msgid "\t:mkview"
msgstr ""

#: usr_28.txt:195
msgid ""
"This will store the settings and other things that influence the view on the\n"
"file.  You can change what is stored with the 'viewoptions' option.\n"
"When you come back to the same file later, you can load the view again: >"
msgstr ""

#: usr_28.txt:199
msgid "\t:loadview"
msgstr ""

#: usr_28.txt:201
msgid ""
"You can store up to ten views on one file.  For example, to save the current\n"
"setup as the third view and load the second view: >"
msgstr ""

#: usr_28.txt:204
msgid ""
"\t:mkview 3\n"
"\t:loadview 2"
msgstr ""

#: usr_28.txt:207
msgid ""
"Note that when you insert or delete lines the views might become invalid.\n"
"Also check out the 'viewdir' option, which specifies where the views are\n"
"stored.  You might want to delete old views now and then."
msgstr ""

#: usr_28.txt:211
msgid ""
"============================================================================"
"==\n"
"*28.5*\tFolding by indent"
msgstr ""

#: usr_28.txt:214
msgid ""
"Defining folds with |zf| is a lot of work.  If your text is structured by\n"
"giving lower level items a larger indent, you can use the indent folding\n"
"method.  This will create folds for every sequence of lines with the same\n"
"indent.  Lines with a larger indent will become nested folds.  This works "
"well\n"
"with many programming languages."
msgstr ""

#: usr_28.txt:220
msgid "Try this by setting the 'foldmethod' option: >"
msgstr ""

#: usr_28.txt:222
msgid "\t:set foldmethod=indent"
msgstr ""

#: usr_28.txt:224
msgid ""
"Then you can use the |zm| and |zr| commands to fold more and reduce folding.\n"
"It's easy to see on this example text:"
msgstr ""

#: usr_28.txt:227
msgid ""
"This line is not indented\n"
"\tThis line is indented once\n"
"\t\tThis line is indented twice\n"
"\t\tThis line is indented twice\n"
"\tThis line is indented once\n"
"This line is not indented\n"
"\tThis line is indented once\n"
"\tThis line is indented once"
msgstr ""

#: usr_28.txt:236
msgid ""
"Note that the relation between the amount of indent and the fold depth "
"depends\n"
"on the 'shiftwidth' option.  Each 'shiftwidth' worth of indent adds one to "
"the\n"
"depth of the fold.  This is called a fold level."
msgstr ""

#: usr_28.txt:240
msgid ""
"When you use the |zr| and |zm| commands you actually increase or decrease "
"the\n"
"'foldlevel' option.  You could also set it directly: >"
msgstr ""

#: usr_28.txt:243
msgid "\t:set foldlevel=3"
msgstr ""

#: usr_28.txt:245
msgid ""
"This means that all folds with three times a 'shiftwidth' indent or more "
"will\n"
"be closed.  The lower the foldlevel, the more folds will be closed.  When\n"
"'foldlevel' is zero, all folds are closed.  |zM| does set 'foldlevel' to "
"zero.\n"
"The opposite command |zR| sets 'foldlevel' to the deepest fold level that is\n"
"present in the file."
msgstr ""

#: usr_28.txt:251
msgid ""
"Thus there are two ways to open and close the folds:\n"
"(A) By setting the fold level.\n"
"    This gives a very quick way of \"zooming out\" to view the structure of "
"the\n"
"    text, move the cursor, and \"zoom in\" on the text again."
msgstr ""

#: usr_28.txt:256
msgid ""
"(B) By using |zo| and |zc| commands to open or close specific folds.\n"
"    This allows opening only those folds that you want to be open, while "
"other\n"
"    folds remain closed."
msgstr ""

#: usr_28.txt:260
msgid ""
"This can be combined: You can first close most folds by using |zm| a few "
"times\n"
"and then open a specific fold with |zo|.  Or open all folds with |zR| and\n"
"then close specific folds with |zc|."
msgstr ""

#: usr_28.txt:264
msgid ""
"But you cannot manually define folds when 'foldmethod' is \"indent\", as that\n"
"would conflict with the relation between the indent and the fold level."
msgstr ""

#: usr_28.txt:267
msgid "More about folding by indent in the reference manual: |fold-indent|"
msgstr ""

#: usr_28.txt:269
msgid ""
"============================================================================"
"==\n"
"*28.6*\tFolding with markers"
msgstr ""

#: usr_28.txt:272
msgid ""
"Markers in the text are used to specify the start and end of a fold region.\n"
"This gives precise control over which lines are included in a fold.  The\n"
"disadvantage is that the text needs to be modified."
msgstr ""

#: usr_28.txt:276
msgid "Try it: >"
msgstr ""

#: usr_28.txt:278
msgid "\t:set foldmethod=marker"
msgstr ""

#: usr_28.txt:280
msgid "Example text, as it could appear in a C program:"
msgstr ""

#: usr_28.txt:282
msgid ""
"\t/* foobar () {{{ */\n"
"\tint foobar()\n"
"\t{\n"
"\t\t/* return a value {{{ */\n"
"\t\treturn 42;\n"
"\t\t/* }}} */\n"
"\t}\n"
"\t/* }}} */"
msgstr ""

#: usr_28.txt:291
msgid ""
"Notice that the folded line will display the text before the marker.  This "
"is\n"
"very useful to tell what the fold contains."
msgstr ""

#: usr_28.txt:294
msgid ""
"It's quite annoying when the markers don't pair up correctly after moving "
"some\n"
"lines around.  This can be avoided by using numbered markers.  Example:"
msgstr ""

#: usr_28.txt:297
msgid ""
"\t/* global variables {{{1 */\n"
"\tint varA, varB;"
msgstr ""

#: usr_28.txt:300
msgid ""
"\t/* functions {{{1 */\n"
"\t/* funcA() {{{2 */\n"
"\tvoid funcA() {}"
msgstr ""

#: usr_28.txt:304
msgid ""
"\t/* funcB() {{{2 */\n"
"\tvoid funcB() {}\n"
"\t/* }}}1 */"
msgstr ""

#: usr_28.txt:308
msgid ""
"At every numbered marker a fold at the specified level begins.  This will "
"make\n"
"any fold at a higher level stop here.  You can just use numbered start "
"markers\n"
"to define all folds.  Only when you want to explicitly stop a fold before\n"
"another starts you need to add an end marker."
msgstr ""

#: usr_28.txt:313
msgid "More about folding with markers in the reference manual: |fold-marker|"
msgstr ""

#: usr_28.txt:315
msgid ""
"============================================================================"
"==\n"
"*28.7*\tFolding by syntax"
msgstr ""

#: usr_28.txt:318
msgid ""
"For each language Vim uses a different syntax file.  This defines the colors\n"
"for various items in the file.  If you are reading this in Vim, in a "
"terminal\n"
"that supports colors, the colors you see are made with the \"help\" syntax "
"file.\n"
"   In the syntax files it is possible to add syntax items that have the "
"\"fold\"\n"
"argument.  These define a fold region.  This requires writing a syntax file\n"
"and adding these items in it.  That's not so easy to do.  But once it's "
"done,\n"
"all folding happens automatically.\n"
"   Here we'll assume you are using an existing syntax file.  Then there is\n"
"nothing more to explain.  You can open and close folds as explained above.\n"
"The folds will be created and deleted automatically when you edit the file."
msgstr ""

#: usr_28.txt:329
msgid "More about folding by syntax in the reference manual: |fold-syntax|"
msgstr ""

#: usr_28.txt:331
msgid ""
"============================================================================"
"==\n"
"*28.8*\tFolding by expression"
msgstr ""

#: usr_28.txt:334
msgid ""
"This is similar to folding by indent, but instead of using the indent of a\n"
"line a user function is called to compute the fold level of a line.  You can\n"
"use this for text where something in the text indicates which lines belong\n"
"together.  An example is an e-mail message where the quoted text is "
"indicated\n"
"by a \">\" before the line.  To fold these quotes use this: >"
msgstr ""

#: usr_28.txt:340
msgid ""
"\t:set foldmethod=expr\n"
"\t:set foldexpr=strlen(substitute(substitute(getline(v:lnum),'\\\\s','',\\\"g\\\"),"
"'[^>].*','',''))"
msgstr ""

#: usr_28.txt:343
msgid "You can try it out on this text:"
msgstr ""

#: usr_28.txt:345
msgid ""
"> quoted text he wrote\n"
"> quoted text he wrote\n"
"> > double quoted text I wrote\n"
"> > double quoted text I wrote"
msgstr ""

#: usr_28.txt:350
msgid ""
"Explanation for the 'foldexpr' used in the example (inside out):\n"
"   getline(v:lnum)\t\t\tgets the current line\n"
"   substitute(...,'\\\\s','','g')\t\tremoves all white space from the line\n"
"   substitute(...,'[^>].*','','')\tremoves everything after leading '>'s\n"
"   strlen(...)\t\t\t\tcounts the length of the string, which\n"
"\t\t\t\t\tis the number of '>'s found"
msgstr ""

#: usr_28.txt:357
msgid ""
"Note that a backslash must be inserted before every space, double quote and\n"
"backslash for the \":set\" command.  If this confuses you, do >"
msgstr ""

#: usr_28.txt:360
msgid "\t:set foldexpr"
msgstr ""

#: usr_28.txt:362
msgid ""
"to check the actual resulting value.  To correct a complicated expression, "
"use\n"
"the command-line completion: >"
msgstr ""

#: usr_28.txt:365
msgid "\t:set foldexpr=<Tab>"
msgstr ""

#: usr_28.txt:367
msgid ""
"Where <Tab> is a real Tab.  Vim will fill in the previous value, which you "
"can\n"
"then edit."
msgstr ""

#: usr_28.txt:370
msgid ""
"When the expression gets more complicated you should put it in a function "
"and\n"
"set 'foldexpr' to call that function."
msgstr ""

#: usr_28.txt:373
msgid "More about folding by expression in the reference manual: |fold-expr|"
msgstr ""

#: usr_28.txt:375
msgid ""
"============================================================================"
"==\n"
"*28.9*\tFolding unchanged lines"
msgstr ""

#: usr_28.txt:378
msgid ""
"This is useful when you set the 'diff' option in the same window.  The\n"
"|vimdiff| command does this for you.  Example: >"
msgstr ""

#: usr_28.txt:381
msgid "\t:setlocal diff foldmethod=diff scrollbind nowrap foldlevel=1"
msgstr ""

#: usr_28.txt:383
msgid ""
"Do this in every window that shows a different version of the same file.  "
"You\n"
"will clearly see the differences between the files, while the text that "
"didn't\n"
"change is folded."
msgstr ""

#: usr_28.txt:387
msgid "For more details see |fold-diff|."
msgstr ""

#: usr_28.txt:389
msgid ""
"============================================================================"
"==\n"
"*28.10* Which fold method to use?"
msgstr ""

#: usr_28.txt:392
msgid ""
"All these possibilities make you wonder which method you should chose.\n"
"Unfortunately, there is no golden rule.  Here are some hints."
msgstr ""

#: usr_28.txt:395
msgid ""
"If there is a syntax file with folding for the language you are editing, "
"that\n"
"is probably the best choice.  If there isn't one, you might try to write it.\n"
"This requires a good knowledge of search patterns.  It's not easy, but when\n"
"it's working you will not have to define folds manually."
msgstr ""

#: usr_28.txt:400
msgid ""
"Typing commands to manually fold regions can be used for unstructured text.\n"
"Then use the |:mkview| command to save and restore your folds."
msgstr ""

#: usr_28.txt:403
msgid ""
"The marker method requires you to change the file.  If you are sharing the\n"
"files with other people or you have to meet company standards, you might not\n"
"be allowed to add them.\n"
"   The main advantage of markers is that you can put them exactly where you\n"
"want them.  That avoids that a few lines are missed when you cut and paste\n"
"folds.  And you can add a comment about what is contained in the fold."
msgstr ""

#: usr_28.txt:410
msgid ""
"Folding by indent is something that works in many files, but not always very\n"
"well.  Use it when you can't use one of the other methods.  However, it is\n"
"very useful for outlining.  Then you specifically use one 'shiftwidth' for\n"
"each nesting level."
msgstr ""

#: usr_28.txt:415
msgid ""
"Folding with expressions can make folds in almost any structured text.  It "
"is\n"
"quite simple to specify, especially if the start and end of a fold can "
"easily\n"
"be recognized.\n"
"   If you use the \"expr\" method to define folds, but they are not exactly "
"how\n"
"you want them, you could switch to the \"manual\" method.  This will not "
"remove\n"
"the defined folds.  Then you can delete or add folds manually."
msgstr ""

#: usr_28.txt:422
msgid ""
"============================================================================"
"=="
msgstr ""

#: usr_28.txt:424
msgid "Next chapter: |usr_29.txt|  Moving through programs"
msgstr ""

#: usr_28.txt:426
msgid "Copyright: see |manual-copyright|  vim:tw=78:ts=8:ft=help:norl:"
msgstr ""
