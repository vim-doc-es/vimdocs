#. extracted from usr_22.txt
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2009-08-04 13:39+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Translate Toolkit 1.3.0\n"

#: usr_22.txt:1
msgid "*usr_22.txt*\tFor Vim version 7.2.  Last change: 2007 Aug 14"
msgstr ""

#: usr_22.txt:3
msgid "\t\t     VIM USER MANUAL - by Bram Moolenaar"
msgstr ""

#: usr_22.txt:5
msgid "\t\t\t   Finding the file to edit"
msgstr ""

#: usr_22.txt:8
msgid ""
"Files can be found everywhere.  So how do you find them?  Vim offers various\n"
"ways to browse the directory tree.  There are commands to jump to a file "
"that\n"
"is mentioned in another.  And Vim remembers which files have been edited\n"
"before."
msgstr ""

#: usr_22.txt:13
msgid ""
"|22.1|\tThe file browser\n"
"|22.2|\tThe current directory\n"
"|22.3|\tFinding a file\n"
"|22.4|\tThe buffer list"
msgstr ""

#: usr_22.txt:18
msgid ""
"     Next chapter: |usr_23.txt|  Editing other files\n"
" Previous chapter: |usr_21.txt|  Go away and come back\n"
"Table of contents: |usr_toc.txt|"
msgstr ""

#: usr_22.txt:22
msgid ""
"============================================================================"
"==\n"
"*22.1*\tThe file browser"
msgstr ""

#: usr_22.txt:25
msgid ""
"Vim has a plugin that makes it possible to edit a directory.  Try this: >"
msgstr ""

#: usr_22.txt:27
msgid "\t:edit ."
msgstr ""

#: usr_22.txt:29
msgid ""
"Through the magic of autocommands and Vim scripts, the window will be filled\n"
"with the contents of the directory.  It looks like this:"
msgstr ""

#: usr_22.txt:32
msgid ""
"\" "
"============================================================================ "
"~\n"
"\" Netrw Directory Listing                                        (netrw "
"v109) ~\n"
"\"   Sorted by      name ~\n"
"\"   Sort sequence: [\\/]$,\\.h$,\\.c$,\\.cpp$,*,\\.info$,\\.swp$,\\.o$\\.obj$,\\.bak$ "
"~\n"
"\"   Quick Help: <F1>:help  -:go up dir  D:delete  R:rename  s:sort-by  "
"x:exec ~\n"
"\" "
"============================================================================ "
"~\n"
"../ ~\n"
"./ ~\n"
"check/ ~\n"
"Makefile ~\n"
"autocmd.txt ~\n"
"change.txt ~\n"
"eval.txt~ ~\n"
"filetype.txt~ ~\n"
"help.txt.info ~"
msgstr ""

#: usr_22.txt:48
msgid "You can see these items:"
msgstr ""

#: usr_22.txt:50
msgid ""
"1.  The name of the browsing tool and its version number\n"
"2.  The name of the browsing directory\n"
"3.  The method of sorting (may be by name, time, or size)\n"
"4.  How names are to be sorted (directories first, then *.h files,\n"
"    *.c files, etc)\n"
"5.  How to get help (use the <F1> key), and an abbreviated listing\n"
"    of available commands\n"
"6.  A listing of files, including \"../\", which allows one to to list\n"
"    the parent directory."
msgstr ""

#: usr_22.txt:60
msgid ""
"If you have syntax highlighting enabled, the different parts are highlighted\n"
"so as to make it easier to spot them."
msgstr ""

#: usr_22.txt:63
msgid ""
"You can use Normal mode Vim commands to move around in the text.  For "
"example,\n"
"move the cursor atop a file and press <Enter>; you will then be editing that\n"
"file.  To go back to the browser use \":edit .\" again, or use \":Explore\".\n"
"CTRL-O also works."
msgstr ""

#: usr_22.txt:68
msgid ""
"Try using <Enter> while the cursor is atop a directory name.  The result is\n"
"that the file browser moves into that directory and displays the items found\n"
"there.  Pressing <Enter> on the first directory \"../\" moves you one level\n"
"higher.  Pressing \"-\" does the same thing, without the need to move to the\n"
"\"../\" item first."
msgstr ""

#: usr_22.txt:74
msgid ""
"You can press <F1> to get help on the things you can do in the netrw file\n"
"browser.  This is what you get: >"
msgstr ""

#: usr_22.txt:77
msgid ""
"    9. Directory Browsing\t netrw-browse   netrw-dir   netrw-list   netrw-"
"help "
msgstr ""

#: usr_22.txt:79
msgid ""
"    MAPS\t\t\t\t\t\t\t\t netrw-maps \n"
"     \t <F1>.............Help.......................................|netrw-"
"help|\n"
"     \t <cr>.............Browsing...................................|netrw-"
"cr|\n"
"     \t <del>............Deleting Files or Directories..............|netrw-"
"delete|\n"
"     \t -................Going Up...................................|netrw--|\n"
"     \t a................Hiding Files or Directories................|netrw-a|\n"
"     \t mb...............Bookmarking a Directory....................|netrw-"
"mb|\n"
"     \t gb...............Changing to a Bookmarked Directory.........|netrw-"
"gb|\n"
"     \t c................Make Browsing Directory The Current Dir....|netrw-c|\n"
"     \t d................Make A New Directory.......................|netrw-d|\n"
"     \t D................Deleting Files or Directories..............|netrw-D|\n"
"     \t <c-h>............Edit File/Directory Hiding List............|netrw-"
"ctrl-h|\n"
"     \t i................Change Listing Style.......................|netrw-i|\n"
"     \t <c-l>............Refreshing the Listing.....................|netrw-"
"ctrl-l|\n"
"     \t o................Browsing with a Horizontal Split...........|netrw-o|\n"
"     \t p................Use Preview Window.........................|netrw-p|\n"
"     \t P................Edit in Previous Window....................|netrw-p|\n"
"     \t q................Listing Bookmarks and History..............|netrw-q|\n"
"     \t r................Reversing Sorting Order....................|netrw-r|\n"
"<    \t(etc)"
msgstr ""

#: usr_22.txt:100
msgid ""
"The <F1> key thus brings you to a netrw directory browsing contents help "
"page.\n"
"Its a regular help page; use the usual |CTRL-]| to jump to tagged help items\n"
"and |CTRL-O| to jump back."
msgstr ""

#: usr_22.txt:104
msgid ""
"To select files for display and editing: (with the cursor is atop a "
"filename)"
msgstr ""

#: usr_22.txt:106
msgid ""
"\t<enter>\t\tOpen the file in the current window.\t   |netrw-cr|\n"
"\to\t\tHorizontally split window and display file |netrw-o|\n"
"\tv\t\tVertically split window and display file   |netrw-v|\n"
"\tp\t\tUse the |preview-window| \t\t   |netrw-p|\n"
"\tP\t\tEdit in the previous window\t\t   |netrw-P|\n"
"\tt\t\tOpen file in a new tab\t\t\t   |netrw-t|"
msgstr ""

#: usr_22.txt:113
msgid ""
"The following normal-mode commands may be used to control the browser "
"display:"
msgstr ""

#: usr_22.txt:115
msgid ""
"\ti\t\tControls listing style (thin, long, wide, and tree).\n"
"\t\t\tThe long listing includes size and date information.\n"
"\ts\t\tRepeatedly pressing s will change the way the files\n"
"\t\t\tare sorted; one may sort on name, modification time,\n"
"\t\t\tor size.\n"
"\tr\t\tReverse the sorting order."
msgstr ""

#: usr_22.txt:122
msgid "As a sampling of extra normal-mode commands:"
msgstr ""

#: usr_22.txt:124
msgid ""
"\tc\t\tChange Vim's notion of the current directory to be\n"
"\t\t\tthe same as the browser directory.  (see\n"
"\t\t\t|g:netrw_keepdir| to control this, too)\n"
"\tR\t\tRename the file or directory under the cursor; a\n"
"\t\t\tprompt will be issued for the new name.\n"
"\tD\t\tDelete the file or directory under the cursor; a\n"
"\t\t\tconfirmation request will be issued.\n"
"\tmb gb\t\tMake bookmark/goto bookmark"
msgstr ""

#: usr_22.txt:134
msgid "One may also use command mode; again, just a sampling:"
msgstr ""

#: usr_22.txt:136
msgid ""
"\t:Explore [directory]\tBrowse specified/current directory\n"
"\t:NetrwSettings\t\tA comprehensive list of your current netrw\n"
"\t\t\t\tsettings with help linkage."
msgstr ""

#: usr_22.txt:140
msgid ""
"The netrw browser is not limited to just your local machine; one may use\n"
"urls such as:    (that trailing / is important)"
msgstr ""

#: usr_22.txt:143
msgid ""
"\t:Explore ftp://somehost/path/to/dir/\n"
"\t:e scp://somehost/path/to/dir/"
msgstr ""

#: usr_22.txt:146
msgid "See |netrw-browse| for more."
msgstr ""

#: usr_22.txt:148
msgid ""
"============================================================================"
"==\n"
"*22.2*\tThe current directory"
msgstr ""

#: usr_22.txt:151
msgid ""
"Just like the shell, Vim has the concept of a current directory.  Suppose "
"you\n"
"are in your home directory and want to edit several files in a directory\n"
"\"VeryLongFileName\".  You could do: >"
msgstr ""

#: usr_22.txt:155
msgid ""
"\t:edit VeryLongFileName/file1.txt\n"
"\t:edit VeryLongFileName/file2.txt\n"
"\t:edit VeryLongFileName/file3.txt"
msgstr ""

#: usr_22.txt:159
msgid "To avoid much of the typing, do this: >"
msgstr ""

#: usr_22.txt:161
msgid ""
"\t:cd VeryLongFileName\n"
"\t:edit file1.txt\n"
"\t:edit file2.txt\n"
"\t:edit file3.txt"
msgstr ""

#: usr_22.txt:166
msgid ""
"The \":cd\" command changes the current directory.  You can see what the "
"current\n"
"directory is with the \":pwd\" command: >"
msgstr ""

#: usr_22.txt:169
msgid ""
"\t:pwd\n"
"\t/home/Bram/VeryLongFileName"
msgstr ""

#: usr_22.txt:172
msgid ""
"Vim remembers the last directory that you used.  Use \"cd -\" to go back to "
"it.\n"
"Example: >"
msgstr ""

#: usr_22.txt:175
msgid ""
"\t:pwd\n"
"\t/home/Bram/VeryLongFileName\n"
"\t:cd /etc\n"
"\t:pwd\n"
"\t/etc\n"
"\t:cd -\n"
"\t:pwd\n"
"\t/home/Bram/VeryLongFileName\n"
"\t:cd -\n"
"\t:pwd\n"
"\t/etc"
msgstr ""

#: usr_22.txt:188
msgid "WINDOW LOCAL DIRECTORY"
msgstr ""

#: usr_22.txt:190
msgid ""
"When you split a window, both windows use the same current directory.  When\n"
"you want to edit a number of files somewhere else in the new window, you can\n"
"make it use a different directory, without changing the current directory in\n"
"the other window.  This is called a local directory. >"
msgstr ""

#: usr_22.txt:195
msgid ""
"\t:pwd\n"
"\t/home/Bram/VeryLongFileName\n"
"\t:split\n"
"\t:lcd /etc\n"
"\t:pwd\n"
"\t/etc\n"
"\tCTRL-W w\n"
"\t:pwd\n"
"\t/home/Bram/VeryLongFileName"
msgstr ""

#: usr_22.txt:205
msgid ""
"So long as no \":lcd\" command has been used, all windows share the same "
"current\n"
"directory.  Doing a \":cd\" command in one window will also change the current\n"
"directory of the other window.\n"
"   For a window where \":lcd\" has been used a different current directory is\n"
"remembered.  Using \":cd\" or \":lcd\" in other windows will not change it.\n"
"   When using a \":cd\" command in a window that uses a different current\n"
"directory, it will go back to using the shared directory."
msgstr ""

#: usr_22.txt:213
msgid ""
"============================================================================"
"==\n"
"*22.3*\tFinding a file"
msgstr ""

#: usr_22.txt:216
msgid "You are editing a C program that contains this line:"
msgstr ""

#: usr_22.txt:218
msgid "\t#include \"inits.h\" ~"
msgstr ""

#: usr_22.txt:220
msgid ""
"You want to see what is in that \"inits.h\" file.  Move the cursor on the name\n"
"of the file and type: >"
msgstr ""

#: usr_22.txt:223
msgid "\tgf"
msgstr ""

#: usr_22.txt:225
msgid ""
"Vim will find the file and edit it.\n"
"   What if the file is not in the current directory?  Vim will use the "
"'path'\n"
"option to find the file.  This option is a list of directory names where to\n"
"look for your file.\n"
"   Suppose you have your include files located in \"c:/prog/include\".  This\n"
"command will add it to the 'path' option: >"
msgstr ""

#: usr_22.txt:232
msgid "\t:set path+=c:/prog/include"
msgstr ""

#: usr_22.txt:234
msgid ""
"This directory is an absolute path.  No matter where you are, it will be the\n"
"same place.  What if you have located files in a subdirectory, below where "
"the\n"
"file is?  Then you can specify a relative path name.  This starts with a "
"dot:\n"
">\n"
"\t:set path+=./proto"
msgstr ""

#: usr_22.txt:240
msgid ""
"This tells Vim to look in the directory \"proto\", below the directory where "
"the\n"
"file in which you use \"gf\" is.  Thus using \"gf\" on \"inits.h\" will make Vim\n"
"look for \"proto/inits.h\", starting in the directory of the file.\n"
"   Without the \"./\", thus \"proto\", Vim would look in the \"proto\" directory\n"
"below the current directory.  And the current directory might not be where "
"the\n"
"file that you are editing is located."
msgstr ""

#: usr_22.txt:247
msgid ""
"The 'path' option allows specifying the directories where to search for "
"files\n"
"in many more ways.  See the help on the 'path' option.\n"
"   The 'isfname' option is used to decide which characters are included in "
"the\n"
"file name, and which ones are not (e.g., the \" character in the example\n"
"above)."
msgstr ""

#: usr_22.txt:253
msgid ""
"When you know the file name, but it's not to be found in the file, you can\n"
"type it: >"
msgstr ""

#: usr_22.txt:256
msgid "\t:find inits.h"
msgstr ""

#: usr_22.txt:258
msgid ""
"Vim will then use the 'path' option to try and locate the file.  This is the\n"
"same as the \":edit\" command, except for the use of 'path'."
msgstr ""

#: usr_22.txt:261
msgid ""
"To open the found file in a new window use CTRL-W f instead of \"gf\", or use\n"
"\":sfind\" instead of \":find\"."
msgstr ""

#: usr_22.txt:265
msgid ""
"A nice way to directly start Vim to edit a file somewhere in the 'path': >"
msgstr ""

#: usr_22.txt:267
msgid "\tvim \"+find stdio.h\""
msgstr ""

#: usr_22.txt:269
msgid ""
"This finds the file \"stdio.h\" in your value of 'path'.  The quotes are\n"
"necessary to have one argument |-+c|."
msgstr ""

#: usr_22.txt:272
msgid ""
"============================================================================"
"==\n"
"*22.4*\tThe buffer list"
msgstr ""

#: usr_22.txt:275
msgid ""
"The Vim editor uses the term buffer to describe a file being edited.\n"
"Actually, a buffer is a copy of the file that you edit.  When you finish\n"
"changing the buffer, you write the contents of the buffer to the file.\n"
"Buffers not only contain file contents, but also all the marks, settings, "
"and\n"
"other stuff that goes with it."
msgstr ""

#: usr_22.txt:282
msgid "HIDDEN BUFFERS"
msgstr ""

#: usr_22.txt:284
msgid ""
"Suppose you are editing the file one.txt and need to edit the file two.txt.\n"
"You could simply use \":edit two.txt\", but since you made changes to one.txt\n"
"that won't work.  You also don't want to write one.txt yet.  Vim has a\n"
"solution for you: >"
msgstr ""

#: usr_22.txt:289
msgid "\t:hide edit two.txt"
msgstr ""

#: usr_22.txt:291
msgid ""
"The buffer \"one.txt\" disappears from the screen, but Vim still knows that "
"you\n"
"are editing this buffer, so it keeps the modified text.  This is called a\n"
"hidden buffer: The buffer contains text, but you can't see it.\n"
"   The argument of \":hide\" is another command.  \":hide\" makes that command\n"
"behave as if the 'hidden' option was set.  You could also set this option\n"
"yourself.  The effect is that when any buffer is abandoned, it becomes "
"hidden.\n"
"   Be careful!  When you have hidden buffers with changes, don't exit Vim\n"
"without making sure you have saved all the buffers."
msgstr ""

#: usr_22.txt:301
msgid "INACTIVE BUFFERS"
msgstr ""

#: usr_22.txt:303
msgid ""
"   When a buffer has been used once, Vim remembers some information about "
"it.\n"
"When it is not displayed in a window and it is not hidden, it is still in "
"the\n"
"buffer list.  This is called an inactive buffer.  Overview:"
msgstr ""

#: usr_22.txt:307
msgid ""
"   Active\t\tAppears in a window, text loaded.\n"
"   Hidden\t\tNot in a window, text loaded.\n"
"   Inactive\t\tNot in a window, no text loaded."
msgstr ""

#: usr_22.txt:311
msgid ""
"The inactive buffers are remembered, because Vim keeps information about "
"them,\n"
"like marks.  And remembering the file name is useful too, so that you can "
"see\n"
"which files you have edited.  And edit them again."
msgstr ""

#: usr_22.txt:316
msgid "LISTING BUFFERS"
msgstr ""

#: usr_22.txt:318
msgid "View the buffer list with this command: >"
msgstr ""

#: usr_22.txt:320
msgid "\t:buffers"
msgstr ""

#: usr_22.txt:322
msgid ""
"A command which does the same, is not so obvious to list buffers, but is "
"much\n"
"shorter to type: >"
msgstr ""

#: usr_22.txt:325
msgid "\t:ls"
msgstr ""

#: usr_22.txt:327
msgid "The output could look like this:"
msgstr ""

#: usr_22.txt:329
msgid ""
"  1 #h\t\"help.txt\"\t\t\tline 62 ~\n"
"  2 %a+\t\"usr_21.txt\"\t\t\tline 1 ~\n"
"  3\t\"usr_toc.txt\"\t\t\tline 1 ~"
msgstr ""

#: usr_22.txt:333
msgid ""
"The first column contains the buffer number.  You can use this to edit the\n"
"buffer without having to type the name, see below.\n"
"   After the buffer number come the flags.  Then the name of the file\n"
"and the line number where the cursor was the last time.\n"
"   The flags that can appear are these (from left to right):"
msgstr ""

#: usr_22.txt:339
msgid ""
"\tu\tBuffer is unlisted |unlisted-buffer|.\n"
"\t %\tCurrent buffer.\n"
"\t #\tAlternate buffer.\n"
"\t  a\tBuffer is loaded and displayed.\n"
"\t  h\tBuffer is loaded but hidden.\n"
"\t   =\tBuffer is read-only.\n"
"\t   -\tBuffer is not modifiable, the 'modifiable' option is off.\n"
"\t    +\tBuffer has been modified."
msgstr ""

#: usr_22.txt:349
msgid "EDITING A BUFFER"
msgstr ""

#: usr_22.txt:351
msgid ""
"You can edit a buffer by its number.  That avoids having to type the file\n"
"name: >"
msgstr ""

#: usr_22.txt:354
msgid "\t:buffer 2"
msgstr ""

#: usr_22.txt:356
msgid ""
"But the only way to know the number is by looking in the buffer list.  You "
"can\n"
"use the name, or part of it, instead: >"
msgstr ""

#: usr_22.txt:359
msgid "\t:buffer help"
msgstr ""

#: usr_22.txt:361
msgid ""
"Vim will find a best match for the name you type.  If there is only one\n"
"buffer that matches the name, it will be used.  In this case \"help.txt\".\n"
"   To open a buffer in a new window: >"
msgstr ""

#: usr_22.txt:365
msgid "\t:sbuffer 3"
msgstr ""

#: usr_22.txt:367
msgid "This works with a name as well."
msgstr ""

#: usr_22.txt:370
msgid "USING THE BUFFER LIST"
msgstr ""

#: usr_22.txt:372
msgid "You can move around in the buffer list with these commands:"
msgstr ""

#: usr_22.txt:374
msgid ""
"\t:bnext\t\tgo to next buffer\n"
"\t:bprevious\tgo to previous buffer\n"
"\t:bfirst\t\tgo to the first buffer\n"
"\t:blast\t\tgo to the last buffer"
msgstr ""

#: usr_22.txt:379
msgid "To remove a buffer from the list, use this command: >"
msgstr ""

#: usr_22.txt:381
msgid "\t:bdelete 3"
msgstr ""

#: usr_22.txt:383
msgid ""
"Again, this also works with a name.\n"
"   If you delete a buffer that was active (visible in a window), that window\n"
"will be closed.  If you delete the current buffer, the current window will "
"be\n"
"closed.  If it was the last window, Vim will find another buffer to edit.  "
"You\n"
"can't be editing nothing!"
msgstr ""

#: usr_22.txt:389
msgid ""
"\tNote:\n"
"\tEven after removing the buffer with \":bdelete\" Vim still remembers it.\n"
"\tIt's actually made \"unlisted\", it no longer appears in the list from\n"
"\t\":buffers\".  The \":buffers!\" command will list unlisted buffers (yes,\n"
"\tVim can do the impossible).  To really make Vim forget about a buffer,\n"
"\tuse \":bwipe\".  Also see the 'buflisted' option."
msgstr ""

#: usr_22.txt:396
msgid ""
"============================================================================"
"=="
msgstr ""

#: usr_22.txt:398
msgid "Next chapter: |usr_23.txt|  Editing other files"
msgstr ""

#: usr_22.txt:400
msgid "Copyright: see |manual-copyright|  vim:tw=78:ts=8:ft=help:norl:"
msgstr ""
