#. extracted from usr_21.txt
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2009-08-04 13:39+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Translate Toolkit 1.3.0\n"

#: usr_21.txt:1
msgid "*usr_21.txt*\tFor Vim version 7.2.  Last change: 2008 Nov 09"
msgstr ""

#: usr_21.txt:3
msgid "\t\t     VIM USER MANUAL - by Bram Moolenaar"
msgstr ""

#: usr_21.txt:5
msgid "\t\t\t   Go away and come back"
msgstr ""

#: usr_21.txt:8
msgid ""
"This chapter goes into mixing the use of other programs with Vim.  Either by\n"
"executing program from inside Vim or by leaving Vim and coming back later.\n"
"Furthermore, this is about the ways to remember the state of Vim and restore\n"
"it later."
msgstr ""

#: usr_21.txt:13
msgid ""
"|21.1|\tSuspend and resume\n"
"|21.2|\tExecuting shell commands\n"
"|21.3|\tRemembering information; viminfo\n"
"|21.4|\tSessions\n"
"|21.5|\tViews\n"
"|21.6|\tModelines"
msgstr ""

#: usr_21.txt:20
msgid ""
"     Next chapter: |usr_22.txt|  Finding the file to edit\n"
" Previous chapter: |usr_20.txt|  Typing command-line commands quickly\n"
"Table of contents: |usr_toc.txt|"
msgstr ""

#: usr_21.txt:24
msgid ""
"============================================================================"
"==\n"
"*21.1*\tSuspend and resume"
msgstr ""

#: usr_21.txt:27
msgid ""
"Like most Unix programs Vim can be suspended by pressing CTRL-Z.  This stops\n"
"Vim and takes you back to the shell it was started in.  You can then do any\n"
"other commands until you are bored with them.  Then bring back Vim with the\n"
"\"fg\" command. >"
msgstr ""

#: usr_21.txt:32
msgid ""
"\tCTRL-Z\n"
"\t{any sequence of shell commands}\n"
"\tfg"
msgstr ""

#: usr_21.txt:36
msgid ""
"You are right back where you left Vim, nothing has changed.\n"
"   In case pressing CTRL-Z doesn't work, you can also use \":suspend\".\n"
"Don't forget to bring Vim back to the foreground, you would lose any changes\n"
"that you made!"
msgstr ""

#: usr_21.txt:41
msgid ""
"Only Unix has support for this.  On other systems Vim will start a shell for\n"
"you.  This also has the functionality of being able to execute shell "
"commands.\n"
"But it's a new shell, not the one that you started Vim from.\n"
"   When you are running the GUI you can't go back to the shell where Vim was\n"
"started.  CTRL-Z will minimize the Vim window instead."
msgstr ""

#: usr_21.txt:47
msgid ""
"============================================================================"
"==\n"
"*21.2*\tExecuting shell commands"
msgstr ""

#: usr_21.txt:50
msgid ""
"To execute a single shell command from Vim use \":!{command}\".  For example, "
"to\n"
"see a directory listing: >"
msgstr ""

#: usr_21.txt:53
msgid ""
"\t:!ls\n"
"\t:!dir"
msgstr ""

#: usr_21.txt:56
msgid ""
"The first one is for Unix, the second one for MS-Windows.\n"
"   Vim will execute the program.  When it ends you will get a prompt to hit\n"
"<Enter>.  This allows you to have a look at the output from the command "
"before\n"
"returning to the text you were editing.\n"
"   The \"!\" is also used in other places where a program is run.  Let's take\n"
"a look at an overview:"
msgstr ""

#: usr_21.txt:63
msgid ""
"\t:!{program}\t\texecute {program}\n"
"\t:r !{program}\t\texecute {program} and read its output\n"
"\t:w !{program}\t\texecute {program} and send text to its input\n"
"\t:[range]!{program}\tfilter text through {program}"
msgstr ""

#: usr_21.txt:68
msgid ""
"Notice that the presence of a range before \"!{program}\" makes a big\n"
"difference.  Without it executes the program normally, with the range a "
"number\n"
"of text lines is filtered through the program."
msgstr ""

#: usr_21.txt:72
msgid ""
"Executing a whole row of programs this way is possible.  But a shell is much\n"
"better at it.  You can start a new shell this way: >"
msgstr ""

#: usr_21.txt:75
msgid "\t:shell"
msgstr ""

#: usr_21.txt:77
msgid ""
"This is similar to using CTRL-Z to suspend Vim.  The difference is that a "
"new\n"
"shell is started."
msgstr ""

#: usr_21.txt:80
msgid ""
"When using the GUI the shell will be using the Vim window for its input and\n"
"output.  Since Vim is not a terminal emulator, this will not work perfectly.\n"
"If you have trouble, try toggling the 'guipty' option.  If this still "
"doesn't\n"
"work well enough, start a new terminal to run the shell in.  For example "
"with:\n"
">\n"
"\t:!xterm&"
msgstr ""

#: usr_21.txt:87
msgid ""
"============================================================================"
"==\n"
"*21.3*\tRemembering information; viminfo"
msgstr ""

#: usr_21.txt:90
msgid ""
"After editing for a while you will have text in registers, marks in various\n"
"files, a command line history filled with carefully crafted commands.  When\n"
"you exit Vim all of this is lost.  But you can get it back!"
msgstr ""

#: usr_21.txt:94
msgid "The viminfo file is designed to store status information:"
msgstr ""

#: usr_21.txt:96
msgid ""
"\tCommand-line and Search pattern history\n"
"\tText in registers\n"
"\tMarks for various files\n"
"\tThe buffer list\n"
"\tGlobal variables"
msgstr ""

#: usr_21.txt:102
msgid ""
"Each time you exit Vim it will store this information in a file, the viminfo\n"
"file.  When Vim starts again, the viminfo file is read and the information\n"
"restored."
msgstr ""

#: usr_21.txt:106
msgid ""
"The 'viminfo' option is set by default to restore a limited number of items.\n"
"You might want to set it to remember more information.  This is done through\n"
"the following command: >"
msgstr ""

#: usr_21.txt:110
msgid "\t:set viminfo=string"
msgstr ""

#: usr_21.txt:112
msgid ""
"The string specifies what to save.  The syntax of this string is an option\n"
"character followed by an argument.  The option/argument pairs are separated "
"by\n"
"commas.\n"
"   Take a look at how you can build up your own viminfo string.  First, the "
"'\n"
"option is used to specify how many files for which you save marks (a-z).  "
"Pick\n"
"a nice even number for this option (1000, for instance).  Your command now\n"
"looks like this: >"
msgstr ""

#: usr_21.txt:120
msgid "\t:set viminfo='1000"
msgstr ""

#: usr_21.txt:122
msgid ""
"The f option controls whether global marks (A-Z and 0-9) are stored.  If "
"this\n"
"option is 0, none are stored.  If it is 1 or you do not specify an f option,\n"
"the marks are stored.  You want this feature, so now you have this: >"
msgstr ""

#: usr_21.txt:126
msgid "\t:set viminfo='1000,f1"
msgstr ""

#: usr_21.txt:128
msgid ""
"The < option controls how many lines are saved for each of the registers.  "
"By\n"
"default, all the lines are saved.  If 0, nothing is saved.  To avoid adding\n"
"thousands of lines to your viminfo file (which might never get used and "
"makes\n"
"starting Vim slower) you use a maximum of 500 lines: >"
msgstr ""

#: usr_21.txt:133
msgid ""
"\t:set viminfo='1000,f1,<500\n"
"<\n"
"Other options you might want to use:\n"
"\t:\tnumber of lines to save from the command line history\n"
"\t@\tnumber of lines to save from the input line history\n"
"\t/\tnumber of lines to save from the search history\n"
"\tr\tremovable media, for which no marks will be stored (can be\n"
"\t\tused several times)\n"
"\t!\tglobal variables that start with an uppercase letter and\n"
"\t\tdon't contain lowercase letters\n"
"\th\tdisable 'hlsearch' highlighting when starting\n"
"\t%\tthe buffer list (only restored when starting Vim without file\n"
"\t\targuments)\n"
"\tc\tconvert the text using 'encoding'\n"
"\tn\tname used for the viminfo file (must be the last option)"
msgstr ""

#: usr_21.txt:149
msgid "See the 'viminfo' option and |viminfo-file| for more information."
msgstr ""

#: usr_21.txt:151
msgid ""
"When you run Vim multiple times, the last one exiting will store its\n"
"information.  This may cause information that previously exiting Vims stored\n"
"to be lost.  Each item can be remembered only once."
msgstr ""

#: usr_21.txt:156
msgid "GETTING BACK TO WHERE YOU STOPPED VIM"
msgstr ""

#: usr_21.txt:158
msgid ""
"You are halfway editing a file and it's time to leave for holidays.  You "
"exit\n"
"Vim and go enjoy yourselves, forgetting all about your work.  After a couple\n"
"of weeks you start Vim, and type:\n"
">\n"
"\t'0"
msgstr ""

#: usr_21.txt:164
msgid ""
"And you are right back where you left Vim.  So you can get on with your "
"work.\n"
"   Vim creates a mark each time you exit Vim.  The last one is '0.  The\n"
"position that '0 pointed to is made '1.  And '1 is made to '2, and so forth.\n"
"Mark '9 is lost.\n"
"   The |:marks| command is useful to find out where '0 to '9 will take you."
msgstr ""

#: usr_21.txt:171
msgid "GETTING BACK TO SOME FILE"
msgstr ""

#: usr_21.txt:173
msgid ""
"If you want to go back to a file that you edited recently, but not when\n"
"exiting Vim, there is a slightly more complicated way.  You can see a list "
"of\n"
"files by typing the command: >"
msgstr ""

#: usr_21.txt:177
msgid ""
"\t:oldfiles\n"
"<\t1: ~/.viminfo ~\n"
"\t2: ~/text/resume.txt ~\n"
"\t3: /tmp/draft ~"
msgstr ""

#: usr_21.txt:182
msgid ""
"Now you would like to edit the second file, which is in the list preceded by\n"
"\"2:\".  You type: >"
msgstr ""

#: usr_21.txt:185
msgid "\t:e #<2"
msgstr ""

#: usr_21.txt:187
msgid ""
"Instead of \":e\" you can use any command that has a file name argument, the\n"
"\"#<2\" item works in the same place as \"%\" (current file name) and \"#\"\n"
"(alternate file name).  So you can also split the window to edit the third\n"
"file: >"
msgstr ""

#: usr_21.txt:192
msgid "\t:split #<3"
msgstr ""

#: usr_21.txt:194
msgid ""
"That #<123 thing is a bit complicated when you just want to edit a file.\n"
"Fortunately there is a simpler way: >"
msgstr ""

#: usr_21.txt:197
msgid ""
"\t:browse oldfiles\n"
"<\t1: ~/.viminfo ~\n"
"\t2: ~/text/resume.txt ~\n"
"\t3: /tmp/draft ~\n"
"\t-- More --"
msgstr ""

#: usr_21.txt:203
msgid ""
"You get the same list of files as with |:oldfiles|.  If you want to edit\n"
"\"resume.txt\" first press \"q\" to stop the listing.  You will get a prompt:"
msgstr ""

#: usr_21.txt:206
msgid "\tType number and <Enter> (empty cancels): ~"
msgstr ""

#: usr_21.txt:208
msgid "Type \"2\" and press <Enter> to edit the second file."
msgstr ""

#: usr_21.txt:210
msgid "More info at |:oldfiles|, |v:oldfiles| and |c_#<|."
msgstr ""

#: usr_21.txt:213
msgid "MOVE INFO FROM ONE VIM TO ANOTHER"
msgstr ""

#: usr_21.txt:215
msgid ""
"You can use the \":wviminfo\" and \":rviminfo\" commands to save and restore the\n"
"information while still running Vim.  This is useful for exchanging register\n"
"contents between two instances of Vim, for example.  In the first Vim do: >"
msgstr ""

#: usr_21.txt:219
msgid "\t:wviminfo! ~/tmp/viminfo"
msgstr ""

#: usr_21.txt:221
msgid "And in the second Vim do: >"
msgstr ""

#: usr_21.txt:223
msgid "\t:rviminfo! ~/tmp/viminfo"
msgstr ""

#: usr_21.txt:225
msgid ""
"Obviously, the \"w\" stands for \"write\" and the \"r\" for \"read\".\n"
"   The ! character is used by \":wviminfo\" to forcefully overwrite an "
"existing\n"
"file.  When it is omitted, and the file exists, the information is merged "
"into\n"
"the file.\n"
"   The ! character used for \":rviminfo\" means that all the information is\n"
"used, this may overwrite existing information.  Without the ! only "
"information\n"
"that wasn't set is used.\n"
"   These commands can also be used to store info and use it again later.  "
"You\n"
"could make a directory full of viminfo files, each containing info for a\n"
"different purpose."
msgstr ""

#: usr_21.txt:236
msgid ""
"============================================================================"
"==\n"
"*21.4*\tSessions"
msgstr ""

#: usr_21.txt:239
msgid ""
"Suppose you are editing along, and it is the end of the day.  You want to "
"quit\n"
"work and pick up where you left off the next day.  You can do this by saving\n"
"your editing session and restoring it the next day.\n"
"   A Vim session contains all the information about what you are editing.\n"
"This includes things such as the file list, window layout, global variables,\n"
"options and other information.  (Exactly what is remembered is controlled by\n"
"the 'sessionoptions' option, described below.)\n"
"   The following command creates a session file: >"
msgstr ""

#: usr_21.txt:248
msgid "\t:mksession vimbook.vim"
msgstr ""

#: usr_21.txt:250
msgid "Later if you want to restore this session, you can use this command: >"
msgstr ""

#: usr_21.txt:252
msgid "\t:source vimbook.vim"
msgstr ""

#: usr_21.txt:254
msgid ""
"If you want to start Vim and restore a specific session, you can use the\n"
"following command: >"
msgstr ""

#: usr_21.txt:257
msgid "\tvim -S vimbook.vim"
msgstr ""

#: usr_21.txt:259
msgid ""
"This tells Vim to read a specific file on startup.  The 'S' stands for\n"
"session (actually, you can source any Vim script with -S, thus it might as\n"
"well stand for \"source\")."
msgstr ""

#: usr_21.txt:263
msgid ""
"The windows that were open are restored, with the same position and size as\n"
"before.  Mappings and option values are like before.\n"
"   What exactly is restored depends on the 'sessionoptions' option.  The\n"
"default value is \"blank,buffers,curdir,folds,help,options,winsize\"."
msgstr ""

#: usr_21.txt:268
msgid ""
"\tblank\t\tkeep empty windows\n"
"\tbuffers\t\tall buffers, not only the ones in a window\n"
"\tcurdir\t\tthe current directory\n"
"\tfolds\t\tfolds, also manually created ones\n"
"\thelp\t\tthe help window\n"
"\toptions\t\tall options and mappings\n"
"\twinsize\t\twindow sizes"
msgstr ""

#: usr_21.txt:276
msgid ""
"Change this to your liking.  To also restore the size of the Vim window, for\n"
"example, use: >"
msgstr ""

#: usr_21.txt:279
msgid "\t:set sessionoptions+=resize"
msgstr ""

#: usr_21.txt:282
msgid "SESSION HERE, SESSION THERE"
msgstr ""

#: usr_21.txt:284
msgid ""
"The obvious way to use sessions is when working on different projects.\n"
"Suppose you store you session files in the directory \"~/.vim\".  You are\n"
"currently working on the \"secret\" project and have to switch to the \"boring\"\n"
"project: >"
msgstr ""

#: usr_21.txt:289
msgid ""
"\t:wall\n"
"\t:mksession! ~/.vim/secret.vim\n"
"\t:source ~/.vim/boring.vim"
msgstr ""

#: usr_21.txt:293
msgid ""
"This first uses \":wall\" to write all modified files.  Then the current "
"session\n"
"is saved, using \":mksession!\".  This overwrites the previous session.  The\n"
"next time you load the secret session you can continue where you were at "
"this\n"
"point.  And finally you load the new \"boring\" session."
msgstr ""

#: usr_21.txt:298
msgid ""
"If you open help windows, split and close various window, and generally mess\n"
"up the window layout, you can go back to the last saved session: >"
msgstr ""

#: usr_21.txt:301
msgid "\t:source ~/.vim/boring.vim"
msgstr ""

#: usr_21.txt:303
msgid ""
"Thus you have complete control over whether you want to continue next time\n"
"where you are now, by saving the current setup in a session, or keep the\n"
"session file as a starting point.\n"
"   Another way of using sessions is to create a window layout that you like "
"to\n"
"use, and save this in a session.  Then you can go back to this layout "
"whenever\n"
"you want.\n"
"   For example, this is a nice layout to use:"
msgstr ""

#: usr_21.txt:311
msgid ""
"\t+----------------------------------------+\n"
"\t|\t\t   VIM - main help file  |\n"
"\t|\t\t\t\t\t |\n"
"\t|Move around:  Use the cursor keys, or \"h|\n"
"\t|help.txt================================|\n"
"\t|explorer   |\t\t\t\t |\n"
"\t|dir\t    |~\t\t\t\t |\n"
"\t|dir\t    |~\t\t\t\t |\n"
"\t|file\t    |~\t\t\t\t |\n"
"\t|file\t    |~\t\t\t\t |\n"
"\t|file\t    |~\t\t\t\t |\n"
"\t|file\t    |~\t\t\t\t |\n"
"\t|~/=========|[No File]===================|\n"
"\t|\t\t\t\t\t |\n"
"\t+----------------------------------------+"
msgstr ""

#: usr_21.txt:327
msgid ""
"This has a help window at the top, so that you can read this text.  The "
"narrow\n"
"vertical window on the left contains a file explorer.  This is a Vim plugin\n"
"that lists the contents of a directory.  You can select files to edit there.\n"
"More about this in the next chapter.\n"
"   Create this from a just started Vim with: >"
msgstr ""

#: usr_21.txt:333
msgid ""
"\t:help\n"
"\tCTRL-W w\n"
"\t:vertical split ~/"
msgstr ""

#: usr_21.txt:337
msgid ""
"You can resize the windows a bit to your liking.  Then save the session "
"with:\n"
">\n"
"\t:mksession ~/.vim/mine.vim"
msgstr ""

#: usr_21.txt:341
msgid "Now you can start Vim with this layout: >"
msgstr ""

#: usr_21.txt:343
msgid "\tvim -S ~/.vim/mine.vim"
msgstr ""

#: usr_21.txt:345
msgid ""
"Hint: To open a file you see listed in the explorer window in the empty\n"
"window, move the cursor to the filename and press \"O\".  Double clicking with\n"
"the mouse will also do this."
msgstr ""

#: usr_21.txt:350
msgid "UNIX AND MS-WINDOWS"
msgstr ""

#: usr_21.txt:352
msgid ""
"Some people have to do work on MS-Windows systems one day and on Unix "
"another\n"
"day.  If you are one of them, consider adding \"slash\" and \"unix\" to\n"
"'sessionoptions'.  The session files will then be written in a format that "
"can\n"
"be used on both systems.  This is the command to put in your vimrc file: >"
msgstr ""

#: usr_21.txt:357
msgid "\t:set sessionoptions+=unix,slash"
msgstr ""

#: usr_21.txt:359
msgid ""
"Vim will use the Unix format then, because the MS-Windows Vim can read and\n"
"write Unix files, but Unix Vim can't read MS-Windows format session files.\n"
"Similarly, MS-Windows Vim understands file names with / to separate names, "
"but\n"
"Unix Vim doesn't understand \\."
msgstr ""

#: usr_21.txt:365
msgid "SESSIONS AND VIMINFO"
msgstr ""

#: usr_21.txt:367
msgid ""
"Sessions store many things, but not the position of marks, contents of\n"
"registers and the command line history.  You need to use the viminfo feature\n"
"for these things.\n"
"   In most situations you will want to use sessions separately from viminfo.\n"
"This can be used to switch to another session, but keep the command line\n"
"history.  And yank text into registers in one session, and paste it back in\n"
"another session.\n"
"   You might prefer to keep the info with the session.  You will have to do\n"
"this yourself then.  Example: >"
msgstr ""

#: usr_21.txt:377
msgid ""
"\t:mksession! ~/.vim/secret.vim\n"
"\t:wviminfo! ~/.vim/secret.viminfo"
msgstr ""

#: usr_21.txt:380
msgid "And to restore this again: >"
msgstr ""

#: usr_21.txt:382
msgid ""
"\t:source ~/.vim/secret.vim\n"
"\t:rviminfo! ~/.vim/secret.viminfo"
msgstr ""

#: usr_21.txt:385
msgid ""
"============================================================================"
"==\n"
"*21.5*\tViews"
msgstr ""

#: usr_21.txt:388
msgid ""
"A session stores the looks of the whole of Vim.  When you want to store the\n"
"properties for one window only, use a view.\n"
"   The use of a view is for when you want to edit a file in a specific way.\n"
"For example, you have line numbers enabled with the 'number' option and\n"
"defined a few folds.  Just like with sessions, you can remember this view on\n"
"the file and restore it later.  Actually, when you store a session, it "
"stores\n"
"the view of each window.\n"
"   There are two basic ways to use views.  The first is to let Vim pick a "
"name\n"
"for the view file.  You can restore the view when you later edit the same\n"
"file.  To store the view for the current window: >"
msgstr ""

#: usr_21.txt:399
msgid "\t:mkview"
msgstr ""

#: usr_21.txt:401
msgid ""
"Vim will decide where to store the view.  When you later edit the same file\n"
"you get the view back with this command: >"
msgstr ""

#: usr_21.txt:404
msgid "\t:loadview"
msgstr ""

#: usr_21.txt:406
msgid ""
"That's easy, isn't it?\n"
"   Now you want to view the file without the 'number' option on, or with all\n"
"folds open, you can set the options to make the window look that way.  Then\n"
"store this view with: >"
msgstr ""

#: usr_21.txt:411
msgid "\t:mkview 1"
msgstr ""

#: usr_21.txt:413
msgid "Obviously, you can get this back with: >"
msgstr ""

#: usr_21.txt:415
msgid "\t:loadview 1"
msgstr ""

#: usr_21.txt:417
msgid ""
"Now you can switch between the two views on the file by using \":loadview\" "
"with\n"
"and without the \"1\" argument.\n"
"   You can store up to ten views for the same file this way, one unnumbered\n"
"and nine numbered 1 to 9."
msgstr ""

#: usr_21.txt:423
msgid "A VIEW WITH A NAME"
msgstr ""

#: usr_21.txt:425
msgid ""
"The second basic way to use views is by storing the view in a file with a "
"name\n"
"you chose.  This view can be loaded while editing another file.  Vim will "
"then\n"
"switch to editing the file specified in the view.  Thus you can use this to\n"
"quickly switch to editing another file, with all its options set as you "
"saved\n"
"them.\n"
"   For example, to save the view of the current file: >"
msgstr ""

#: usr_21.txt:432
msgid "\t:mkview ~/.vim/main.vim"
msgstr ""

#: usr_21.txt:434
msgid "You can restore it with: >"
msgstr ""

#: usr_21.txt:436
msgid "\t:source ~/.vim/main.vim"
msgstr ""

#: usr_21.txt:438
msgid ""
"============================================================================"
"==\n"
"*21.6*\tModelines"
msgstr ""

#: usr_21.txt:441
msgid ""
"When editing a specific file, you might set options specifically for that\n"
"file.  Typing these commands each time is boring.  Using a session or view "
"for\n"
"editing a file doesn't work when sharing the file between several people.\n"
"   The solution for this situation is adding a modeline to the file.  This "
"is\n"
"a line of text that tells Vim the values of options, to be used in this file\n"
"only.\n"
"   A typical example is a C program where you make indents by a multiple of "
"4\n"
"spaces.  This requires setting the 'shiftwidth' option to 4.  This modeline\n"
"will do that:"
msgstr ""

#: usr_21.txt:451
msgid "\t/* vim:set shiftwidth=4: */ ~"
msgstr ""

#: usr_21.txt:453
msgid ""
"Put this line as one of the first or last five lines in the file.  When\n"
"editing the file, you will notice that 'shiftwidth' will have been set to\n"
"four.  When editing another file, it's set back to the default value of "
"eight.\n"
"   For some files the modeline fits well in the header, thus it can be put "
"at\n"
"the top of the file.  For text files and other files where the modeline gets\n"
"in the way of the normal contents, put it at the end of the file."
msgstr ""

#: usr_21.txt:460
msgid ""
"The 'modelines' option specifies how many lines at the start and end of the\n"
"file are inspected for containing a modeline.  To inspect ten lines: >"
msgstr ""

#: usr_21.txt:463
msgid "\t:set modelines=10"
msgstr ""

#: usr_21.txt:465
msgid ""
"The 'modeline' option can be used to switch this off.  Do this when you are\n"
"working as root on Unix or Administrator on MS-Windows, or when you don't\n"
"trust the files you are editing: >"
msgstr ""

#: usr_21.txt:469
msgid "\t:set nomodeline"
msgstr ""

#: usr_21.txt:471
msgid "Use this format for the modeline:"
msgstr ""

#: usr_21.txt:473
msgid "\tany-text vim:set {option}={value} ... : any-text ~"
msgstr ""

#: usr_21.txt:475
msgid ""
"The \"any-text\" indicates that you can put any text before and after the part\n"
"that Vim will use.  This allows making it look like a comment, like what was\n"
"done above with /* and */.\n"
"   The \" vim:\" part is what makes Vim recognize this line.  There must be\n"
"white space before \"vim\", or \"vim\" must be at the start of the line.  Thus\n"
"using something like \"gvim:\" will not work.\n"
"   The part between the colons is a \":set\" command.  It works the same way "
"as\n"
"typing the \":set\" command, except that you need to insert a backslash before "
"a\n"
"colon (otherwise it would be seen as the end of the modeline)."
msgstr ""

#: usr_21.txt:485
msgid "Another example:"
msgstr ""

#: usr_21.txt:487
msgid "\t// vim:set textwidth=72 dir=c\\:\\tmp:  use c:\\tmp here ~"
msgstr ""

#: usr_21.txt:489
msgid ""
"There is an extra backslash before the first colon, so that it's included in\n"
"the \":set\" command.  The text after the second colon is ignored, thus a "
"remark\n"
"can be placed there."
msgstr ""

#: usr_21.txt:493
msgid "For more details see |modeline|."
msgstr ""

#: usr_21.txt:495
msgid ""
"============================================================================"
"=="
msgstr ""

#: usr_21.txt:497
msgid "Next chapter: |usr_22.txt|  Finding the file to edit"
msgstr ""

#: usr_21.txt:499
msgid "Copyright: see |manual-copyright|  vim:tw=78:ts=8:ft=help:norl:"
msgstr ""
