#. extracted from usr_05.txt
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2009-08-01 19:54+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Translate Toolkit 1.3.0\n"

#: usr_05.txt:1
msgid "*usr_05.txt*\tFor Vim version 7.2.  Last change: 2007 May 11"
msgstr ""

#: usr_05.txt:3
msgid "\t\t     VIM USER MANUAL - by Bram Moolenaar"
msgstr ""

#: usr_05.txt:5
msgid "\t\t\t      Set your settings"
msgstr ""

#: usr_05.txt:8
msgid ""
"Vim can be tuned to work like you want it to.  This chapter shows you how to\n"
"make Vim start with options set to different values.  Add plugins to extend\n"
"Vim's capabilities.  Or define your own macros."
msgstr ""

#: usr_05.txt:12
msgid ""
"|05.1|\tThe vimrc file\n"
"|05.2|\tThe example vimrc file explained\n"
"|05.3|\tSimple mappings\n"
"|05.4|\tAdding a plugin\n"
"|05.5|\tAdding a help file\n"
"|05.6|\tThe option window\n"
"|05.7|\tOften used options"
msgstr ""

#: usr_05.txt:20
msgid ""
"     Next chapter: |usr_06.txt|  Using syntax highlighting\n"
" Previous chapter: |usr_04.txt|  Making small changes\n"
"Table of contents: |usr_toc.txt|"
msgstr ""

#: usr_05.txt:24
msgid ""
"============================================================================"
"==\n"
"*05.1*\tThe vimrc file\t\t\t\t\t*vimrc-intro*"
msgstr ""

#: usr_05.txt:27
msgid ""
"You probably got tired of typing commands that you use very often.  To start\n"
"Vim with all your favorite option settings and mappings, you write them in\n"
"what is called the vimrc file.  Vim executes the commands in this file when "
"it\n"
"starts up."
msgstr ""

#: usr_05.txt:32
msgid ""
"If you already have a vimrc file (e.g., when your sysadmin has one setup for\n"
"you), you can edit it this way: >"
msgstr ""

#: usr_05.txt:35
msgid "\t:edit $MYVIMRC"
msgstr ""

#: usr_05.txt:37
msgid ""
"If you don't have a vimrc file yet, see |vimrc| to find out where you can\n"
"create a vimrc file.  Also, the \":version\" command mentions the name of the\n"
"\"user vimrc file\" Vim looks for."
msgstr ""

#: usr_05.txt:41
msgid "For Unix and Macintosh this file is always used and is recommended:"
msgstr ""

#: usr_05.txt:43
msgid "\t~/.vimrc ~"
msgstr ""

#: usr_05.txt:45
msgid "For MS-DOS and MS-Windows you can use one of these:"
msgstr ""

#: usr_05.txt:47
msgid ""
"\t$HOME/_vimrc ~\n"
"\t$VIM/_vimrc ~"
msgstr ""

#: usr_05.txt:50
msgid ""
"The vimrc file can contain all the commands that you type after a colon.  "
"The\n"
"most simple ones are for setting options.  For example, if you want Vim to\n"
"always start with the 'incsearch' option on, add this line you your vimrc\n"
"file: >"
msgstr ""

#: usr_05.txt:55
msgid "\tset incsearch"
msgstr ""

#: usr_05.txt:57
msgid ""
"For this new line to take effect you need to exit Vim and start it again.\n"
"Later you will learn how to do this without exiting Vim."
msgstr ""

#: usr_05.txt:60
msgid ""
"This chapter only explains the most basic items.  For more information on "
"how\n"
"to write a Vim script file: |usr_41.txt|."
msgstr ""

#: usr_05.txt:63
msgid ""
"============================================================================"
"==\n"
"*05.2*\tThe example vimrc file explained\t\t*vimrc_example.vim*"
msgstr ""

#: usr_05.txt:66
msgid ""
"In the first chapter was explained how the example vimrc (included in the\n"
"Vim distribution) file can be used to make Vim startup in not-compatible "
"mode\n"
"(see |not-compatible|).  The file can be found here:"
msgstr ""

#: usr_05.txt:70
msgid "\t$VIMRUNTIME/vimrc_example.vim ~"
msgstr ""

#: usr_05.txt:72
msgid ""
"In this section we will explain the various commands used in this file.  "
"This\n"
"will give you hints about how to set up your own preferences.  Not "
"everything\n"
"will be explained though.  Use the \":help\" command to find out more."
msgstr ""

#: usr_05.txt:76
msgid ""
">\n"
"\tset nocompatible"
msgstr ""

#: usr_05.txt:79
msgid ""
"As mentioned in the first chapter, these manuals explain Vim working in an\n"
"improved way, thus not completely Vi compatible.  Setting the 'compatible'\n"
"option off, thus 'nocompatible' takes care of this."
msgstr ""

#: usr_05.txt:83
msgid ""
">\n"
"\tset backspace=indent,eol,start"
msgstr ""

#: usr_05.txt:86
msgid ""
"This specifies where in Insert mode the <BS> is allowed to delete the\n"
"character in front of the cursor.  The three items, separated by commas, "
"tell\n"
"Vim to delete the white space at the start of the line, a line break and the\n"
"character before where Insert mode started.\n"
">"
msgstr ""

#: usr_05.txt:92
msgid "\tset autoindent"
msgstr ""

#: usr_05.txt:94
msgid ""
"This makes Vim use the indent of the previous line for a newly created line.\n"
"Thus there is the same amount of white space before the new line.  For "
"example\n"
"when pressing <Enter> in Insert mode, and when using the \"o\" command to open "
"a\n"
"new line.\n"
">"
msgstr ""

#: usr_05.txt:100
msgid ""
"\tif has(\"vms\")\n"
"\t  set nobackup\n"
"\telse\n"
"\t  set backup\n"
"\tendif"
msgstr ""

#: usr_05.txt:106
msgid ""
"This tells Vim to keep a backup copy of a file when overwriting it.  But not\n"
"on the VMS system, since it keeps old versions of files already.  The backup\n"
"file will have the same name as the original file with \"~\" added.  See "
"|07.4|\n"
">"
msgstr ""

#: usr_05.txt:111
msgid "\tset history=50"
msgstr ""

#: usr_05.txt:113
msgid ""
"Keep 50 commands and 50 search patterns in the history.  Use another number "
"if\n"
"you want to remember fewer or more lines.\n"
">"
msgstr ""

#: usr_05.txt:117
msgid "\tset ruler"
msgstr ""

#: usr_05.txt:119
msgid ""
"Always display the current cursor position in the lower right corner of the\n"
"Vim window."
msgstr ""

#: usr_05.txt:122
msgid ""
">\n"
"\tset showcmd"
msgstr ""

#: usr_05.txt:125
msgid ""
"Display an incomplete command in the lower right corner of the Vim window,\n"
"left of the ruler.  For example, when you type \"2f\", Vim is waiting for you "
"to\n"
"type the character to find and \"2f\" is displayed.  When you press \"w\" next,\n"
"the \"2fw\" command is executed and the displayed \"2f\" is removed."
msgstr ""

#: usr_05.txt:130
msgid ""
"\t+-------------------------------------------------+\n"
"\t|text in the Vim window\t\t\t\t  |\n"
"\t|~\t\t\t\t\t\t  |\n"
"\t|~\t\t\t\t\t\t  |\n"
"\t|-- VISUAL --\t\t\t2f     43,8   17% |\n"
"\t+-------------------------------------------------+\n"
"\t ^^^^^^^^^^^\t\t      ^^^^^^^^ ^^^^^^^^^^\n"
"\t  'showmode'\t\t     'showcmd'\t'ruler'"
msgstr ""

#: usr_05.txt:139
msgid ""
">\n"
"\tset incsearch"
msgstr ""

#: usr_05.txt:142
msgid "Display the match for a search pattern when halfway typing it."
msgstr ""

#: usr_05.txt:144
msgid ""
">\n"
"\tmap Q gq"
msgstr ""

#: usr_05.txt:147
msgid ""
"This defines a key mapping.  More about that in the next section.  This\n"
"defines the \"Q\" command to do formatting with the \"gq\" operator.  This is "
"how\n"
"it worked before Vim 5.0.  Otherwise the \"Q\" command starts Ex mode, but you\n"
"will not need it."
msgstr ""

#: usr_05.txt:152
msgid ""
">\n"
"\tvnoremap _g y:exe \"grep /\" . escape(@\", '\\\\/') . \"/ *.c *.h\"<CR>"
msgstr ""

#: usr_05.txt:155
msgid ""
"This mapping yanks the visually selected text and searches for it in C "
"files.\n"
"This is a complicated mapping.  You can see that mappings can be used to do\n"
"quite complicated things.  Still, it is just a sequence of commands that are\n"
"executed like you typed them."
msgstr ""

#: usr_05.txt:160
msgid ""
">\n"
"\tif &t_Co > 2 || has(\"gui_running\")\n"
"\t  syntax on\n"
"\t  set hlsearch\n"
"\tendif"
msgstr ""

#: usr_05.txt:166
msgid ""
"This switches on syntax highlighting, but only if colors are available.  And\n"
"the 'hlsearch' option tells Vim to highlight matches with the last used "
"search\n"
"pattern.  The \"if\" command is very useful to set options only when some\n"
"condition is met.  More about that in |usr_41.txt|."
msgstr ""

#: usr_05.txt:171
msgid ""
"\t\t\t\t\t\t\t*vimrc-filetype*  >\n"
"\tfiletype plugin indent on"
msgstr ""

#: usr_05.txt:174
msgid ""
"This switches on three very clever mechanisms:\n"
"1. Filetype detection.\n"
"   Whenever you start editing a file, Vim will try to figure out what kind "
"of\n"
"   file this is.  When you edit \"main.c\", Vim will see the \".c\" extension "
"and\n"
"   recognize this as a \"c\" filetype.  When you edit a file that starts with\n"
"   \"#!/bin/sh\", Vim will recognize it as a \"sh\" filetype.\n"
"   The filetype detection is used for syntax highlighting and the other two\n"
"   items below.\n"
"   See |filetypes|."
msgstr ""

#: usr_05.txt:184
msgid ""
"2. Using filetype plugin files\n"
"   Many different filetypes are edited with different options.  For example,\n"
"   when you edit a \"c\" file, it's very useful to set the 'cindent' option to\n"
"   automatically indent the lines.  These commonly useful option settings "
"are\n"
"   included with Vim in filetype plugins.  You can also add your own, see\n"
"   |write-filetype-plugin|."
msgstr ""

#: usr_05.txt:191
msgid ""
"3. Using indent files\n"
"   When editing programs, the indent of a line can often be computed\n"
"   automatically.  Vim comes with these indent rules for a number of\n"
"   filetypes.  See |:filetype-indent-on| and 'indentexpr'."
msgstr ""

#: usr_05.txt:196
msgid ""
">\n"
"\tautocmd FileType text setlocal textwidth=78"
msgstr ""

#: usr_05.txt:199
msgid ""
"This makes Vim break text to avoid lines getting longer than 78 characters.\n"
"But only for files that have been detected to be plain text.  There are\n"
"actually two parts here.  \"autocmd FileType text\" is an autocommand.  This\n"
"defines that when the file type is set to \"text\" the following command is\n"
"automatically executed.  \"setlocal textwidth=78\" sets the 'textwidth' option\n"
"to 78, but only locally in one file."
msgstr ""

#: usr_05.txt:206
msgid ""
"\t\t\t\t\t\t\t*restore-cursor*  >\n"
"\tautocmd BufReadPost *\n"
"\t    \\ if line(\"'\\\"\") > 0 && line(\"'\\\"\") <= line(\"$\") |\n"
"\t    \\   exe \"normal g`\\\"\" |\n"
"\t    \\ endif"
msgstr ""

#: usr_05.txt:212
msgid ""
"Another autocommand.  This time it is used after reading any file.  The\n"
"complicated stuff after it checks if the '\" mark is defined, and jumps to it\n"
"if so.  The backslash at the start of a line is used to continue the command\n"
"from the previous line.  That avoids a line getting very long.\n"
"See |line-continuation|.  This only works in a Vim script file, not when\n"
"typing commands at the command-line."
msgstr ""

#: usr_05.txt:219
msgid ""
"============================================================================"
"==\n"
"*05.3*\tSimple mappings"
msgstr ""

#: usr_05.txt:222
msgid ""
"A mapping enables you to bind a set of Vim commands to a single key.  "
"Suppose,\n"
"for example, that you need to surround certain words with curly braces.  In\n"
"other words, you need to change a word such as \"amount\" into \"{amount}\".  "
"With\n"
"the :map command, you can tell Vim that the F5 key does this job.  The "
"command\n"
"is as follows: >"
msgstr ""

#: usr_05.txt:228
msgid ""
"\t:map <F5> i{<Esc>ea}<Esc>\n"
"<\n"
"\tNote:\n"
"\tWhen entering this command, you must enter <F5> by typing four\n"
"\tcharacters.  Similarly, <Esc> is not entered by pressing the <Esc>\n"
"\tkey, but by typing five characters.  Watch out for this difference\n"
"\twhen reading the manual!"
msgstr ""

#: usr_05.txt:236
msgid ""
"Let's break this down:\n"
"    <F5>\tThe F5 function key.  This is the trigger key that causes the\n"
"\t\tcommand to be executed as the key is pressed."
msgstr ""

#: usr_05.txt:240
msgid "    i{<Esc>\tInsert the { character.  The <Esc> key ends Insert mode."
msgstr ""

#: usr_05.txt:242
msgid "    e\t\tMove to the end of the word."
msgstr ""

#: usr_05.txt:244
msgid "    a}<Esc>\tAppend the } to the word."
msgstr ""

#: usr_05.txt:246
msgid ""
"After you execute the \":map\" command, all you have to do to put {} around a\n"
"word is to put the cursor on the first character and press F5."
msgstr ""

#: usr_05.txt:249
msgid ""
"In this example, the trigger is a single key; it can be any string.  But "
"when\n"
"you use an existing Vim command, that command will no longer be available.\n"
"You better avoid that.\n"
"   One key that can be used with mappings is the backslash.  Since you\n"
"probably want to define more than one mapping, add another character.  You\n"
"could map \"\\p\" to add parentheses around a word, and \"\\c\" to add curly "
"braces,\n"
"for example: >"
msgstr ""

#: usr_05.txt:257
msgid ""
"\t:map \\p i(<Esc>ea)<Esc>\n"
"\t:map \\c i{<Esc>ea}<Esc>"
msgstr ""

#: usr_05.txt:260
msgid ""
"You need to type the \\ and the p quickly after another, so that Vim knows "
"they\n"
"belong together."
msgstr ""

#: usr_05.txt:263
msgid ""
"The \":map\" command (with no arguments) lists your current mappings.  At\n"
"least the ones for Normal mode.  More about mappings in section |40.1|."
msgstr ""

#: usr_05.txt:266
msgid ""
"============================================================================"
"==\n"
"*05.4*\tAdding a plugin\t\t\t\t\t*add-plugin* *plugin*"
msgstr ""

#: usr_05.txt:269
msgid ""
"Vim's functionality can be extended by adding plugins.  A plugin is nothing\n"
"more than a Vim script file that is loaded automatically when Vim starts.  "
"You\n"
"can add a plugin very easily by dropping it in your plugin directory.\n"
"{not available when Vim was compiled without the |+eval| feature}"
msgstr ""

#: usr_05.txt:274
msgid "There are two types of plugins:"
msgstr ""

#: usr_05.txt:276
msgid ""
"    global plugin: Used for all kinds of files\n"
"  filetype plugin: Only used for a specific type of file"
msgstr ""

#: usr_05.txt:279
msgid ""
"The global plugins will be discussed first, then the filetype ones\n"
"|add-filetype-plugin|."
msgstr ""

#: usr_05.txt:283
msgid "GLOBAL PLUGINS\t\t\t\t\t\t*standard-plugin*"
msgstr ""

#: usr_05.txt:285
msgid ""
"When you start Vim, it will automatically load a number of global plugins.\n"
"You don't have to do anything for this.  They add functionality that most\n"
"people will want to use, but which was implemented as a Vim script instead "
"of\n"
"being compiled into Vim.  You can find them listed in the help index\n"
"|standard-plugin-list|.  Also see |load-plugins|."
msgstr ""

#: usr_05.txt:291
msgid ""
"\t\t\t\t\t\t\t*add-global-plugin*\n"
"You can add a global plugin to add functionality that will always be present\n"
"when you use Vim.  There are only two steps for adding a global plugin:\n"
"1. Get a copy of the plugin.\n"
"2. Drop it in the right directory."
msgstr ""

#: usr_05.txt:298
msgid "GETTING A GLOBAL PLUGIN"
msgstr ""

#: usr_05.txt:300
msgid ""
"Where can you find plugins?\n"
"- Some come with Vim.  You can find them in the directory $VIMRUNTIME/macros\n"
"  and its sub-directories.\n"
"- Download from the net.  There is a large collection on http://www.vim.org.\n"
"- They are sometimes posted in a Vim |maillist|.\n"
"- You could write one yourself, see |write-plugin|."
msgstr ""

#: usr_05.txt:307
msgid ""
"Some plugins come as a vimball archive, see |vimball|.\n"
"Some plugins can be updated automatically, see |getscript|."
msgstr ""

#: usr_05.txt:311
msgid "USING A GLOBAL PLUGIN"
msgstr ""

#: usr_05.txt:313
msgid ""
"First read the text in the plugin itself to check for any special "
"conditions.\n"
"Then copy the file to your plugin directory:"
msgstr ""

#: usr_05.txt:316
msgid ""
"\tsystem\t\tplugin directory ~\n"
"\tUnix\t\t~/.vim/plugin/\n"
"\tPC and OS/2\t$HOME/vimfiles/plugin or $VIM/vimfiles/plugin\n"
"\tAmiga\t\ts:vimfiles/plugin\n"
"\tMacintosh\t$VIM:vimfiles:plugin\n"
"\tMac OS X\t~/.vim/plugin/\n"
"\tRISC-OS\t\tChoices:vimfiles.plugin"
msgstr ""

#: usr_05.txt:324
msgid "Example for Unix (assuming you didn't have a plugin directory yet): >"
msgstr ""

#: usr_05.txt:326
msgid ""
"\tmkdir ~/.vim\n"
"\tmkdir ~/.vim/plugin\n"
"\tcp /usr/local/share/vim/vim60/macros/justify.vim ~/.vim/plugin"
msgstr ""

#: usr_05.txt:330
msgid ""
"That's all!  Now you can use the commands defined in this plugin to justify\n"
"text."
msgstr ""

#: usr_05.txt:333
msgid ""
"Instead of putting plugins directly into the plugin/ directory, you may\n"
"better organize them by putting them into subdirectories under plugin/.\n"
"As an example, consider using \"~/.vim/plugin/perl/*.vim\" for all your Perl\n"
"plugins."
msgstr ""

#: usr_05.txt:339
msgid "FILETYPE PLUGINS\t\t\t*add-filetype-plugin* *ftplugins*"
msgstr ""

#: usr_05.txt:341
msgid ""
"The Vim distribution comes with a set of plugins for different filetypes "
"that\n"
"you can start using with this command: >"
msgstr ""

#: usr_05.txt:344
msgid "\t:filetype plugin on"
msgstr ""

#: usr_05.txt:346
msgid "That's all!  See |vimrc-filetype|."
msgstr ""

#: usr_05.txt:348
msgid ""
"If you are missing a plugin for a filetype you are using, or you found a\n"
"better one, you can add it.  There are two steps for adding a filetype "
"plugin:\n"
"1. Get a copy of the plugin.\n"
"2. Drop it in the right directory."
msgstr ""

#: usr_05.txt:354
msgid "GETTING A FILETYPE PLUGIN"
msgstr ""

#: usr_05.txt:356
msgid ""
"You can find them in the same places as the global plugins.  Watch out if "
"the\n"
"type of file is mentioned, then you know if the plugin is a global or a\n"
"filetype one.  The scripts in $VIMRUNTIME/macros are global ones, the "
"filetype\n"
"plugins are in $VIMRUNTIME/ftplugin."
msgstr ""

#: usr_05.txt:362
msgid "USING A FILETYPE PLUGIN\t\t\t\t\t*ftplugin-name*"
msgstr ""

#: usr_05.txt:364
msgid ""
"You can add a filetype plugin by dropping it in the right directory.  The\n"
"name of this directory is in the same directory mentioned above for global\n"
"plugins, but the last part is \"ftplugin\".  Suppose you have found a plugin "
"for\n"
"the \"stuff\" filetype, and you are on Unix.  Then you can move this file to "
"the\n"
"ftplugin directory: >"
msgstr ""

#: usr_05.txt:370
msgid "\tmv thefile ~/.vim/ftplugin/stuff.vim"
msgstr ""

#: usr_05.txt:372
msgid ""
"If that file already exists you already have a plugin for \"stuff\".  You "
"might\n"
"want to check if the existing plugin doesn't conflict with the one you are\n"
"adding.  If it's OK, you can give the new one another name: >"
msgstr ""

#: usr_05.txt:376
msgid "\tmv thefile ~/.vim/ftplugin/stuff_too.vim"
msgstr ""

#: usr_05.txt:378
msgid ""
"The underscore is used to separate the name of the filetype from the rest,\n"
"which can be anything.  If you use \"otherstuff.vim\" it wouldn't work, it "
"would\n"
"be loaded for the \"otherstuff\" filetype."
msgstr ""

#: usr_05.txt:382
msgid ""
"On MS-DOS you cannot use long filenames.  You would run into trouble if you\n"
"add a second plugin and the filetype has more than six characters.  You can\n"
"use an extra directory to get around this: >"
msgstr ""

#: usr_05.txt:386
msgid ""
"\tmkdir $VIM/vimfiles/ftplugin/fortran\n"
"\tcopy thefile $VIM/vimfiles/ftplugin/fortran/too.vim"
msgstr ""

#: usr_05.txt:389
msgid "The generic names for the filetype plugins are: >"
msgstr ""

#: usr_05.txt:391
msgid ""
"\tftplugin/<filetype>.vim\n"
"\tftplugin/<filetype>_<name>.vim\n"
"\tftplugin/<filetype>/<name>.vim"
msgstr ""

#: usr_05.txt:395
msgid ""
"Here \"<name>\" can be any name that you prefer.\n"
"Examples for the \"stuff\" filetype on Unix: >"
msgstr ""

#: usr_05.txt:398
msgid ""
"\t~/.vim/ftplugin/stuff.vim\n"
"\t~/.vim/ftplugin/stuff_def.vim\n"
"\t~/.vim/ftplugin/stuff/header.vim"
msgstr ""

#: usr_05.txt:402
msgid ""
"The <filetype> part is the name of the filetype the plugin is to be used "
"for.\n"
"Only files of this filetype will use the settings from the plugin.  The "
"<name>\n"
"part of the plugin file doesn't matter, you can use it to have several "
"plugins\n"
"for the same filetype.  Note that it must end in \".vim\"."
msgstr ""

#: usr_05.txt:408
msgid ""
"Further reading:\n"
"|filetype-plugins|\tDocumentation for the filetype plugins and information\n"
"\t\t\tabout how to avoid that mappings cause problems.\n"
"|load-plugins|\t\tWhen the global plugins are loaded during startup.\n"
"|ftplugin-overrule|\tOverruling the settings from a global plugin.\n"
"|write-plugin|\t\tHow to write a plugin script.\n"
"|plugin-details|\tFor more information about using plugins or when your\n"
"\t\t\tplugin doesn't work.\n"
"|new-filetype|\t\tHow to detect a new file type."
msgstr ""

#: usr_05.txt:418
msgid ""
"============================================================================"
"==\n"
"*05.5*\tAdding a help file\t\t*add-local-help* *matchit-install*"
msgstr ""

#: usr_05.txt:421
msgid ""
"If you are lucky, the plugin you installed also comes with a help file.  We\n"
"will explain how to install the help file, so that you can easily find help\n"
"for your new plugin.\n"
"   Let us use the \"matchit.vim\" plugin as an example (it is included with\n"
"Vim).  This plugin makes the \"%\" command jump to matching HTML tags,\n"
"if/else/endif in Vim scripts, etc.  Very useful, although it's not backwards\n"
"compatible (that's why it is not enabled by default).\n"
"   This plugin comes with documentation: \"matchit.txt\".  Let's first copy "
"the\n"
"plugin to the right directory.  This time we will do it from inside Vim, so\n"
"that we can use $VIMRUNTIME.  (You may skip some of the \"mkdir\" commands if\n"
"you already have the directory.) >"
msgstr ""

#: usr_05.txt:433
msgid ""
"\t:!mkdir ~/.vim\n"
"\t:!mkdir ~/.vim/plugin\n"
"\t:!cp $VIMRUNTIME/macros/matchit.vim ~/.vim/plugin"
msgstr ""

#: usr_05.txt:437
msgid "The \"cp\" command is for Unix, on MS-DOS you can use \"copy\"."
msgstr ""

#: usr_05.txt:439
msgid ""
"Now create a \"doc\" directory in one of the directories in 'runtimepath'. >"
msgstr ""

#: usr_05.txt:441
msgid "\t:!mkdir ~/.vim/doc"
msgstr ""

#: usr_05.txt:443
msgid "Copy the help file to the \"doc\" directory. >"
msgstr ""

#: usr_05.txt:445
msgid "\t:!cp $VIMRUNTIME/macros/matchit.txt ~/.vim/doc"
msgstr ""

#: usr_05.txt:447
msgid ""
"Now comes the trick, which allows you to jump to the subjects in the new "
"help\n"
"file: Generate the local tags file with the |:helptags| command. >"
msgstr ""

#: usr_05.txt:450
msgid "\t:helptags ~/.vim/doc"
msgstr ""

#: usr_05.txt:452
msgid "Now you can use the >"
msgstr ""

#: usr_05.txt:454
msgid "\t:help g%"
msgstr ""

#: usr_05.txt:456
msgid ""
"command to find help for \"g%\" in the help file you just added.  You can see "
"an\n"
"entry for the local help file when you do: >"
msgstr ""

#: usr_05.txt:459
msgid "\t:help local-additions"
msgstr ""

#: usr_05.txt:461
msgid ""
"The title lines from the local help files are automagically added to this\n"
"section.  There you can see which local help files have been added and jump "
"to\n"
"them through the tag."
msgstr ""

#: usr_05.txt:465
msgid "For writing a local help file, see |write-local-help|."
msgstr ""

#: usr_05.txt:467
msgid ""
"============================================================================"
"==\n"
"*05.6*\tThe option window"
msgstr ""

#: usr_05.txt:470
msgid ""
"If you are looking for an option that does what you want, you can search in\n"
"the help files here: |options|.  Another way is by using this command: >"
msgstr ""

#: usr_05.txt:473
msgid "\t:options"
msgstr ""

#: usr_05.txt:475
msgid ""
"This opens a new window, with a list of options with a one-line explanation.\n"
"The options are grouped by subject.  Move the cursor to a subject and press\n"
"<Enter> to jump there.  Press <Enter> again to jump back.  Or use CTRL-O."
msgstr ""

#: usr_05.txt:479
msgid ""
"You can change the value of an option.  For example, move to the \"displaying\n"
"text\" subject.  Then move the cursor down to this line:"
msgstr ""

#: usr_05.txt:482
msgid "\tset wrap\tnowrap ~"
msgstr ""

#: usr_05.txt:484
msgid "When you hit <Enter>, the line will change to:"
msgstr ""

#: usr_05.txt:486
msgid "\tset nowrap\twrap ~"
msgstr ""

#: usr_05.txt:488
msgid "The option has now been switched off."
msgstr ""

#: usr_05.txt:490
msgid ""
"Just above this line is a short description of the 'wrap' option.  Move the\n"
"cursor one line up to place it in this line.  Now hit <Enter> and you jump "
"to\n"
"the full help on the 'wrap' option."
msgstr ""

#: usr_05.txt:494
msgid ""
"For options that take a number or string argument you can edit the value.\n"
"Then press <Enter> to apply the new value.  For example, move the cursor a "
"few\n"
"lines up to this line:"
msgstr ""

#: usr_05.txt:498
msgid "\tset so=0 ~"
msgstr ""

#: usr_05.txt:500
msgid ""
"Position the cursor on the zero with \"$\".  Change it into a five with \"r5\".\n"
"Then press <Enter> to apply the new value.  When you now move the cursor\n"
"around you will notice that the text starts scrolling before you reach the\n"
"border.  This is what the 'scrolloff' option does, it specifies an offset\n"
"from the window border where scrolling starts."
msgstr ""

#: usr_05.txt:506
msgid ""
"============================================================================"
"==\n"
"*05.7*\tOften used options"
msgstr ""

#: usr_05.txt:509
msgid ""
"There are an awful lot of options.  Most of them you will hardly ever use.\n"
"Some of the more useful ones will be mentioned here.  Don't forget you can\n"
"find more help on these options with the \":help\" command, with single quotes\n"
"before and after the option name.  For example: >"
msgstr ""

#: usr_05.txt:514
msgid "\t:help 'wrap'"
msgstr ""

#: usr_05.txt:516
msgid ""
"In case you have messed up an option value, you can set it back to the\n"
"default by putting an ampersand (&) after the option name.  Example: >"
msgstr ""

#: usr_05.txt:519
msgid "\t:set iskeyword&"
msgstr ""

#: usr_05.txt:522
msgid "NOT WRAPPING LINES"
msgstr ""

#: usr_05.txt:524
msgid ""
"Vim normally wraps long lines, so that you can see all of the text.  "
"Sometimes\n"
"it's better to let the text continue right of the window.  Then you need to\n"
"scroll the text left-right to see all of a long line.  Switch wrapping off\n"
"with this command: >"
msgstr ""

#: usr_05.txt:529
msgid "\t:set nowrap"
msgstr ""

#: usr_05.txt:531
msgid ""
"Vim will automatically scroll the text when you move to text that is not\n"
"displayed.  To see a context of ten characters, do this: >"
msgstr ""

#: usr_05.txt:534
msgid "\t:set sidescroll=10"
msgstr ""

#: usr_05.txt:536
msgid "This doesn't change the text in the file, only the way it is displayed."
msgstr ""

#: usr_05.txt:539
msgid "WRAPPING MOVEMENT COMMANDS"
msgstr ""

#: usr_05.txt:541
msgid ""
"Most commands for moving around will stop moving at the start and end of a\n"
"line.  You can change that with the 'whichwrap' option.  This sets it to the\n"
"default value: >"
msgstr ""

#: usr_05.txt:545
msgid "\t:set whichwrap=b,s"
msgstr ""

#: usr_05.txt:547
msgid ""
"This allows the <BS> key, when used in the first position of a line, to move\n"
"the cursor to the end of the previous line.  And the <Space> key moves from\n"
"the end of a line to the start of the next one."
msgstr ""

#: usr_05.txt:551
msgid ""
"To allow the cursor keys <Left> and <Right> to also wrap, use this command: "
">"
msgstr ""

#: usr_05.txt:553
msgid "\t:set whichwrap=b,s,<,>"
msgstr ""

#: usr_05.txt:555
msgid ""
"This is still only for Normal mode.  To let <Left> and <Right> do this in\n"
"Insert mode as well: >"
msgstr ""

#: usr_05.txt:558
msgid "\t:set whichwrap=b,s,<,>,[,]"
msgstr ""

#: usr_05.txt:560
msgid "There are a few other flags that can be added, see 'whichwrap'."
msgstr ""

#: usr_05.txt:563
msgid "VIEWING TABS"
msgstr ""

#: usr_05.txt:565
msgid ""
"When there are tabs in a file, you cannot see where they are.  To make them\n"
"visible: >"
msgstr ""

#: usr_05.txt:568
msgid "\t:set list"
msgstr ""

#: usr_05.txt:570
msgid ""
"Now every tab is displayed as ^I.  And a $ is displayed at the end of each\n"
"line, so that you can spot trailing spaces that would otherwise go "
"unnoticed.\n"
"   A disadvantage is that this looks ugly when there are many Tabs in a "
"file.\n"
"If you have a color terminal, or are using the GUI, Vim can show the spaces\n"
"and tabs as highlighted characters.  Use the 'listchars' option: >"
msgstr ""

#: usr_05.txt:576
msgid "\t:set listchars=tab:>-,trail:-"
msgstr ""

#: usr_05.txt:578
msgid ""
"Now every tab will be displayed as \">---\" (with more or less \"-\") and "
"trailing\n"
"white space as \"-\".  Looks a lot better, doesn't it?"
msgstr ""

#: usr_05.txt:582
msgid "KEYWORDS"
msgstr ""

#: usr_05.txt:584
msgid ""
"The 'iskeyword' option specifies which characters can appear in a word: >"
msgstr ""

#: usr_05.txt:586
msgid ""
"\t:set iskeyword\n"
"<\t  iskeyword=@,48-57,_,192-255 ~"
msgstr ""

#: usr_05.txt:589
msgid ""
"The \"@\" stands for all alphabetic letters.  \"48-57\" stands for ASCII\n"
"characters 48 to 57, which are the numbers 0 to 9.  \"192-255\" are the\n"
"printable latin characters.\n"
"   Sometimes you will want to include a dash in keywords, so that commands\n"
"like \"w\" consider \"upper-case\" to be one word.  You can do it like this: >"
msgstr ""

#: usr_05.txt:595
msgid ""
"\t:set iskeyword+=-\n"
"\t:set iskeyword\n"
"<\t  iskeyword=@,48-57,_,192-255,- ~"
msgstr ""

#: usr_05.txt:599
msgid ""
"If you look at the new value, you will see that Vim has added a comma for "
"you.\n"
"   To remove a character use \"-=\".  For example, to remove the underscore: >"
msgstr ""

#: usr_05.txt:602
msgid ""
"\t:set iskeyword-=_\n"
"\t:set iskeyword\n"
"<\t  iskeyword=@,48-57,192-255,- ~"
msgstr ""

#: usr_05.txt:606
msgid "This time a comma is automatically deleted."
msgstr ""

#: usr_05.txt:609
msgid "ROOM FOR MESSAGES"
msgstr ""

#: usr_05.txt:611
msgid ""
"When Vim starts there is one line at the bottom that is used for messages.\n"
"When a message is long, it is either truncated, thus you can only see part "
"of\n"
"it, or the text scrolls and you have to press <Enter> to continue.\n"
"   You can set the 'cmdheight' option to the number of lines used for\n"
"messages.  Example: >"
msgstr ""

#: usr_05.txt:617
msgid "\t:set cmdheight=3"
msgstr ""

#: usr_05.txt:619
msgid "This does mean there is less room to edit text, thus it's a compromise."
msgstr ""

#: usr_05.txt:621
msgid ""
"============================================================================"
"=="
msgstr ""

#: usr_05.txt:623
msgid "Next chapter: |usr_06.txt|  Using syntax highlighting"
msgstr ""

#: usr_05.txt:625
msgid "Copyright: see |manual-copyright|  vim:tw=78:ts=8:ft=help:norl:"
msgstr ""
