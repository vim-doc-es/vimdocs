# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the Vim package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Vim 7.2\n"
"Report-Msgid-Bugs-To: vim@bugs.org\n"
"POT-Creation-Date: 2010-09-23 13:16+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: original/TXT/intro.txt:18 original/TXT/intro.txt:79
#: original/TXT/intro.txt:180 original/TXT/intro.txt:290
#: original/TXT/intro.txt:518 original/TXT/intro.txt:596
#: original/TXT/intro.txt:689 original/TXT/intro.txt:817
#: original/TXT/intro.txt:880 original/TXT/usr_toc.txt:7
#: original/TXT/usr_toc.txt:58 original/TXT/usr_toc.txt:172
#: original/TXT/usr_toc.txt:281 original/TXT/usr_toc.txt:340
#: original/TXT/usr_toc.txt:352 original/TXT/usr_01.txt:19
#: original/TXT/usr_01.txt:50 original/TXT/usr_01.txt:100
#: original/TXT/usr_01.txt:181 original/TXT/usr_02.txt:25
#: original/TXT/usr_02.txt:69 original/TXT/usr_02.txt:130
#: original/TXT/usr_02.txt:179 original/TXT/usr_02.txt:239
#: original/TXT/usr_02.txt:307 original/TXT/usr_02.txt:369
#: original/TXT/usr_02.txt:406 original/TXT/usr_02.txt:560
#: original/TXT/usr_03.txt:28 original/TXT/usr_03.txt:74
#: original/TXT/usr_03.txt:101 original/TXT/usr_03.txt:147
#: original/TXT/usr_03.txt:172 original/TXT/usr_03.txt:223
#: original/TXT/usr_03.txt:265 original/TXT/usr_03.txt:320
#: original/TXT/usr_03.txt:491 original/TXT/usr_03.txt:552
#: original/TXT/usr_03.txt:650 original/TXT/usr_04.txt:27
#: original/TXT/usr_04.txt:74 original/TXT/usr_04.txt:160
#: original/TXT/usr_04.txt:194 original/TXT/usr_04.txt:269
#: original/TXT/usr_04.txt:324 original/TXT/usr_04.txt:360
#: original/TXT/usr_04.txt:390 original/TXT/usr_04.txt:446
#: original/TXT/usr_04.txt:469 original/TXT/usr_04.txt:510
#: original/TXT/usr_05.txt:24 original/TXT/usr_05.txt:63
#: original/TXT/usr_05.txt:219 original/TXT/usr_05.txt:266
#: original/TXT/usr_05.txt:418 original/TXT/usr_05.txt:467
#: original/TXT/usr_05.txt:506 original/TXT/usr_05.txt:621
#: original/TXT/usr_06.txt:24 original/TXT/usr_06.txt:50
#: original/TXT/usr_06.txt:135 original/TXT/usr_06.txt:189
#: original/TXT/usr_06.txt:270 original/TXT/usr_06.txt:276
#: original/TXT/usr_07.txt:24 original/TXT/usr_07.txt:63
#: original/TXT/usr_07.txt:179 original/TXT/usr_07.txt:266
#: original/TXT/usr_07.txt:316 original/TXT/usr_07.txt:404
#: original/TXT/usr_07.txt:444 original/TXT/usr_07.txt:475
#: original/TXT/usr_08.txt:26 original/TXT/usr_08.txt:82
#: original/TXT/usr_08.txt:109 original/TXT/usr_08.txt:161
#: original/TXT/usr_08.txt:215 original/TXT/usr_08.txt:278
#: original/TXT/usr_08.txt:337 original/TXT/usr_08.txt:477
#: original/TXT/usr_08.txt:509 original/TXT/usr_08.txt:597
#: original/TXT/usr_09.txt:21 original/TXT/usr_09.txt:124
#: original/TXT/usr_09.txt:175 original/TXT/usr_09.txt:259
#: original/TXT/usr_09.txt:285 original/TXT/usr_10.txt:27
#: original/TXT/usr_10.txt:144 original/TXT/usr_10.txt:221
#: original/TXT/usr_10.txt:342 original/TXT/usr_10.txt:378
#: original/TXT/usr_10.txt:547 original/TXT/usr_10.txt:621
#: original/TXT/usr_10.txt:667 original/TXT/usr_10.txt:692
#: original/TXT/usr_10.txt:820 original/TXT/usr_11.txt:22
#: original/TXT/usr_11.txt:82 original/TXT/usr_11.txt:144
#: original/TXT/usr_11.txt:288 original/TXT/usr_11.txt:303
#: original/TXT/usr_12.txt:25 original/TXT/usr_12.txt:90
#: original/TXT/usr_12.txt:131 original/TXT/usr_12.txt:177
#: original/TXT/usr_12.txt:202 original/TXT/usr_12.txt:231
#: original/TXT/usr_12.txt:281 original/TXT/usr_12.txt:309
#: original/TXT/usr_12.txt:354 original/TXT/usr_20.txt:22
#: original/TXT/usr_20.txt:113 original/TXT/usr_20.txt:158
#: original/TXT/usr_20.txt:285 original/TXT/usr_20.txt:327
#: original/TXT/usr_20.txt:380 original/TXT/usr_21.txt:24
#: original/TXT/usr_21.txt:47 original/TXT/usr_21.txt:87
#: original/TXT/usr_21.txt:236 original/TXT/usr_21.txt:385
#: original/TXT/usr_21.txt:438 original/TXT/usr_21.txt:495
#: original/TXT/usr_22.txt:22 original/TXT/usr_22.txt:148
#: original/TXT/usr_22.txt:213 original/TXT/usr_22.txt:272
#: original/TXT/usr_22.txt:396 original/TXT/usr_23.txt:23
#: original/TXT/usr_23.txt:114 original/TXT/usr_23.txt:156
#: original/TXT/usr_23.txt:238 original/TXT/usr_23.txt:324
#: original/TXT/usr_23.txt:339 original/TXT/usr_24.txt:28
#: original/TXT/usr_24.txt:96 original/TXT/usr_24.txt:119
#: original/TXT/usr_24.txt:268 original/TXT/usr_24.txt:305
#: original/TXT/usr_24.txt:336 original/TXT/usr_24.txt:369
#: original/TXT/usr_24.txt:493 original/TXT/usr_24.txt:537
#: original/TXT/usr_24.txt:583 original/TXT/usr_24.txt:602
#: original/TXT/usr_25.txt:22 original/TXT/usr_25.txt:132
#: original/TXT/usr_25.txt:210 original/TXT/usr_25.txt:287
#: original/TXT/usr_25.txt:453 original/TXT/usr_25.txt:574
#: original/TXT/usr_26.txt:21 original/TXT/usr_26.txt:46
#: original/TXT/usr_26.txt:103 original/TXT/usr_26.txt:136
#: original/TXT/usr_26.txt:217 original/TXT/usr_27.txt:26
#: original/TXT/usr_27.txt:88 original/TXT/usr_27.txt:136
#: original/TXT/usr_27.txt:239 original/TXT/usr_27.txt:320
#: original/TXT/usr_27.txt:350 original/TXT/usr_27.txt:427
#: original/TXT/usr_27.txt:469 original/TXT/usr_27.txt:510
#: original/TXT/usr_27.txt:559 original/TXT/usr_28.txt:27
#: original/TXT/usr_28.txt:54 original/TXT/usr_28.txt:121
#: original/TXT/usr_28.txt:185 original/TXT/usr_28.txt:211
#: original/TXT/usr_28.txt:269 original/TXT/usr_28.txt:315
#: original/TXT/usr_28.txt:331 original/TXT/usr_28.txt:375
#: original/TXT/usr_28.txt:389 original/TXT/usr_28.txt:422
#: original/TXT/usr_29.txt:23 original/TXT/usr_29.txt:273
#: original/TXT/usr_29.txt:320 original/TXT/usr_29.txt:441
#: original/TXT/usr_29.txt:570 original/TXT/usr_29.txt:609
#: original/TXT/usr_30.txt:23 original/TXT/usr_30.txt:202
#: original/TXT/usr_30.txt:280 original/TXT/usr_30.txt:336
#: original/TXT/usr_30.txt:409 original/TXT/usr_30.txt:515
#: original/TXT/usr_30.txt:639 original/TXT/usr_31.txt:22
#: original/TXT/usr_31.txt:81 original/TXT/usr_31.txt:133
#: original/TXT/usr_31.txt:160 original/TXT/usr_31.txt:208
#: original/TXT/usr_31.txt:268
#, no-wrap
msgid "==============================================================================\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_toc.txt:4 original/TXT/usr_01.txt:4
#: original/TXT/usr_02.txt:4 original/TXT/usr_03.txt:4
#: original/TXT/usr_04.txt:4 original/TXT/usr_05.txt:4
#: original/TXT/usr_06.txt:4 original/TXT/usr_07.txt:4
#: original/TXT/usr_08.txt:4 original/TXT/usr_09.txt:4
#: original/TXT/usr_10.txt:4 original/TXT/usr_11.txt:4
#: original/TXT/usr_12.txt:4 original/TXT/usr_20.txt:4
#: original/TXT/usr_21.txt:4 original/TXT/usr_22.txt:4
#: original/TXT/usr_23.txt:4 original/TXT/usr_24.txt:4
#: original/TXT/usr_25.txt:4 original/TXT/usr_26.txt:4
#: original/TXT/usr_27.txt:4 original/TXT/usr_28.txt:4
#: original/TXT/usr_29.txt:4 original/TXT/usr_30.txt:4
#: original/TXT/usr_31.txt:4
#, no-wrap
msgid "\t\t     VIM USER MANUAL - by Bram Moolenaar\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_toc.txt:354 original/TXT/usr_01.txt:185
#: original/TXT/usr_02.txt:564 original/TXT/usr_03.txt:654
#: original/TXT/usr_04.txt:514 original/TXT/usr_05.txt:625
#: original/TXT/usr_06.txt:280 original/TXT/usr_07.txt:479
#: original/TXT/usr_08.txt:601 original/TXT/usr_09.txt:289
#: original/TXT/usr_10.txt:824 original/TXT/usr_11.txt:307
#: original/TXT/usr_12.txt:358 original/TXT/usr_20.txt:384
#: original/TXT/usr_21.txt:499 original/TXT/usr_22.txt:400
#: original/TXT/usr_23.txt:343 original/TXT/usr_24.txt:606
#: original/TXT/usr_25.txt:578 original/TXT/usr_26.txt:221
#: original/TXT/usr_27.txt:563 original/TXT/usr_28.txt:426
#: original/TXT/usr_29.txt:613 original/TXT/usr_30.txt:643
#: original/TXT/usr_31.txt:272
msgid "Copyright: see |manual-copyright| vim:tw=78:ts=8:ft=help:norl:"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:2
#, no-wrap
msgid "*usr_04.txt*\tFor Vim version 7.3.  Last change: 2008 Sep 06\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:6
#, no-wrap
msgid "\t\t\t     Making small changes\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:11
msgid ""
"This chapter shows you several ways of making corrections and moving text "
"around.  It teaches you the three basic ways to change text: operator-"
"motion, Visual mode and text objects."
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:22
#, no-wrap
msgid ""
"|04.1|\tOperators and motions\n"
"|04.2|\tChanging text\n"
"|04.3|\tRepeating a change\n"
"|04.4|\tVisual mode\n"
"|04.5|\tMoving text\n"
"|04.6|\tCopying text\n"
"|04.7|\tUsing the clipboard\n"
"|04.8|\tText objects\n"
"|04.9|\tReplace mode\n"
"|04.10|\tConclusion\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:26
#, no-wrap
msgid ""
"     Next chapter: |usr_05.txt|  Set your settings\n"
" Previous chapter: |usr_03.txt|  Moving around\n"
"Table of contents: |usr_toc.txt|\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:29
#, no-wrap
msgid "*04.1*\tOperators and motions\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:38
#, no-wrap
msgid ""
"In chapter 2 you learned the \"x\" command to delete a single character.  And\n"
"using a count: \"4x\" deletes four characters.\n"
"   The \"dw\" command deletes a word.  You may recognize the \"w\" command as the\n"
"move word command.  In fact, the \"d\" command may be followed by any motion\n"
"command, and it deletes from the current location to the place where the\n"
"cursor winds up.\n"
"   The \"4w\" command, for example, moves the cursor over four words.  The d4w\n"
"command deletes four words.\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:42
#, no-wrap
msgid ""
"\tTo err is human. To really foul up you need a computer. ~\n"
"\t\t\t ------------------>\n"
"\t\t\t\t d4w\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:44
#, no-wrap
msgid "\tTo err is human. you need a computer. ~\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:49
msgid ""
"Vim only deletes up to the position where the motion takes the cursor.  "
"That's because Vim knows that you probably don't want to delete the first "
"character of a word.  If you use the \"e\" command to move to the end of a "
"word, Vim guesses that you do want to include that last character:"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:53
#, no-wrap
msgid ""
"\tTo err is human. you need a computer. ~\n"
"\t\t\t-------->\n"
"\t\t\t   d2e\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:55
#, no-wrap
msgid "\tTo err is human. a computer. ~\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:59
msgid ""
"Whether the character under the cursor is included depends on the command "
"you used to move to that character.  The reference manual calls this "
"\"exclusive\" when the character isn't included and \"inclusive\" when it is."
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:63
msgid ""
"The \"$\" command moves to the end of a line.  The \"d$\" command deletes "
"from the cursor to the end of the line.  This is an inclusive motion, thus "
"the last character of the line is included in the delete operation:"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:67
#, no-wrap
msgid ""
"\tTo err is human. a computer. ~\n"
"\t\t       ------------>\n"
"\t\t\t    d$\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:69
#, no-wrap
msgid "\tTo err is human ~\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:73
msgid ""
"There is a pattern here: operator-motion.  You first type an operator "
"command.  For example, \"d\" is the delete operator.  Then you type a motion "
"command like \"4l\" or \"w\".  This way you can operate on any text you can "
"move over."
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:76
#, no-wrap
msgid "*04.2*\tChanging text\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:80
msgid ""
"Another operator is \"c\", change.  It acts just like the \"d\" operator, "
"except it leaves you in Insert mode.  For example, \"cw\" changes a word.  "
"Or more specifically, it deletes a word and then puts you in Insert mode."
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:84
#, no-wrap
msgid ""
"\tTo err is human ~\n"
"\t   ------->\n"
"\t     c2wbe<Esc>\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:86
#, no-wrap
msgid "\tTo be human ~\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:88
msgid "This \"c2wbe<Esc>\" contains these bits:"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:93
#, no-wrap
msgid ""
"\tc\tthe change operator\n"
"\t2w\tmove two words (they are deleted and Insert mode started)\n"
"\tbe\tinsert this text\n"
"\t<Esc>\tback to Normal mode\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:102
msgid ""
"If you have paid attention, you will have noticed something strange: The "
"space before \"human\" isn't deleted.  There is a saying that for every "
"problem there is an answer that is simple, clear, and wrong.  That is the "
"case with the example used here for the \"cw\" command.  The c operator "
"works just like the d operator, with one exception: \"cw\".  It actually "
"works like \"ce\", change to end of word.  Thus the space after the word "
"isn't included.  This is an exception that dates back to the old Vi.  Since "
"many people are used to it now, the inconsistency has remained in Vim."
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:105
msgid "MORE CHANGES"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:108
msgid ""
"Like \"dd\" deletes a whole line, \"cc\" changes a whole line.  It keeps the "
"existing indent (leading white space) though."
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:112
msgid ""
"Just like \"d$\" deletes until the end of the line, \"c$\" changes until the "
"end of the line.  It's like doing \"d$\" to delete the text and then \"a\" "
"to start Insert mode and append new text."
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:115
msgid "SHORTCUTS"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:118
msgid ""
"Some operator-motion commands are used so often that they have been given a "
"single letter command:"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:125
#, no-wrap
msgid ""
"\tx  stands for  dl  (delete character under the cursor)\n"
"\tX  stands for  dh  (delete character left of the cursor)\n"
"\tD  stands for  d$  (delete to end of the line)\n"
"\tC  stands for  c$  (change to end of the line)\n"
"\ts  stands for  cl  (change one character)\n"
"\tS  stands for  cc  (change a whole line)\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:128
msgid "WHERE TO PUT THE COUNT"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:134
msgid ""
"The commands \"3dw\" and \"d3w\" delete three words.  If you want to get "
"really picky about things, the first command, \"3dw\", deletes one word "
"three times; the command \"d3w\" deletes three words once.  This is a "
"difference without a distinction.  You can actually put in two counts, "
"however.  For example, \"3d2w\" deletes two words, repeated three times, for "
"a total of six words."
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:137
msgid "REPLACING WITH ONE CHARACTER"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:141
msgid ""
"The \"r\" command is not an operator.  It waits for you to type a character, "
"and will replace the character under the cursor with it.  You could do the "
"same with \"cl\" or with the \"s\" command, but with \"r\" you don't have to "
"press <Esc>"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:144
#, no-wrap
msgid ""
"\tthere is somerhing grong here ~\n"
"\trT\t     rt    rw\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:146
#, no-wrap
msgid "\tThere is something wrong here ~\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:149
msgid ""
"Using a count with \"r\" causes that many characters to be replaced with the "
"same character.  Example:"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:152
#, no-wrap
msgid ""
"\tThere is something wrong here ~\n"
"\t\t\t   5rx\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:154
#, no-wrap
msgid "\tThere is something xxxxx here ~\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:159
msgid ""
"To replace a character with a line break use \"r<Enter>\".  This deletes one "
"character and inserts a line break.  Using a count here only applies to the "
"number of characters deleted: \"4r<Enter>\" replaces four characters with "
"one line break."
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:162
#, no-wrap
msgid "*04.3*\tRepeating a change\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:170
msgid ""
"The \".\" command is one of the most simple yet powerful commands in Vim.  "
"It repeats the last change.  For instance, suppose you are editing an HTML "
"file and want to delete all the <B> tags.  You position the cursor on the "
"first < and delete the <B> with the command \"df>\".  You then go to the < "
"of the next </B> and kill it using the \".\" command.  The \".\" command "
"executes the last change command (in this case, \"df>\").  To delete another "
"tag, position the cursor on the < and use the \".\" command."
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:178
#, no-wrap
msgid ""
"\t\t\t      To <B>generate</B> a table of <B>contents ~\n"
"\tf<   find first <     --->\n"
"\tdf>  delete to >\t -->\n"
"\tf<   find next <\t   --------->\n"
"\t.    repeat df>\t\t\t    --->\n"
"\tf<   find next <\t\t       ------------->\n"
"\t.    repeat df>\t\t\t\t\t    -->\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:181
msgid ""
"The \".\" command works for all changes you make, except for the \"u"
"\" (undo), CTRL-R (redo) and commands that start with a colon (:)."
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:185
msgid ""
"Another example: You want to change the word \"four\" to \"five\".  It "
"appears several times in your text.  You can do this quickly with this "
"sequence of commands:"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:193
#, no-wrap
msgid ""
"\t/four<Enter>\tfind the first string \"four\"\n"
"\tcwfive<Esc>\tchange the word to \"five\"\n"
"\tn\t\tfind the next \"four\"\n"
"\t.\t\trepeat the change to \"five'\n"
"\tn\t\tfind the next \"four\"\n"
"\t.\t\trepeat the change\n"
"\t\t\tetc.\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:196
#, no-wrap
msgid "*04.4*\tVisual mode\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:200
msgid ""
"To delete simple items the operator-motion changes work quite well.  But "
"often it's not so easy to decide which command will move over the text you "
"want to change.  Then you can use Visual mode."
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:205
#, no-wrap
msgid ""
"You start Visual mode by pressing \"v\".  You move the cursor over the text you\n"
"want to work on.  While you do this, the text is highlighted.  Finally type\n"
"the operator command.\n"
"   For example, to delete from halfway one word to halfway another word:\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:209
#, no-wrap
msgid ""
"\t\tThis is an examination sample of visual mode ~\n"
"\t\t\t       ---------->\n"
"\t\t\t\t velllld\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:211
#, no-wrap
msgid "\t\tThis is an example of visual mode ~\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:215
msgid ""
"When doing this you don't really have to count how many times you have to "
"press \"l\" to end up in the right position.  You can immediately see what "
"text will be deleted when you press \"d\"."
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:218
msgid ""
"If at any time you decide you don't want to do anything with the highlighted "
"text, just press <Esc> and Visual mode will stop without doing anything."
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:221
msgid "SELECTING LINES"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:227
#, no-wrap
msgid ""
"If you want to work on whole lines, use \"V\" to start Visual mode.  You will\n"
"see right away that the whole line is highlighted, without moving around.\n"
"When you move left or right nothing changes.  When you move up or down the\n"
"selection is extended whole lines at a time.\n"
"   For example, select three lines with \"Vjj\":\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:235
#, no-wrap
msgid ""
"\t\t\t  +------------------------+\n"
"\t\t\t  | text more text\t   |\n"
"\t\t       >> | more text more text    | |\n"
"\tselected lines >> | text text text\t   | | Vjj\n"
"\t\t       >> | text more\t\t   | V\n"
"\t\t\t  | more text more\t   |\n"
"\t\t\t  +------------------------+\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:238
msgid "SELECTING BLOCKS"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:241
msgid ""
"If you want to work on a rectangular block of characters, use CTRL-V to "
"start Visual mode.  This is very useful when working on tables."
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:246
#, no-wrap
msgid ""
"\t\tname\t\tQ1\tQ2\tQ3\n"
"\t\tpierre\t\t123\t455\t234\n"
"\t\tjohn\t\t0\t90\t39\n"
"\t\tsteve\t\t392\t63\t334\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:252
msgid ""
"To delete the middle \"Q2\" column, move the cursor to the \"Q\" of \"Q2\".  "
"Press CTRL-V to start blockwise Visual mode.  Now move the cursor three "
"lines down with \"3j\" and to the next word with \"w\".  You can see the "
"first character of the last column is included.  To exclude it, use \"h\".  "
"Now press \"d\" and the middle column is gone."
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:255
msgid "GOING TO THE OTHER SIDE"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:261
msgid ""
"If you have selected some text in Visual mode, and discover that you need to "
"change the other end of the selection, use the \"o\" command (Hint: o for "
"other end).  The cursor will go to the other end, and you can move the "
"cursor to change where the selection starts.  Pressing \"o\" again brings "
"you back to the other end."
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:265
msgid ""
"When using blockwise selection, you have four corners.  \"o\" only takes you "
"to one of the other corners, diagonally.  Use \"O\" to move to the other "
"corner in the same line."
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:268
msgid ""
"Note that \"o\" and \"O\" in Visual mode work very differently from Normal "
"mode, where they open a new line below or above the cursor."
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:271
#, no-wrap
msgid "*04.5*\tMoving text\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:279
#, no-wrap
msgid ""
"When you delete something with the \"d\", \"x\", or another command, the text is\n"
"saved.  You can paste it back by using the p command.  (The Vim name for\n"
"this is put).\n"
"   Take a look at how this works.  First you will delete an entire line, by\n"
"putting the cursor on the line you want to delete and typing \"dd\".  Now you\n"
"move the cursor to where you want to put the line and use the \"p\" (put)\n"
"command.  The line is inserted on the line below the cursor.\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:283
#, no-wrap
msgid ""
"\ta line\t\ta line\t      a line\n"
"\tline 2\t  dd\tline 3\t  p   line 3\n"
"\tline 3\t\t\t      line 2\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:287
msgid ""
"Because you deleted an entire line, the \"p\" command placed the text line "
"below the cursor.  If you delete part of a line (a word, for instance), the "
"\"p\" command puts it just after the cursor."
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:291
#, no-wrap
msgid ""
"\tSome more boring try text to out commands. ~\n"
"\t\t\t ---->\n"
"\t\t\t  dw\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:295
#, no-wrap
msgid ""
"\tSome more boring text to out commands. ~\n"
"\t\t\t ------->\n"
"\t\t\t    welp\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:297
#, no-wrap
msgid "\tSome more boring text to try out commands. ~\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:300
msgid "MORE ON PUTTING"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:304
msgid ""
"The \"P\" command puts text like \"p\", but before the cursor.  When you "
"deleted a whole line with \"dd\", \"P\" will put it back above the cursor.  "
"When you deleted a word with \"dw\", \"P\" will put it back just before the "
"cursor."
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:306
msgid ""
"You can repeat putting as many times as you like.  The same text will be "
"used."
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:310
msgid ""
"You can use a count with \"p\" and \"P\".  The text will be repeated as many "
"times as specified with the count.  Thus \"dd\" and then \"3p\" puts three "
"copies of the same deleted line."
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:313
msgid "SWAPPING TWO CHARACTERS"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:320
msgid ""
"Frequently when you are typing, your fingers get ahead of your brain (or the "
"other way around?).  The result is a typo such as \"teh\" for \"the\".  Vim "
"makes it easy to correct such problems.  Just put the cursor on the e of "
"\"teh\" and execute the command \"xp\".  This works as follows: \"x\" "
"deletes the character e and places it in a register.  \"p\" puts the text "
"after the cursor, which is after the h."
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:323
#, no-wrap
msgid ""
"\tteh     th     the ~\n"
"\t x       p\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:326
#, no-wrap
msgid "*04.6*\tCopying text\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:334
#, no-wrap
msgid ""
"To copy text from one place to another, you could delete it, use \"u\" to undo\n"
"the deletion and then \"p\" to put it somewhere else.  There is an easier way:\n"
"yanking.  The \"y\" operator copies text into a register.  Then a \"p\" command\n"
"can be used to put it.\n"
"   Yanking is just a Vim name for copying.  The \"c\" letter was already used\n"
"for the change operator, and \"y\" was still available.  Calling this\n"
"operator \"yank\" made it easier to remember to use the \"y\" key.\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:337
msgid ""
"Since \"y\" is an operator, you use \"yw\" to yank a word.  A count is "
"possible as usual.  To yank two words use \"y2w\".  Example:"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:341
#, no-wrap
msgid ""
"\tlet sqr = LongVariable * ~\n"
"\t\t -------------->\n"
"\t\t       y2w\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:344
#, no-wrap
msgid ""
"\tlet sqr = LongVariable * ~\n"
"\t\t\t       p\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:346
#, no-wrap
msgid "\tlet sqr = LongVariable * LongVariable ~\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:349
msgid ""
"Notice that \"yw\" includes the white space after a word.  If you don't want "
"this, use \"ye\"."
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:354
msgid ""
"The \"yy\" command yanks a whole line, just like \"dd\" deletes a whole "
"line.  Unexpectedly, while \"D\" deletes from the cursor to the end of the "
"line, \"Y\" works like \"yy\", it yanks the whole line.  Watch out for this "
"inconsistency! Use \"y$\" to yank to the end of the line."
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:359
#, no-wrap
msgid ""
"\ta text line   yy\ta text line\t       a text line\n"
"\tline 2\t\t\tline 2\t\tp      line 2\n"
"\tlast line\t\tlast line\t       a text line\n"
"\t\t\t\t\t\t       last line\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:362
#, no-wrap
msgid "*04.7*\tUsing the clipboard\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:367
msgid ""
"If you are using the GUI version of Vim (gvim), you can find the \"Copy\" "
"item in the \"Edit\" menu.  First select some text with Visual mode, then "
"use the Edit/Copy menu.  The selected text is now copied to the clipboard.  "
"You can paste the text in other programs.  In Vim itself too."
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:371
msgid ""
"If you have copied text to the clipboard in another application, you can "
"paste it in Vim with the Edit/Paste menu.  This works in Normal mode and "
"Insert mode.  In Visual mode the selected text is replaced with the pasted "
"text."
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:376
msgid ""
"The \"Cut\" menu item deletes the text before it's put on the clipboard.  "
"The \"Copy\", \"Cut\" and \"Paste\" items are also available in the popup "
"menu (only when there is a popup menu, of course).  If your Vim has a "
"toolbar, you can also find these items there."
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:380
msgid ""
"If you are not using the GUI, or if you don't like using a menu, you have to "
"use another way.  You use the normal \"y\" (yank) and \"p\" (put) commands, "
"but prepend \"* (double-quote star) before it.  To copy a line to the "
"clipboard: >"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:382
#, no-wrap
msgid "\t\"*yy\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:384
msgid "To put text from the clipboard back into the text: >"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:386
#, no-wrap
msgid "\t\"*p\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:389
msgid ""
"This only works on versions of Vim that include clipboard support.  More "
"about the clipboard in section |09.3| and here: |clipboard|."
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:392
#, no-wrap
msgid "*04.8*\tText objects\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:396
msgid ""
"If the cursor is in the middle of a word and you want to delete that word, "
"you need to move back to its start before you can do \"dw\".  There is a "
"simpler way to do this: \"daw\"."
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:399
#, no-wrap
msgid ""
"\tthis is some example text. ~\n"
"\t\t       daw\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:401
#, no-wrap
msgid "\tthis is some text. ~\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:406
msgid ""
"The \"d\" of \"daw\" is the delete operator.  \"aw\" is a text object.  "
"Hint: \"aw\" stands for \"A Word\".  Thus \"daw\" is \"Delete A Word\".  To "
"be precise, the white space after the word is also deleted (the white space "
"before the word at the end of the line)."
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:413
#, no-wrap
msgid ""
"Using text objects is the third way to make changes in Vim.  We already had\n"
"operator-motion and Visual mode.  Now we add operator-text object.\n"
"   It is very similar to operator-motion, but instead of operating on the text\n"
"between the cursor position before and after a movement command, the text\n"
"object is used as a whole.  It doesn't matter where in the object the cursor\n"
"was.\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:415
msgid "To change a whole sentence use \"cis\".  Take this text:"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:419
#, no-wrap
msgid ""
"\tHello there.  This ~\n"
"\tis an example.  Just ~\n"
"\tsome text. ~\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:421
msgid "Move to the start of the second line, on \"is an\".  Now use \"cis\":"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:424
#, no-wrap
msgid ""
"\tHello there.    Just ~\n"
"\tsome text. ~\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:427
msgid ""
"The cursor is in between the blanks in the first line.  Now you type the new "
"sentence \"Another line.\":"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:430
#, no-wrap
msgid ""
"\tHello there.  Another line.  Just ~\n"
"\tsome text. ~\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:437
msgid ""
"\"cis\" consists of the \"c\" (change) operator and the \"is\" text object.  "
"This stands for \"Inner Sentence\".  There is also the \"as\" (a sentence) "
"object.  The difference is that \"as\" includes the white space after the "
"sentence and \"is\" doesn't.  If you would delete a sentence, you want to "
"delete the white space at the same time, thus use \"das\".  If you want to "
"type new text the white space can remain, thus you use \"cis\"."
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:443
msgid ""
"You can also use text objects in Visual mode.  It will include the text "
"object in the Visual selection.  Visual mode continues, thus you can do this "
"several times.  For example, start Visual mode with \"v\" and select a "
"sentence with \"as\".  Now you can repeat \"as\" to include more sentences.  "
"Finally you use an operator to do something with the selected sentences."
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:445
msgid "You can find a long list of text objects here: |text-objects|."
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:448
#, no-wrap
msgid "*04.9*\tReplace mode\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:453
#, no-wrap
msgid ""
"The \"R\" command causes Vim to enter replace mode.  In this mode, each\n"
"character you type replaces the one under the cursor.  This continues until\n"
"you type <Esc>.\n"
"   In this example you start Replace mode on the first \"t\" of \"text\":\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:456
#, no-wrap
msgid ""
"\tThis is text. ~\n"
"\t\tRinteresting.<Esc>\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:458
#, no-wrap
msgid "\tThis is interesting. ~\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:462
msgid ""
"You may have noticed that this command replaced 5 characters in the line "
"with twelve others.  The \"R\" command automatically extends the line if it "
"runs out of characters to replace.  It will not continue on the next line."
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:464
msgid ""
"You can switch between Insert mode and Replace mode with the <Insert> key."
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:468
msgid ""
"When you use <BS> (backspace) to make correction, you will notice that the "
"old text is put back.  Thus it works like an undo command for the last typed "
"character."
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:471
#, no-wrap
msgid "*04.10*\tConclusion\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:475
msgid ""
"The operators, movement commands and text objects give you the possibility "
"to make lots of combinations.  Now that you know how it works, you can use N "
"operators with M movement commands to make N * M commands!"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:477
msgid "You can find a list of operators here: |operator|"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:480
msgid ""
"For example, there are many other ways to delete pieces of text.  Here are a "
"few often used ones:"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:490
#, no-wrap
msgid ""
"x\tdelete character under the cursor (short for \"dl\")\n"
"X\tdelete character before the cursor (short for \"dh\")\n"
"D\tdelete from cursor to end of line (short for \"d$\")\n"
"dw\tdelete from cursor to next start of word\n"
"db\tdelete from cursor to previous start of word\n"
"diw\tdelete word under the cursor (excluding white space)\n"
"daw\tdelete word under the cursor (including white space)\n"
"dG\tdelete until the end of the file\n"
"dgg\tdelete until the start of the file\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:493
msgid ""
"If you use \"c\" instead of \"d\" they become change commands.  And with \"y"
"\" you yank the text.  And so forth."
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:497
msgid ""
"There are a few often used commands to make changes that didn't fit "
"somewhere else:"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:503
#, no-wrap
msgid ""
"\t~\tchange case of the character under the cursor, and move the\n"
"\t\tcursor to the next character.  This is not an operator (unless\n"
"\t\t'tildeop' is set), thus you can't use it with a motion\n"
"\t\tcommand.  It does work in Visual mode and changes case for\n"
"\t\tall the selected text then.\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:506
#, no-wrap
msgid ""
"\tI\tStart Insert mode after moving the cursor to the first\n"
"\t\tnon-blank in the line.\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:509
#, no-wrap
msgid ""
"\tA\tStart Insert mode after moving the cursor to the end of the\n"
"\t\tline.\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_04.txt:513
msgid "Next chapter: |usr_05.txt| Set your settings"
msgstr ""
