#. extracted from usr_02.txt
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2009-08-01 19:53+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Translate Toolkit 1.3.0\n"

#: usr_02.txt:1
msgid "*usr_02.txt*\tFor Vim version 7.2.  Last change: 2007 Feb 28"
msgstr ""

#: usr_02.txt:3
msgid "\t\t     VIM USER MANUAL - by Bram Moolenaar"
msgstr ""

#: usr_02.txt:5
msgid "\t\t\t    The first steps in Vim"
msgstr ""

#: usr_02.txt:8
msgid ""
"This chapter provides just enough information to edit a file with Vim.  Not\n"
"well or fast, but you can edit.  Take some time to practice with these\n"
"commands, they form the base for what follows."
msgstr ""

#: usr_02.txt:12
msgid ""
"|02.1|\tRunning Vim for the First Time\n"
"|02.2|\tInserting text\n"
"|02.3|\tMoving around\n"
"|02.4|\tDeleting characters\n"
"|02.5|\tUndo and Redo\n"
"|02.6|\tOther editing commands\n"
"|02.7|\tGetting out\n"
"|02.8|\tFinding help"
msgstr ""

#: usr_02.txt:21
msgid ""
"     Next chapter: |usr_03.txt|  Moving around\n"
" Previous chapter: |usr_01.txt|  About the manuals\n"
"Table of contents: |usr_toc.txt|"
msgstr ""

#: usr_02.txt:25
msgid ""
"============================================================================"
"==\n"
"*02.1*\tRunning Vim for the First Time"
msgstr ""

#: usr_02.txt:28
msgid "To start Vim, enter this command: >"
msgstr ""

#: usr_02.txt:30
msgid "\tgvim file.txt"
msgstr ""

#: usr_02.txt:32
msgid ""
"In UNIX you can type this at any command prompt.  If you are running "
"Microsoft\n"
"Windows, open an MS-DOS prompt window and enter the command.\n"
"   In either case, Vim starts editing a file called file.txt.  Because this\n"
"is a new file, you get a blank window. This is what your screen will look\n"
"like:"
msgstr ""

#: usr_02.txt:38
msgid ""
"\t+---------------------------------------+\n"
"\t|#\t\t\t\t\t|\n"
"\t|~\t\t\t\t\t|\n"
"\t|~\t\t\t\t\t|\n"
"\t|~\t\t\t\t\t|\n"
"\t|~\t\t\t\t\t|\n"
"\t|\"file.txt\" [New file]\t\t\t|\n"
"\t+---------------------------------------+\n"
"\t\t('#\" is the cursor position.)"
msgstr ""

#: usr_02.txt:48
msgid ""
"The tilde (~) lines indicate lines not in the file.  In other words, when "
"Vim\n"
"runs out of file to display, it displays tilde lines.  At the bottom of the\n"
"screen, a message line indicates the file is named file.txt and shows that "
"you\n"
"are creating a new file.  The message information is temporary and other\n"
"information overwrites it."
msgstr ""

#: usr_02.txt:55
msgid "THE VIM COMMAND"
msgstr ""

#: usr_02.txt:57
msgid ""
"The gvim command causes the editor to create a new window for editing.  If "
"you\n"
"use this command: >"
msgstr ""

#: usr_02.txt:60
msgid "\tvim file.txt"
msgstr ""

#: usr_02.txt:62
msgid ""
"the editing occurs inside your command window.  In other words, if you are\n"
"running inside an xterm, the editor uses your xterm window.  If you are "
"using\n"
"an MS-DOS command prompt window under Microsoft Windows, the editing occurs\n"
"inside this window.  The text in the window will look the same for both\n"
"versions, but with gvim you have extra features, like a menu bar.  More "
"about\n"
"that later."
msgstr ""

#: usr_02.txt:69
msgid ""
"============================================================================"
"==\n"
"*02.2*\tInserting text"
msgstr ""

#: usr_02.txt:72
msgid ""
"The Vim editor is a modal editor.  That means that the editor behaves\n"
"differently, depending on which mode you are in.  The two basic modes are\n"
"called Normal mode and Insert mode.  In Normal mode the characters you type\n"
"are commands.  In Insert mode the characters are inserted as text.\n"
"   Since you have just started Vim it will be in Normal mode.  To start "
"Insert\n"
"mode you type the \"i\" command (i for Insert).  Then you can enter\n"
"the text.  It will be inserted into the file.  Do not worry if you make\n"
"mistakes; you can correct them later.  To enter the following programmer's\n"
"limerick, this is what you type: >"
msgstr ""

#: usr_02.txt:82
msgid ""
"\tiA very intelligent turtle\n"
"\tFound programming UNIX a hurdle"
msgstr ""

#: usr_02.txt:85
msgid ""
"After typing \"turtle\" you press the <Enter> key to start a new line.  "
"Finally\n"
"you press the <Esc> key to stop Insert mode and go back to Normal mode.  You\n"
"now have two lines of text in your Vim window:"
msgstr ""

#: usr_02.txt:89
msgid ""
"\t+---------------------------------------+\n"
"\t|A very intelligent turtle\t\t|\n"
"\t|Found programming UNIX a hurdle\t|\n"
"\t|~\t\t\t\t\t|\n"
"\t|~\t\t\t\t\t|\n"
"\t|\t\t\t\t\t|\n"
"\t+---------------------------------------+"
msgstr ""

#: usr_02.txt:98
msgid "WHAT IS THE MODE?"
msgstr ""

#: usr_02.txt:100
msgid "To be able to see what mode you are in, type this command: >"
msgstr ""

#: usr_02.txt:102
msgid "\t:set showmode"
msgstr ""

#: usr_02.txt:104
msgid ""
"You will notice that when typing the colon Vim moves the cursor to the last\n"
"line of the window.  That's where you type colon commands (commands that "
"start\n"
"with a colon).  Finish this command by pressing the <Enter> key (all "
"commands\n"
"that start with a colon are finished this way).\n"
"   Now, if you type the \"i\" command Vim will display --INSERT-- at the "
"bottom\n"
"of the window.  This indicates you are in Insert mode."
msgstr ""

#: usr_02.txt:111
msgid ""
"\t+---------------------------------------+\n"
"\t|A very intelligent turtle\t\t|\n"
"\t|Found programming UNIX a hurdle\t|\n"
"\t|~\t\t\t\t\t|\n"
"\t|~\t\t\t\t\t|\n"
"\t|-- INSERT --\t\t\t\t|\n"
"\t+---------------------------------------+"
msgstr ""

#: usr_02.txt:119
msgid ""
"If you press <Esc> to go back to Normal mode the last line will be made "
"blank."
msgstr ""

#: usr_02.txt:122
msgid "GETTING OUT OF TROUBLE"
msgstr ""

#: usr_02.txt:124
msgid ""
"One of the problems for Vim novices is mode confusion, which is caused by\n"
"forgetting which mode you are in or by accidentally typing a command that\n"
"switches modes.  To get back to Normal mode, no matter what mode you are in,\n"
"press the <Esc> key.  Sometimes you have to press it twice.  If Vim beeps "
"back\n"
"at you, you already are in Normal mode."
msgstr ""

#: usr_02.txt:130
msgid ""
"============================================================================"
"==\n"
"*02.3*\tMoving around"
msgstr ""

#: usr_02.txt:133
msgid ""
"After you return to Normal mode, you can move around by using these keys:"
msgstr ""

#: usr_02.txt:135
msgid ""
"\th   left\t\t\t\t\t\t*hjkl*\n"
"\tj   down\n"
"\tk   up\n"
"\tl   right"
msgstr ""

#: usr_02.txt:140
msgid ""
"At first, it may appear that these commands were chosen at random.  After "
"all,\n"
"who ever heard of using l for right?  But actually, there is a very good\n"
"reason for these choices: Moving the cursor is the most common thing you do "
"in\n"
"an editor, and these keys are on the home row of your right hand.  In other\n"
"words, these commands are placed where you can type them the fastest\n"
"(especially when you type with ten fingers)."
msgstr ""

#: usr_02.txt:147
msgid ""
"\tNote:\n"
"\tYou can also move the cursor by using the arrow keys.  If you do,\n"
"\thowever, you greatly slow down your editing because to press the arrow\n"
"\tkeys, you must move your hand from the text keys to the arrow keys.\n"
"\tConsidering that you might be doing it hundreds of times an hour, this\n"
"\tcan take a significant amount of time.\n"
"\t   Also, there are keyboards which do not have arrow keys, or which\n"
"\tlocate them in unusual places; therefore, knowing the use of the hjkl\n"
"\tkeys helps in those situations."
msgstr ""

#: usr_02.txt:157
msgid ""
"One way to remember these commands is that h is on the left, l is on the\n"
"right and j points down.  In a picture: >"
msgstr ""

#: usr_02.txt:160
msgid ""
"\t\t       k\n"
"\t\t   h     l\n"
"\t\t     j"
msgstr ""

#: usr_02.txt:164
msgid ""
"The best way to learn these commands is by using them.  Use the \"i\" command "
"to\n"
"insert some more lines of text.  Then use the hjkl keys to move around and\n"
"insert a word somewhere.  Don't forget to press <Esc> to go back to Normal\n"
"mode.  The |vimtutor| is also a nice way to learn by doing."
msgstr ""

#: usr_02.txt:169
msgid "For Japanese users, Hiroshi Iwatani suggested using this:"
msgstr ""

#: usr_02.txt:171
msgid ""
"\t\t\tKomsomolsk\n"
"\t\t\t    ^\n"
"\t\t\t    |\n"
"\t   Huan Ho\t<--- --->  Los Angeles\n"
"\t(Yellow river)\t    |\n"
"\t\t\t    v\n"
"\t\t\t  Java (the island, not the programming language)"
msgstr ""

#: usr_02.txt:179
msgid ""
"============================================================================"
"==\n"
"*02.4*\tDeleting characters"
msgstr ""

#: usr_02.txt:182
msgid ""
"To delete a character, move the cursor over it and type \"x\".  (This is a\n"
"throwback to the old days of the typewriter, when you deleted things by "
"typing\n"
"xxxx over them.)  Move the cursor to the beginning of the first line, for\n"
"example, and type xxxxxxx (seven x's) to delete \"A very \".  The result "
"should\n"
"look like this:"
msgstr ""

#: usr_02.txt:188
msgid ""
"\t+---------------------------------------+\n"
"\t|intelligent turtle\t\t\t|\n"
"\t|Found programming UNIX a hurdle\t|\n"
"\t|~\t\t\t\t\t|\n"
"\t|~\t\t\t\t\t|\n"
"\t|\t\t\t\t\t|\n"
"\t+---------------------------------------+"
msgstr ""

#: usr_02.txt:196
msgid "Now you can insert new text, for example by typing: >"
msgstr ""

#: usr_02.txt:198
msgid "\tiA young <Esc>"
msgstr ""

#: usr_02.txt:200
msgid ""
"This begins an insert (the i), inserts the words \"A young\", and then exits\n"
"insert mode (the final <Esc>).\tThe result:"
msgstr ""

#: usr_02.txt:203
msgid ""
"\t+---------------------------------------+\n"
"\t|A young intelligent turtle\t\t|\n"
"\t|Found programming UNIX a hurdle\t|\n"
"\t|~\t\t\t\t\t|\n"
"\t|~\t\t\t\t\t|\n"
"\t|\t\t\t\t\t|\n"
"\t+---------------------------------------+"
msgstr ""

#: usr_02.txt:212
msgid "DELETING A LINE"
msgstr ""

#: usr_02.txt:214
msgid ""
"To delete a whole line use the \"dd\" command.  The following line will\n"
"then move up to fill the gap:"
msgstr ""

#: usr_02.txt:217
msgid ""
"\t+---------------------------------------+\n"
"\t|Found programming UNIX a hurdle\t|\n"
"\t|~\t\t\t\t\t|\n"
"\t|~\t\t\t\t\t|\n"
"\t|~\t\t\t\t\t|\n"
"\t|\t\t\t\t\t|\n"
"\t+---------------------------------------+"
msgstr ""

#: usr_02.txt:226
msgid "DELETING A LINE BREAK"
msgstr ""

#: usr_02.txt:228
msgid ""
"In Vim you can join two lines together, which means that the line break\n"
"between them is deleted.  The \"J\" command does this.\n"
"   Take these two lines:"
msgstr ""

#: usr_02.txt:232
msgid ""
"\tA young intelligent ~\n"
"\tturtle ~"
msgstr ""

#: usr_02.txt:235
msgid "Move the cursor to the first line and press \"J\":"
msgstr ""

#: usr_02.txt:237
msgctxt "usr_02.txt:237"
msgid "\tA young intelligent turtle ~"
msgstr ""

#: usr_02.txt:239
msgid ""
"============================================================================"
"==\n"
"*02.5*\tUndo and Redo"
msgstr ""

#: usr_02.txt:242
msgid ""
"Suppose you delete too much.  Well, you can type it in again, but an easier\n"
"way exists.  The \"u\" command undoes the last edit.  Take a look at this in\n"
"action: After using \"dd\" to delete the first line, \"u\" brings it back.\n"
"   Another one: Move the cursor to the A in the first line:"
msgstr ""

#: usr_02.txt:247
msgctxt "usr_02.txt:247"
msgid "\tA young intelligent turtle ~"
msgstr ""

#: usr_02.txt:249
msgid "Now type xxxxxxx to delete \"A young\".  The result is as follows:"
msgstr ""

#: usr_02.txt:251
msgid "\t intelligent turtle ~"
msgstr ""

#: usr_02.txt:253
msgid ""
"Type \"u\" to undo the last delete.  That delete removed the g, so the undo\n"
"restores the character."
msgstr ""

#: usr_02.txt:256
msgid "\tg intelligent turtle ~"
msgstr ""

#: usr_02.txt:258
msgid "The next u command restores the next-to-last character deleted:"
msgstr ""

#: usr_02.txt:260
msgid "\tng intelligent turtle ~"
msgstr ""

#: usr_02.txt:262
msgid "The next u command gives you the u, and so on:"
msgstr ""

#: usr_02.txt:264
msgid ""
"\tung intelligent turtle ~\n"
"\toung intelligent turtle ~\n"
"\tyoung intelligent turtle ~\n"
"\t young intelligent turtle ~\n"
"\tA young intelligent turtle ~"
msgstr ""

#: usr_02.txt:270
msgid ""
"\tNote:\n"
"\tIf you type \"u\" twice, and the result is that you get the same text\n"
"\tback, you have Vim configured to work Vi compatible.  Look here to fix\n"
"\tthis: |not-compatible|.\n"
"\t   This text assumes you work \"The Vim Way\".  You might prefer to use\n"
"\tthe good old Vi way, but you will have to watch out for small\n"
"\tdifferences in the text then."
msgstr ""

#: usr_02.txt:279
msgid "REDO"
msgstr ""

#: usr_02.txt:281
msgid ""
"If you undo too many times, you can press CTRL-R (redo) to reverse the\n"
"preceding command.  In other words, it undoes the undo.  To see this in\n"
"action, press CTRL-R twice.  The character A and the space after it "
"disappear:"
msgstr ""

#: usr_02.txt:285
msgid "\tyoung intelligent turtle ~"
msgstr ""

#: usr_02.txt:287
msgid ""
"There's a special version of the undo command, the \"U\" (undo line) command.\n"
"The undo line command undoes all the changes made on the last line that was\n"
"edited.  Typing this command twice cancels the preceding \"U\"."
msgstr ""

#: usr_02.txt:291
msgid ""
"\tA very intelligent turtle ~\n"
"\t  xxxx\t\t\t\tDelete very"
msgstr ""

#: usr_02.txt:294
msgid ""
"\tA intelligent turtle ~\n"
"\t\t      xxxxxx\t\tDelete turtle"
msgstr ""

#: usr_02.txt:297
msgid ""
"\tA intelligent ~\n"
"\t\t\t\t\tRestore line with \"U\"\n"
"\tA very intelligent turtle ~\n"
"\t\t\t\t\tUndo \"U\" with \"u\"\n"
"\tA intelligent ~"
msgstr ""

#: usr_02.txt:303
msgid ""
"The \"U\" command is a change by itself, which the \"u\" command undoes and "
"CTRL-R\n"
"redoes.  This might be a bit confusing.  Don't worry, with \"u\" and CTRL-R "
"you\n"
"can go to any of the situations you had.  More about that in section |32.1|."
msgstr ""

#: usr_02.txt:307
msgid ""
"============================================================================"
"==\n"
"*02.6*\tOther editing commands"
msgstr ""

#: usr_02.txt:310
msgid ""
"Vim has a large number of commands to change the text.  See |Q_in| and "
"below.\n"
"Here are a few often used ones."
msgstr ""

#: usr_02.txt:314
msgid "APPENDING"
msgstr ""

#: usr_02.txt:316
msgid ""
"The \"i\" command inserts a character before the character under the cursor.\n"
"That works fine; but what happens if you want to add stuff to the end of the\n"
"line?  For that you need to insert text after the cursor.  This is done with\n"
"the \"a\" (append) command.\n"
"   For example, to change the line"
msgstr ""

#: usr_02.txt:322
msgid ""
"\tand that's not saying much for the turtle. ~\n"
"to\n"
"\tand that's not saying much for the turtle!!! ~"
msgstr ""

#: usr_02.txt:326
msgid ""
"move the cursor over to the dot at the end of the line. Then type \"x\" to\n"
"delete the period.  The cursor is now positioned at the end of the line on "
"the\n"
"e in turtle.  Now type >"
msgstr ""

#: usr_02.txt:330
msgid "\ta!!!<Esc>"
msgstr ""

#: usr_02.txt:332
msgid "to append three exclamation points after the e in turtle:"
msgstr ""

#: usr_02.txt:334
msgid "\tand that's not saying much for the turtle!!! ~"
msgstr ""

#: usr_02.txt:337
msgid "OPENING UP A NEW LINE"
msgstr ""

#: usr_02.txt:339
msgid ""
"The \"o\" command creates a new, empty line below the cursor and puts Vim in\n"
"Insert mode.  Then you can type the text for the new line.\n"
"   Suppose the cursor is somewhere in the first of these two lines:"
msgstr ""

#: usr_02.txt:343
msgid ""
"\tA very intelligent turtle ~\n"
"\tFound programming UNIX a hurdle ~"
msgstr ""

#: usr_02.txt:346
msgid "If you now use the \"o\" command and type new text: >"
msgstr ""

#: usr_02.txt:348
msgid "\toThat liked using Vim<Esc>"
msgstr ""

#: usr_02.txt:350
msgid "The result is:"
msgstr ""

#: usr_02.txt:352
msgid ""
"\tA very intelligent turtle ~\n"
"\tThat liked using Vim ~\n"
"\tFound programming UNIX a hurdle ~"
msgstr ""

#: usr_02.txt:356
msgid "The \"O\" command (uppercase) opens a line above the cursor."
msgstr ""

#: usr_02.txt:359
msgid "USING A COUNT"
msgstr ""

#: usr_02.txt:361
msgid ""
"Suppose you want to move up nine lines.  You can type \"kkkkkkkkk\" or you can\n"
"enter the command \"9k\".  In fact, you can precede many commands with a "
"number.\n"
"Earlier in this chapter, for instance, you added three exclamation points to\n"
"the end of a line by typing \"a!!!<Esc>\".  Another way to do this is to use "
"the\n"
"command \"3a!<Esc>\".  The count of 3 tells the command that follows to triple\n"
"its effect.  Similarly, to delete three characters, use the command \"3x\".  "
"The\n"
"count always comes before the command it applies to."
msgstr ""

#: usr_02.txt:369
msgid ""
"============================================================================"
"==\n"
"*02.7*\tGetting out"
msgstr ""

#: usr_02.txt:372
msgid "To exit, use the \"ZZ\" command.  This command writes the file and exits."
msgstr ""

#: usr_02.txt:374
msgid ""
"\tNote:\n"
"\tUnlike many other editors, Vim does not automatically make a backup\n"
"\tfile.  If you type \"ZZ\", your changes are committed and there's no\n"
"\tturning back.  You can configure the Vim editor to produce backup\n"
"\tfiles, see |07.4|."
msgstr ""

#: usr_02.txt:381
msgid "DISCARDING CHANGES"
msgstr ""

#: usr_02.txt:383
msgid ""
"Sometimes you will make a sequence of changes and suddenly realize you were\n"
"better off before you started.  Not to worry; Vim has a\n"
"quit-and-throw-things-away command.  It is: >"
msgstr ""

#: usr_02.txt:387
msgid "\t:q!"
msgstr ""

#: usr_02.txt:389
msgid "Don't forget to press <Enter> to finish the command."
msgstr ""

#: usr_02.txt:391
msgid ""
"For those of you interested in the details, the three parts of this command\n"
"are the colon (:), which enters Command-line mode; the q command, which "
"tells\n"
"the editor to quit; and the override command modifier (!).\n"
"   The override command modifier is needed because Vim is reluctant to throw\n"
"away changes.  If you were to just type \":q\", Vim would display an error\n"
"message and refuse to exit:"
msgstr ""

#: usr_02.txt:398
msgctxt "usr_02.txt:398"
msgid "\tE37: No write since last change (use ! to override) ~"
msgstr ""

#: usr_02.txt:400
msgid ""
"By specifying the override, you are in effect telling Vim, \"I know that what\n"
"I'm doing looks stupid, but I'm a big boy and really want to do this.\""
msgstr ""

#: usr_02.txt:403
msgid ""
"If you want to continue editing with Vim: The \":e!\" command reloads the\n"
"original version of the file."
msgstr ""

#: usr_02.txt:406
msgid ""
"============================================================================"
"==\n"
"*02.8*\tFinding help"
msgstr ""

#: usr_02.txt:409
msgid ""
"Everything you always wanted to know can be found in the Vim help files.\n"
"Don't be afraid to ask!\n"
"   To get generic help use this command: >"
msgstr ""

#: usr_02.txt:413
msgid "\t:help"
msgstr ""

#: usr_02.txt:415
msgid ""
"You could also use the first function key <F1>.  If your keyboard has a "
"<Help>\n"
"key it might work as well.\n"
"   If you don't supply a subject, \":help\" displays the general help window.\n"
"The creators of Vim did something very clever (or very lazy) with the help\n"
"system: They made the help window a normal editing window.  You can use all\n"
"the normal Vim commands to move through the help information.  Therefore h, "
"j,\n"
"k, and l move left, down, up and right.\n"
"   To get out of the help window, use the same command you use to get out of\n"
"the editor: \"ZZ\".  This will only close the help window, not exit Vim."
msgstr ""

#: usr_02.txt:425
msgid ""
"As you read the help text, you will notice some text enclosed in vertical "
"bars\n"
"(for example, |help|).  This indicates a hyperlink.  If you position the\n"
"cursor anywhere between the bars and press CTRL-] (jump to tag), the help\n"
"system takes you to the indicated subject.  (For reasons not discussed here,\n"
"the Vim terminology for a hyperlink is tag.  So CTRL-] jumps to the location\n"
"of the tag given by the word under the cursor.)\n"
"   After a few jumps, you might want to go back.  CTRL-T (pop tag) takes you\n"
"back to the preceding position.  CTRL-O (jump to older position) also works\n"
"nicely here.\n"
"   At the top of the help screen, there is the notation *help.txt*.  This "
"name\n"
"between \"*\" characters is used by the help system to define a tag (hyperlink\n"
"destination).\n"
"   See |29.1| for details about using tags."
msgstr ""

#: usr_02.txt:439
msgid "To get help on a given subject, use the following command: >"
msgstr ""

#: usr_02.txt:441
msgid "\t:help {subject}"
msgstr ""

#: usr_02.txt:443
msgid "To get help on the \"x\" command, for example, enter the following: >"
msgstr ""

#: usr_02.txt:445
msgid "\t:help x"
msgstr ""

#: usr_02.txt:447
msgid "To find out how to delete text, use this command: >"
msgstr ""

#: usr_02.txt:449
msgid "\t:help deleting"
msgstr ""

#: usr_02.txt:451
msgid ""
"To get a complete index of all Vim commands, use the following command: >"
msgstr ""

#: usr_02.txt:453
msgid "\t:help index"
msgstr ""

#: usr_02.txt:455
msgid ""
"When you need to get help for a control character command (for example,\n"
"CTRL-A), you need to spell it with the prefix \"CTRL-\". >"
msgstr ""

#: usr_02.txt:458
msgid "\t:help CTRL-A"
msgstr ""

#: usr_02.txt:460
msgid ""
"The Vim editor has many different modes.  By default, the help system "
"displays\n"
"the normal-mode commands.  For example, the following command displays help\n"
"for the normal-mode CTRL-H command: >"
msgstr ""

#: usr_02.txt:464
msgid "\t:help CTRL-H"
msgstr ""

#: usr_02.txt:466
msgid ""
"To identify other modes, use a mode prefix.  If you want the help for the\n"
"insert-mode version of a command, use \"i_\".  For CTRL-H this gives you the\n"
"following command: >"
msgstr ""

#: usr_02.txt:470
msgid "\t:help i_CTRL-H"
msgstr ""

#: usr_02.txt:472
msgid ""
"When you start the Vim editor, you can use several command-line arguments.\n"
"These all begin with a dash (-).  To find what the -t argument does, for\n"
"example, use the command: >"
msgstr ""

#: usr_02.txt:476
msgid "\t:help -t"
msgstr ""

#: usr_02.txt:478
msgid ""
"The Vim editor has a number of options that enable you to configure and\n"
"customize the editor.  If you want help for an option, you need to enclose "
"it\n"
"in single quotation marks.  To find out what the 'number' option does, for\n"
"example, use the following command: >"
msgstr ""

#: usr_02.txt:483
msgid "\t:help 'number'"
msgstr ""

#: usr_02.txt:485
msgid "The table with all mode prefixes can be found here: |help-context|."
msgstr ""

#: usr_02.txt:487
msgid ""
"Special keys are enclosed in angle brackets.  To find help on the up-arrow "
"key\n"
"in Insert mode, for instance, use this command: >"
msgstr ""

#: usr_02.txt:490
msgid "\t:help i_<Up>"
msgstr ""

#: usr_02.txt:492
msgid "If you see an error message that you don't understand, for example:"
msgstr ""

#: usr_02.txt:494
msgctxt "usr_02.txt:494"
msgid "\tE37: No write since last change (use ! to override) ~"
msgstr ""

#: usr_02.txt:496
msgid "You can use the error ID at the start to find help about it: >"
msgstr ""

#: usr_02.txt:498
msgid "\t:help E37"
msgstr ""

#: usr_02.txt:501
msgid ""
"Summary: \t\t\t\t\t*help-summary*  >\n"
"\t:help\n"
"<\t\tGives you very general help.  Scroll down to see a list of all\n"
"\t\thelpfiles, including those added locally (i.e. not distributed\n"
"\t\twith Vim). >\n"
"\t:help user-toc.txt\n"
"<\t\tTable of contents of the User Manual. >\n"
"\t:help :subject\n"
"<\t\tEx-command \"subject\", for instance the following: >\n"
"\t:help :help\n"
"<\t\tHelp on getting help. >\n"
"\t:help abc\n"
"<\t\tnormal-mode command \"abc\". >\n"
"\t:help CTRL-B\n"
"<\t\tControl key <C-B> in Normal mode. >\n"
"\t:help i_abc\n"
"\t:help i_CTRL-B\n"
"<\t\tThe same in Insert mode. >\n"
"\t:help v_abc\n"
"\t:help v_CTRL-B\n"
"<\t\tThe same in Visual mode. >\n"
"\t:help c_abc\n"
"\t:help c_CTRL-B\n"
"<\t\tThe same in Command-line mode. >\n"
"\t:help 'subject'\n"
"<\t\tOption 'subject'. >\n"
"\t:help subject()\n"
"<\t\tFunction \"subject\". >\n"
"\t:help -subject\n"
"<\t\tCommand-line option \"-subject\". >\n"
"\t:help +subject\n"
"<\t\tCompile-time feature \"+subject'. >\n"
"\t:help EventName\n"
"<\t\tAutocommand event \"EventName\". >\n"
"\t:help digraphs.txt\n"
"<\t\tThe top of the helpfile \"digraph.txt\".\n"
"\t\tSimilarly for any other helpfile. >\n"
"\t:help pattern<Tab>\n"
"<\t\tFind a help tag starting with \"pattern\".  Repeat <Tab> for\n"
"\t\tothers. >\n"
"\t:help pattern<Ctrl-D>\n"
"<\t\tSee all possible help tag matches \"pattern\" at once. >\n"
"\t:helpgrep pattern\n"
"<\t\tSearch the whole text of all help files for pattern \"pattern\".\n"
"\t\tJumps to the first match.  Jump to other matches with: >\n"
"\t    :cn\n"
"<\t\t\tnext match >\n"
"\t    :cprev\n"
"\t    :cN\n"
"<\t\t\tprevious match >\n"
"\t    :cfirst\n"
"\t    :clast\n"
"<\t\t\tfirst or last match >\n"
"\t    :copen\n"
"\t    :cclose\n"
"<\t\t\topen/close the quickfix window; press <Enter> to jump\n"
"\t\t\tto the item under the cursor"
msgstr ""

#: usr_02.txt:560
msgid ""
"============================================================================"
"=="
msgstr ""

#: usr_02.txt:562
msgid "Next chapter: |usr_03.txt|  Moving around"
msgstr ""

#: usr_02.txt:564
msgid "Copyright: see |manual-copyright|  vim:tw=78:ts=8:ft=help:norl:"
msgstr ""
