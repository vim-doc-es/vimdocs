# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the Vim package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Vim 7.2\n"
"Report-Msgid-Bugs-To: vim@bugs.org\n"
"POT-Creation-Date: 2010-09-23 13:16+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: original/TXT/intro.txt:18 original/TXT/intro.txt:79
#: original/TXT/intro.txt:180 original/TXT/intro.txt:290
#: original/TXT/intro.txt:518 original/TXT/intro.txt:596
#: original/TXT/intro.txt:689 original/TXT/intro.txt:817
#: original/TXT/intro.txt:880 original/TXT/usr_toc.txt:7
#: original/TXT/usr_toc.txt:58 original/TXT/usr_toc.txt:172
#: original/TXT/usr_toc.txt:281 original/TXT/usr_toc.txt:340
#: original/TXT/usr_toc.txt:352 original/TXT/usr_01.txt:19
#: original/TXT/usr_01.txt:50 original/TXT/usr_01.txt:100
#: original/TXT/usr_01.txt:181 original/TXT/usr_02.txt:25
#: original/TXT/usr_02.txt:69 original/TXT/usr_02.txt:130
#: original/TXT/usr_02.txt:179 original/TXT/usr_02.txt:239
#: original/TXT/usr_02.txt:307 original/TXT/usr_02.txt:369
#: original/TXT/usr_02.txt:406 original/TXT/usr_02.txt:560
#: original/TXT/usr_03.txt:28 original/TXT/usr_03.txt:74
#: original/TXT/usr_03.txt:101 original/TXT/usr_03.txt:147
#: original/TXT/usr_03.txt:172 original/TXT/usr_03.txt:223
#: original/TXT/usr_03.txt:265 original/TXT/usr_03.txt:320
#: original/TXT/usr_03.txt:491 original/TXT/usr_03.txt:552
#: original/TXT/usr_03.txt:650 original/TXT/usr_04.txt:27
#: original/TXT/usr_04.txt:74 original/TXT/usr_04.txt:160
#: original/TXT/usr_04.txt:194 original/TXT/usr_04.txt:269
#: original/TXT/usr_04.txt:324 original/TXT/usr_04.txt:360
#: original/TXT/usr_04.txt:390 original/TXT/usr_04.txt:446
#: original/TXT/usr_04.txt:469 original/TXT/usr_04.txt:510
#: original/TXT/usr_05.txt:24 original/TXT/usr_05.txt:63
#: original/TXT/usr_05.txt:219 original/TXT/usr_05.txt:266
#: original/TXT/usr_05.txt:418 original/TXT/usr_05.txt:467
#: original/TXT/usr_05.txt:506 original/TXT/usr_05.txt:621
#: original/TXT/usr_06.txt:24 original/TXT/usr_06.txt:50
#: original/TXT/usr_06.txt:135 original/TXT/usr_06.txt:189
#: original/TXT/usr_06.txt:270 original/TXT/usr_06.txt:276
#: original/TXT/usr_07.txt:24 original/TXT/usr_07.txt:63
#: original/TXT/usr_07.txt:179 original/TXT/usr_07.txt:266
#: original/TXT/usr_07.txt:316 original/TXT/usr_07.txt:404
#: original/TXT/usr_07.txt:444 original/TXT/usr_07.txt:475
#: original/TXT/usr_08.txt:26 original/TXT/usr_08.txt:82
#: original/TXT/usr_08.txt:109 original/TXT/usr_08.txt:161
#: original/TXT/usr_08.txt:215 original/TXT/usr_08.txt:278
#: original/TXT/usr_08.txt:337 original/TXT/usr_08.txt:477
#: original/TXT/usr_08.txt:509 original/TXT/usr_08.txt:597
#: original/TXT/usr_09.txt:21 original/TXT/usr_09.txt:124
#: original/TXT/usr_09.txt:175 original/TXT/usr_09.txt:259
#: original/TXT/usr_09.txt:285 original/TXT/usr_10.txt:27
#: original/TXT/usr_10.txt:144 original/TXT/usr_10.txt:221
#: original/TXT/usr_10.txt:342 original/TXT/usr_10.txt:378
#: original/TXT/usr_10.txt:547 original/TXT/usr_10.txt:621
#: original/TXT/usr_10.txt:667 original/TXT/usr_10.txt:692
#: original/TXT/usr_10.txt:820 original/TXT/usr_11.txt:22
#: original/TXT/usr_11.txt:82 original/TXT/usr_11.txt:144
#: original/TXT/usr_11.txt:288 original/TXT/usr_11.txt:303
#: original/TXT/usr_12.txt:25 original/TXT/usr_12.txt:90
#: original/TXT/usr_12.txt:131 original/TXT/usr_12.txt:177
#: original/TXT/usr_12.txt:202 original/TXT/usr_12.txt:231
#: original/TXT/usr_12.txt:281 original/TXT/usr_12.txt:309
#: original/TXT/usr_12.txt:354 original/TXT/usr_20.txt:22
#: original/TXT/usr_20.txt:113 original/TXT/usr_20.txt:158
#: original/TXT/usr_20.txt:285 original/TXT/usr_20.txt:327
#: original/TXT/usr_20.txt:380 original/TXT/usr_21.txt:24
#: original/TXT/usr_21.txt:47 original/TXT/usr_21.txt:87
#: original/TXT/usr_21.txt:236 original/TXT/usr_21.txt:385
#: original/TXT/usr_21.txt:438 original/TXT/usr_21.txt:495
#: original/TXT/usr_22.txt:22 original/TXT/usr_22.txt:148
#: original/TXT/usr_22.txt:213 original/TXT/usr_22.txt:272
#: original/TXT/usr_22.txt:396 original/TXT/usr_23.txt:23
#: original/TXT/usr_23.txt:114 original/TXT/usr_23.txt:156
#: original/TXT/usr_23.txt:238 original/TXT/usr_23.txt:324
#: original/TXT/usr_23.txt:339 original/TXT/usr_24.txt:28
#: original/TXT/usr_24.txt:96 original/TXT/usr_24.txt:119
#: original/TXT/usr_24.txt:268 original/TXT/usr_24.txt:305
#: original/TXT/usr_24.txt:336 original/TXT/usr_24.txt:369
#: original/TXT/usr_24.txt:493 original/TXT/usr_24.txt:537
#: original/TXT/usr_24.txt:583 original/TXT/usr_24.txt:602
#: original/TXT/usr_25.txt:22 original/TXT/usr_25.txt:132
#: original/TXT/usr_25.txt:210 original/TXT/usr_25.txt:287
#: original/TXT/usr_25.txt:453 original/TXT/usr_25.txt:574
#: original/TXT/usr_26.txt:21 original/TXT/usr_26.txt:46
#: original/TXT/usr_26.txt:103 original/TXT/usr_26.txt:136
#: original/TXT/usr_26.txt:217 original/TXT/usr_27.txt:26
#: original/TXT/usr_27.txt:88 original/TXT/usr_27.txt:136
#: original/TXT/usr_27.txt:239 original/TXT/usr_27.txt:320
#: original/TXT/usr_27.txt:350 original/TXT/usr_27.txt:427
#: original/TXT/usr_27.txt:469 original/TXT/usr_27.txt:510
#: original/TXT/usr_27.txt:559 original/TXT/usr_28.txt:27
#: original/TXT/usr_28.txt:54 original/TXT/usr_28.txt:121
#: original/TXT/usr_28.txt:185 original/TXT/usr_28.txt:211
#: original/TXT/usr_28.txt:269 original/TXT/usr_28.txt:315
#: original/TXT/usr_28.txt:331 original/TXT/usr_28.txt:375
#: original/TXT/usr_28.txt:389 original/TXT/usr_28.txt:422
#: original/TXT/usr_29.txt:23 original/TXT/usr_29.txt:273
#: original/TXT/usr_29.txt:320 original/TXT/usr_29.txt:441
#: original/TXT/usr_29.txt:570 original/TXT/usr_29.txt:609
#: original/TXT/usr_30.txt:23 original/TXT/usr_30.txt:202
#: original/TXT/usr_30.txt:280 original/TXT/usr_30.txt:336
#: original/TXT/usr_30.txt:409 original/TXT/usr_30.txt:515
#: original/TXT/usr_30.txt:639 original/TXT/usr_31.txt:22
#: original/TXT/usr_31.txt:81 original/TXT/usr_31.txt:133
#: original/TXT/usr_31.txt:160 original/TXT/usr_31.txt:208
#: original/TXT/usr_31.txt:268
#, no-wrap
msgid "==============================================================================\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_toc.txt:4 original/TXT/usr_01.txt:4
#: original/TXT/usr_02.txt:4 original/TXT/usr_03.txt:4
#: original/TXT/usr_04.txt:4 original/TXT/usr_05.txt:4
#: original/TXT/usr_06.txt:4 original/TXT/usr_07.txt:4
#: original/TXT/usr_08.txt:4 original/TXT/usr_09.txt:4
#: original/TXT/usr_10.txt:4 original/TXT/usr_11.txt:4
#: original/TXT/usr_12.txt:4 original/TXT/usr_20.txt:4
#: original/TXT/usr_21.txt:4 original/TXT/usr_22.txt:4
#: original/TXT/usr_23.txt:4 original/TXT/usr_24.txt:4
#: original/TXT/usr_25.txt:4 original/TXT/usr_26.txt:4
#: original/TXT/usr_27.txt:4 original/TXT/usr_28.txt:4
#: original/TXT/usr_29.txt:4 original/TXT/usr_30.txt:4
#: original/TXT/usr_31.txt:4
#, no-wrap
msgid "\t\t     VIM USER MANUAL - by Bram Moolenaar\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_toc.txt:354 original/TXT/usr_01.txt:185
#: original/TXT/usr_02.txt:564 original/TXT/usr_03.txt:654
#: original/TXT/usr_04.txt:514 original/TXT/usr_05.txt:625
#: original/TXT/usr_06.txt:280 original/TXT/usr_07.txt:479
#: original/TXT/usr_08.txt:601 original/TXT/usr_09.txt:289
#: original/TXT/usr_10.txt:824 original/TXT/usr_11.txt:307
#: original/TXT/usr_12.txt:358 original/TXT/usr_20.txt:384
#: original/TXT/usr_21.txt:499 original/TXT/usr_22.txt:400
#: original/TXT/usr_23.txt:343 original/TXT/usr_24.txt:606
#: original/TXT/usr_25.txt:578 original/TXT/usr_26.txt:221
#: original/TXT/usr_27.txt:563 original/TXT/usr_28.txt:426
#: original/TXT/usr_29.txt:613 original/TXT/usr_30.txt:643
#: original/TXT/usr_31.txt:272
msgid "Copyright: see |manual-copyright| vim:tw=78:ts=8:ft=help:norl:"
msgstr ""

#. type: Plain text
#: original/TXT/usr_08.txt:153 original/TXT/usr_24.txt:168
msgid "OPTIONS"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:2
#, no-wrap
msgid "*usr_24.txt*\tFor Vim version 7.3.  Last change: 2006 Jul 23\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:6
#, no-wrap
msgid "\t\t\t     Inserting quickly\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:12
msgid ""
"When entering text, Vim offers various ways to reduce the number of "
"keystrokes and avoid typing mistakes.  Use Insert mode completion to repeat "
"previously typed words.  Abbreviate long words to short ones.  Type "
"characters that aren't on your keyboard."
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:23
#, no-wrap
msgid ""
"|24.1|\tMaking corrections\n"
"|24.2|\tShowing matches\n"
"|24.3|\tCompletion\n"
"|24.4|\tRepeating an insert\n"
"|24.5|\tCopying from another line\n"
"|24.6|\tInserting a register\n"
"|24.7|\tAbbreviations\n"
"|24.8|\tEntering special characters\n"
"|24.9|\tDigraphs\n"
"|24.10|\tNormal mode commands\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:27
#, no-wrap
msgid ""
"     Next chapter: |usr_25.txt|  Editing formatted text\n"
" Previous chapter: |usr_23.txt|  Editing other files\n"
"Table of contents: |usr_toc.txt|\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:30
#, no-wrap
msgid "*24.1*\tMaking corrections\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:35
#, no-wrap
msgid ""
"The <BS> key was already mentioned.  It deletes the character just before the\n"
"cursor.  The <Del> key does the same for the character under (after) the\n"
"cursor.\n"
"   When you typed a whole word wrong, use CTRL-W:\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:39
#, no-wrap
msgid ""
"\tThe horse had fallen to the sky ~\n"
"\t\t\t\t       CTRL-W\n"
"\tThe horse had fallen to the ~\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:44
msgid ""
"If you really messed up a line and want to start over, use CTRL-U to delete "
"it.  This keeps the text after the cursor and the indent.  Only the text "
"from the first non-blank to the cursor is deleted.  With the cursor on the "
"\"f\" of \"fallen\" in the next line pressing CTRL-U does this:"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:48
#, no-wrap
msgid ""
"\tThe horse had fallen to the ~\n"
"\t\t      CTRL-U\n"
"\tfallen to the ~\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:51
msgid ""
"When you spot a mistake a few words back, you need to move the cursor there "
"to correct it.  For example, you typed this:"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:53
#, no-wrap
msgid "\tThe horse had follen to the ground ~\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:56
msgid ""
"You need to change \"follen\" to \"fallen\".  With the cursor at the end, "
"you would type this to correct it: >"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:58
#, no-wrap
msgid "\t\t\t\t\t<Esc>4blraA\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:64
#, no-wrap
msgid ""
"<\tget out of Insert mode\t\t<Esc>\n"
"\tfour words back\t\t\t     4b\n"
"\tmove on top of the \"o\"\t\t       l\n"
"\treplace with \"a\"\t\t\tra\n"
"\trestart Insert mode\t\t\t  A\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:66
msgid "Another way to do this: >"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:68
#, no-wrap
msgid "\t\t<C-Left><C-Left><C-Left><C-Left><Right><Del>a<End>\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:74
#, no-wrap
msgid ""
"<\tfour words back\t\t     <C-Left><C-Left><C-Left><C-Left>\n"
"\tmove on top of the \"o\"\t\t\t<Right>\n"
"\tdelete the \"o\"\t\t\t\t       <Del>\n"
"\tinsert an \"a\"\t\t\t\t\t    a\n"
"\tgo to end of the line\t\t\t\t     <End>\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:82
#, no-wrap
msgid ""
"This uses special keys to move around, while remaining in Insert mode.  This\n"
"resembles what you would do in a modeless editor.  It's easier to remember,\n"
"but takes more time (you have to move your hand from the letters to the cursor\n"
"keys, and the <End> key is hard to press without looking at the keyboard).\n"
"   These special keys are most useful when writing a mapping that doesn't\n"
"leave Insert mode.  The extra typing doesn't matter then.\n"
"   An overview of the keys you can use in Insert mode:\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:93
#, no-wrap
msgid ""
"\t<C-Home>\tto start of the file\n"
"\t<PageUp>\ta whole screenful up\n"
"\t<Home>\t\tto start of line\n"
"\t<S-Left>\tone word left\n"
"\t<C-Left>\tone word left\n"
"\t<S-Right>\tone word right\n"
"\t<C-Right>\tone word right\n"
"\t<End>\t\tto end of the line\n"
"\t<PageDown>\ta whole screenful down\n"
"\t<C-End>\t\tto end of the file\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:95
msgid "There are a few more, see |ins-special-special|."
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:98
#, no-wrap
msgid "*24.2*\tShowing matches\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:101
msgid ""
"When you type a ) it would be nice to see with which ( it matches.  To make "
"Vim do that use this command: >"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:103
#, no-wrap
msgid "\t:set showmatch\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:114
#, no-wrap
msgid ""
"When you now type a text like \"(example)\", as soon as you type the ) Vim will\n"
"briefly move the cursor to the matching (, keep it there for half a second,\n"
"and move back to where you were typing.\n"
"   In case there is no matching (, Vim will beep.  Then you know that you\n"
"might have forgotten the ( somewhere, or typed a ) too many.\n"
"   The match will also be shown for [] and {} pairs.  You don't have to wait\n"
"with typing the next character, as soon as Vim sees it the cursor will move\n"
"back and inserting continues as before.\n"
"   You can change the time Vim waits with the 'matchtime' option.  For\n"
"example, to make Vim wait one and a half second: >\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:116
#, no-wrap
msgid "\t:set matchtime=15\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:118
msgid "The time is specified in tenths of a second."
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:121
#, no-wrap
msgid "*24.3*\tCompletion\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:126
#, no-wrap
msgid ""
"Vim can automatically complete words on insertion.  You type the first part of\n"
"a word, press CTRL-P, and Vim guesses the rest.\n"
"   Suppose, for example, that you are creating a C program and want to type in\n"
"the following:\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:128
#, no-wrap
msgid "\ttotal = ch_array[0] + ch_array[1] + ch_array[2]; ~\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:130
msgid "You start by entering the following:"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:132
#, no-wrap
msgid "\ttotal = ch_array[0] + ch_ ~\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:137
msgid ""
"At this point, you tell Vim to complete the word using the command CTRL-P.  "
"Vim searches for a word that starts with what's in front of the cursor.  In "
"this case, it is \"ch_\", which matches with the word ch_array.  So typing "
"CTRL-P gives you the following:"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:139
#, no-wrap
msgid "\ttotal = ch_array[0] + ch_array ~\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:141
msgid "After a little more typing, you get this (ending in a space):"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:143
#, no-wrap
msgid "\ttotal = ch_array[0] + ch_array[1] +  ~\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:151
msgid ""
"If you now type CTRL-P Vim will search again for a word that completes the "
"word before the cursor.  Since there is nothing in front of the cursor, it "
"finds the first word backwards, which is \"ch_array\".  Typing CTRL-P again "
"gives you the next word that matches, in this case \"total\".  A third CTRL-"
"P searches further back.  If there is nothing else, it causes the editor to "
"run out of words, so it returns to the original text, which is nothing.  A "
"fourth CTRL-P causes the editor to start over again with \"ch_array\"."
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:155
msgid ""
"To search forward, use CTRL-N.  Since the search wraps around the end of the "
"file, CTRL-N and CTRL-P will find the same matches, but in a different "
"sequence.  Hint: CTRL-N is Next-match and CTRL-P is Previous-match."
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:158
msgid ""
"The Vim editor goes through a lot of effort to find words to complete.  By "
"default, it searches the following places:"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:165
#, no-wrap
msgid ""
"\t1. Current file\n"
"\t2. Files in other windows\n"
"\t3. Other loaded files (hidden buffers)\n"
"\t4. Files which are not loaded (inactive buffers)\n"
"\t5. Tag files\n"
"\t6. All files #included by the current file\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:170
msgid "You can customize the search order with the 'complete' option."
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:173
msgid ""
"The 'ignorecase' option is used.  When it is set, case differences are "
"ignored when searching for matches."
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:178
msgid ""
"A special option for completion is 'infercase'.  This is useful to find "
"matches while ignoring case ('ignorecase' must be set) but still using the "
"case of the word typed so far.  Thus if you type \"For\" and Vim finds a "
"match \"fortunately\", it will result in \"Fortunately\"."
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:181
msgid "COMPLETING SPECIFIC ITEMS"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:184
msgid ""
"If you know what you are looking for, you can use these commands to complete "
"with a certain type of item:"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:193
#, no-wrap
msgid ""
"\tCTRL-X CTRL-F\t\tfile names\n"
"\tCTRL-X CTRL-L\t\twhole lines\n"
"\tCTRL-X CTRL-D\t\tmacro definitions (also in included files)\n"
"\tCTRL-X CTRL-I\t\tcurrent and included files\n"
"\tCTRL-X CTRL-K\t\twords from a dictionary\n"
"\tCTRL-X CTRL-T\t\twords from a thesaurus\n"
"\tCTRL-X CTRL-]\t\ttags\n"
"\tCTRL-X CTRL-V\t\tVim command line\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:197
#, no-wrap
msgid ""
"After each of them CTRL-N can be used to find the next match, CTRL-P to find\n"
"the previous match.\n"
"   More information for each of these commands here: |ins-completion|.\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:200
msgid "COMPLETING FILE NAMES"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:206
#, no-wrap
msgid ""
"Let's take CTRL-X CTRL-F as an example.  This will find file names.  It scans\n"
"the current directory for files and displays each one that matches the word in\n"
"front of the cursor.\n"
"   Suppose, for example, that you have the following files in the current\n"
"directory:\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:208
#, no-wrap
msgid "\tmain.c  sub_count.c  sub_done.c  sub_exit.c\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:210
msgid "Now enter Insert mode and start typing:"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:212
#, no-wrap
msgid "\tThe exit code is in the file sub ~\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:218
msgid ""
"At this point, you enter the command CTRL-X CTRL-F.  Vim now completes the "
"current word \"sub\" by looking at the files in the current directory.  The "
"first match is sub_count.c.  This is not the one you want, so you match the "
"next file by typing CTRL-N.  This match is sub_done.c.  Typing CTRL-N again "
"takes you to sub_exit.c.  The results:"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:220
#, no-wrap
msgid "\tThe exit code is in the file sub_exit.c ~\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:224
msgid ""
"If the file name starts with / (Unix) or C:\\ (MS-Windows) you can find all "
"files in the file system.  For example, type \"/u\" and CTRL-X CTRL-F.  This "
"will match \"/usr\" (this is on Unix):"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:226
#, no-wrap
msgid "\tthe file is found in /usr/ ~\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:229
msgid ""
"If you now press CTRL-N you go back to \"/u\".  Instead, to accept the \"/"
"usr/\" and go one directory level deeper, use CTRL-X CTRL-F again:"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:231
#, no-wrap
msgid "\tthe file is found in /usr/X11R6/ ~\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:234
msgid ""
"The results depend on what is found in your file system, of course.  The "
"matches are sorted alphabetically."
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:237
msgid "COMPLETING IN SOURCE CODE"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:241
msgid ""
"Source code files are well structured.  That makes it possible to do "
"completion in an intelligent way.  In Vim this is called Omni completion.  "
"In some other editors it's called intellisense, but that is a trademark."
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:245
msgid ""
"The key to Omni completion is CTRL-X CTRL-O.  Obviously the O stands for "
"Omni here, so that you can remember it easier.  Let's use an example for "
"editing C source:"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:249
#, no-wrap
msgid ""
"\t{ ~\n"
"\t    struct foo *p; ~\n"
"\t    p-> ~\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:254
msgid ""
"The cursor is after \"p->\".  Now type CTRL-X CTRL-O.  Vim will offer you a "
"list of alternatives, which are the items that \"struct foo\" contains.  "
"That is quite different from using CTRL-P, which would complete any word, "
"while only members of \"struct foo\" are valid here."
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:261
#, no-wrap
msgid ""
"For Omni completion to work you may need to do some setup.  At least make sure\n"
"filetype plugins are enabled.  Your vimrc file should contain a line like\n"
"this: >\n"
"\tfiletype plugin on\n"
"Or: >\n"
"\tfiletype plugin indent on\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:267
msgid ""
"For C code you need to create a tags file and set the 'tags' option.  That "
"is explained |ft-c-omni|.  For other filetypes you may need to do something "
"similar, look below |compl-omni-filetypes|.  It only works for specific "
"filetypes.  Check the value of the 'omnifunc' option to find out if it would "
"work."
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:270
#, no-wrap
msgid "*24.4*\tRepeating an insert\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:274
#, no-wrap
msgid ""
"If you press CTRL-A, the editor inserts the text you typed the last time you\n"
"were in Insert mode.\n"
"   Assume, for example, that you have a file that begins with the following:\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:277
#, no-wrap
msgid ""
"\t\"file.h\" ~\n"
"\t/* Main program begins */ ~\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:280
msgid ""
"You edit this file by inserting \"#include \" at the beginning of the first "
"line:"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:283
#, no-wrap
msgid ""
"\t#include \"file.h\" ~\n"
"\t/* Main program begins */ ~\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:286
msgid ""
"You go down to the beginning of the next line using the commands \"j^\".  "
"You now start to insert a new \"#include\" line.  So you type: >"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:288
#, no-wrap
msgid "\ti CTRL-A\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:290
msgid "The result is as follows:"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:293
#, no-wrap
msgid ""
"\t#include \"file.h\" ~\n"
"\t#include /* Main program begins */ ~\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:296
msgid ""
"The \"#include \" was inserted because CTRL-A inserts the text of the "
"previous insert.  Now you type \"main.h\"<Enter> to finish the line:"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:301
#, no-wrap
msgid ""
"\t#include \"file.h\" ~\n"
"\t#include \"main.h\" ~\n"
"\t/* Main program begins */ ~\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:304
msgid ""
"The CTRL-@ command does a CTRL-A and then exits Insert mode.  That's a quick "
"way of doing exactly the same insertion again."
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:307
#, no-wrap
msgid "*24.5*\tCopying from another line\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:311
msgid ""
"The CTRL-Y command inserts the character above the cursor.  This is useful "
"when you are duplicating a previous line.  For example, you have this line "
"of C code:"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:313
#, no-wrap
msgid "\tb_array[i]->s_next = a_array[i]->s_next; ~\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:317
msgid ""
"Now you need to type the same line, but with \"s_prev\" instead of \"s_next"
"\".  Start the new line, and press CTRL-Y 14 times, until you are at the \"n"
"\" of \"next\":"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:320
#, no-wrap
msgid ""
"\tb_array[i]->s_next = a_array[i]->s_next; ~\n"
"\tb_array[i]->s_ ~\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:322
msgid "Now you type \"prev\":"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:325
#, no-wrap
msgid ""
"\tb_array[i]->s_next = a_array[i]->s_next; ~\n"
"\tb_array[i]->s_prev ~\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:327
msgid "Continue pressing CTRL-Y until the following \"next\":"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:330
#, no-wrap
msgid ""
"\tb_array[i]->s_next = a_array[i]->s_next; ~\n"
"\tb_array[i]->s_prev = a_array[i]->s_ ~\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:332
msgid "Now type \"prev;\" to finish it off."
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:335
msgid ""
"The CTRL-E command acts like CTRL-Y except it inserts the character below "
"the cursor."
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:338
#, no-wrap
msgid "*24.6*\tInserting a register\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:342
msgid ""
"The command CTRL-R {register} inserts the contents of the register.  This is "
"useful to avoid having to type a long word.  For example, you need to type "
"this:"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:344
#, no-wrap
msgid "\tr = VeryLongFunction(a) + VeryLongFunction(b) + VeryLongFunction(c) ~\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:347
msgid ""
"The function name is defined in a different file.  Edit that file and move "
"the cursor on top of the function name there, and yank it into register v: >"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:349
#, no-wrap
msgid "\t\"vyiw\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:352
msgid ""
"\"v is the register specification, \"yiw\" is yank-inner-word.  Now edit the "
"file where the new line is to be inserted, and type the first letters:"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:354
#, no-wrap
msgid "\tr = ~\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:356
msgid "Now use CTRL-R v to insert the function name:"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:358
#, no-wrap
msgid "\tr = VeryLongFunction ~\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:363
#, no-wrap
msgid ""
"You continue to type the characters in between the function name, and use\n"
"CTRL-R v two times more.\n"
"   You could have done the same with completion.  Using a register is useful\n"
"when there are many words that start with the same characters.\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:368
msgid ""
"If the register contains characters such as <BS> or other special "
"characters, they are interpreted as if they had been typed from the "
"keyboard.  If you do not want this to happen (you really want the <BS> to be "
"inserted in the text), use the command CTRL-R CTRL-R {register}."
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:371
#, no-wrap
msgid "*24.7*\tAbbreviations\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:377
#, no-wrap
msgid ""
"An abbreviation is a short word that takes the place of a long one.  For\n"
"example, \"ad\" stands for \"advertisement\".  Vim enables you to type an\n"
"abbreviation and then will automatically expand it for you.\n"
"   To tell Vim to expand \"ad\" into \"advertisement\" every time you insert it,\n"
"use the following command: >\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:379
#, no-wrap
msgid "\t:iabbrev ad advertisement\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:383
msgid ""
"Now, when you type \"ad\", the whole word \"advertisement\" will be inserted "
"into the text.  This is triggered by typing a character that can't be part "
"of a word, for example a space:"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:388
#, no-wrap
msgid ""
"\tWhat Is Entered\t\tWhat You See\n"
"\tI saw the a\t\tI saw the a ~\n"
"\tI saw the ad\t\tI saw the ad ~\n"
"\tI saw the ad<Space>\tI saw the advertisement<Space> ~\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:392
msgid ""
"The expansion doesn't happen when typing just \"ad\".  That allows you to "
"type a word like \"add\", which will not get expanded.  Only whole words are "
"checked for abbreviations."
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:395
msgid "ABBREVIATING SEVERAL WORDS"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:398
msgid ""
"It is possible to define an abbreviation that results in multiple words.  "
"For example, to define \"JB\" as \"Jack Benny\", use the following command: >"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:400
#, no-wrap
msgid "\t:iabbrev JB Jack Benny\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:402
msgid "As a programmer, I use two rather unusual abbreviations: >"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:405
#, no-wrap
msgid ""
"\t:iabbrev #b /****************************************\n"
"\t:iabbrev #e <Space>****************************************/\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:413
#, no-wrap
msgid ""
"These are used for creating boxed comments.  The comment starts with #b, which\n"
"draws the top line.  I then type the comment text and use #e to draw the\n"
"bottom line.\n"
"   Notice that the #e abbreviation begins with a space.  In other words, the\n"
"first two characters are space-star.  Usually Vim ignores spaces between the\n"
"abbreviation and the expansion.  To avoid that problem, I spell space as seven\n"
"characters: <, S, p, a, c, e, >.\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:417
#, no-wrap
msgid ""
"\tNote:\n"
"\t\":iabbrev\" is a long word to type.  \":iab\" works just as well.\n"
"\tThat's abbreviating the abbreviate command!\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:420
msgid "FIXING TYPING MISTAKES"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:423
msgid ""
"It's very common to make the same typing mistake every time.  For example, "
"typing \"teh\" instead of \"the\".  You can fix this with an abbreviation: >"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:425
#, no-wrap
msgid "\t:abbreviate teh the\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:428
msgid ""
"You can add a whole list of these.  Add one each time you discover a common "
"mistake."
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:431
msgid "LISTING ABBREVIATIONS"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:433
msgid "The \":abbreviate\" command lists the abbreviations:"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:440
#, no-wrap
msgid ""
"\t:abbreviate\n"
"\ti  #e\t\t  ****************************************/\n"
"\ti  #b\t\t /****************************************\n"
"\ti  JB\t\t Jack Benny\n"
"\ti  ad\t\t advertisement\n"
"\t!  teh\t\t the\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:443
msgid ""
"The \"i\" in the first column indicates Insert mode.  These abbreviations "
"are only active in Insert mode.  Other possible characters are:"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:446
#, no-wrap
msgid ""
"\tc\tCommand-line mode\t\t\t:cabbrev\n"
"\t!\tboth Insert and Command-line mode\t:abbreviate\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:450
msgid ""
"Since abbreviations are not often useful in Command-line mode, you will "
"mostly use the \":iabbrev\" command.  That avoids, for example, that \"ad\" "
"gets expanded when typing a command like: >"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:452
#, no-wrap
msgid "\t:edit ad\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:455
msgid "DELETING ABBREVIATIONS"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:458
msgid ""
"To get rid of an abbreviation, use the \":unabbreviate\" command.  Suppose "
"you have the following abbreviation: >"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:460
#, no-wrap
msgid "\t:abbreviate @f fresh\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:462
msgid "You can remove it with this command: >"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:464
#, no-wrap
msgid "\t:unabbreviate @f\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:469
#, no-wrap
msgid ""
"While you type this, you will notice that @f is expanded to \"fresh\".  Don't\n"
"worry about this, Vim understands it anyway (except when you have an\n"
"abbreviation for \"fresh\", but that's very unlikely).\n"
"   To remove all the abbreviations: >\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:471
#, no-wrap
msgid "\t:abclear\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:475
msgid ""
"\":unabbreviate\" and \":abclear\" also come in the variants for Insert mode "
"(\":iunabbreviate and \":iabclear\") and Command-line mode (\":cunabbreviate"
"\" and \":cabclear\")."
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:478
msgid "REMAPPING ABBREVIATIONS"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:481
msgid ""
"There is one thing to watch out for when defining an abbreviation: The "
"resulting string should not be mapped.  For example: >"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:484
#, no-wrap
msgid ""
"\t:abbreviate @a adder\n"
"\t:imap dd disk-door\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:488
msgid ""
"When you now type @a, you will get \"adisk-doorer\".  That's not what you "
"want.  To avoid this, use the \":noreabbrev\" command.  It does the same as "
"\":abbreviate\", but avoids that the resulting string is used for mappings: >"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:490
#, no-wrap
msgid "\t:noreabbrev @a adder\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:492
msgid ""
"Fortunately, it's unlikely that the result of an abbreviation is mapped."
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:495
#, no-wrap
msgid "*24.8*\tEntering special characters\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:499
msgid ""
"The CTRL-V command is used to insert the next character literally.  In other "
"words, any special meaning the character has, it will be ignored.  For "
"example: >"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:501
#, no-wrap
msgid "\tCTRL-V <Esc>\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:504
msgid ""
"Inserts an escape character.  Thus you don't leave Insert mode.  (Don't type "
"the space after CTRL-V, it's only to make this easier to read)."
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:509
#, no-wrap
msgid ""
"\tNote:\n"
"\tOn MS-Windows CTRL-V is used to paste text.  Use CTRL-Q instead of\n"
"\tCTRL-V.  On Unix, on the other hand, CTRL-Q does not work on some\n"
"\tterminals, because it has a special meaning.\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:513
msgid ""
"You can also use the command CTRL-V {digits} to insert a character with the "
"decimal number {digits}.  For example, the character number 127 is the <Del> "
"character (but not necessarily the <Del> key!).  To insert <Del> type: >"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:515
#, no-wrap
msgid "\tCTRL-V 127\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:520
#, no-wrap
msgid ""
"You can enter characters up to 255 this way.  When you type fewer than two\n"
"digits, a non-digit will terminate the command.  To avoid the need of typing a\n"
"non-digit, prepend one or two zeros to make three digits.\n"
"   All the next commands insert a <Tab> and then a dot:\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:524
#, no-wrap
msgid ""
"\tCTRL-V 9.\n"
"\tCTRL-V 09.\n"
"\tCTRL-V 009.\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:526
msgid "To enter a character in hexadecimal, use an \"x\" after the CTRL-V: >"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:528
#, no-wrap
msgid "\tCTRL-V x7f\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:532
msgid ""
"This also goes up to character 255 (CTRL-V xff).  You can use \"o\" to type "
"a character as an octal number and two more methods allow you to type up to "
"a 16 bit and a 32 bit number (e.g., for a Unicode character): >"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:536
#, no-wrap
msgid ""
"\tCTRL-V o123\n"
"\tCTRL-V u1234\n"
"\tCTRL-V U12345678\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:539
#, no-wrap
msgid "*24.9*\tDigraphs\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:543
msgid ""
"Some characters are not on the keyboard.  For example, the copyright "
"character (�).  To type these characters in Vim, you use digraphs, where two "
"characters represent one.  To enter a �, for example, you press three keys: >"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:545
#, no-wrap
msgid "\tCTRL-K Co\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:547
msgid "To find out what digraphs are available, use the following command: >"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:549
#, no-wrap
msgid "\t:digraphs\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:551
msgid "Vim will display the digraph table.  Here are three lines of it:"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:555
#, no-wrap
msgid ""
"  AC ~_ 159  NS |  160  !I �  161  Ct �  162  Pd �  163  Cu �  164  Ye �  165 ~\n"
"  BB �  166  SE �  167  ': �  168  Co �  169  -a �  170  << �  171  NO �  172 ~\n"
"  -- �  173  Rg �  174  'm �  175  DG �  176  +- �  177  2S �  178  3S �  179 ~\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:564
#, no-wrap
msgid ""
"This shows, for example, that the digraph you get by typing CTRL-K Pd is the\n"
"character (�).  This is character number 163 (decimal).\n"
"   Pd is short for Pound.  Most digraphs are selected to give you a hint about\n"
"the character they will produce.  If you look through the list you will\n"
"understand the logic.\n"
"   You can exchange the first and second character, if there is no digraph for\n"
"that combination.  Thus CTRL-K dP also works.  Since there is no digraph for\n"
"\"dP\" Vim will also search for a \"Pd\" digraph.\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:569
#, no-wrap
msgid ""
"\tNote:\n"
"\tThe digraphs depend on the character set that Vim assumes you are\n"
"\tusing.  On MS-DOS they are different from MS-Windows.  Always use\n"
"\t\":digraphs\" to find out which digraphs are currently available.\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:571
msgid "You can define your own digraphs.  Example: >"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:573
#, no-wrap
msgid "\t:digraph a\" �\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:576
msgid ""
"This defines that CTRL-K a\" inserts an � character.  You can also specify "
"the character with a decimal number.  This defines the same digraph: >"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:578
#, no-wrap
msgid "\t:digraph a\" 228\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:582
#, no-wrap
msgid ""
"More information about digraphs here: |digraphs|\n"
"   Another way to insert special characters is with a keymap.  More about that\n"
"here: |45.5|\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:585
#, no-wrap
msgid "*24.10*\tNormal mode commands\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:592
#, no-wrap
msgid ""
"Insert mode offers a limited number of commands.  In Normal mode you have many\n"
"more.  When you want to use one, you usually leave Insert mode with <Esc>,\n"
"execute the Normal mode command, and re-enter Insert mode with \"i\" or \"a\".\n"
"   There is a quicker way.  With CTRL-O {command} you can execute any Normal\n"
"mode command from Insert mode.  For example, to delete from the cursor to the\n"
"end of the line: >\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:594
#, no-wrap
msgid "\tCTRL-O D\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:597
msgid ""
"You can execute only one Normal mode command this way.  But you can specify "
"a register or a count.  A more complicated example: >"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:599
#, no-wrap
msgid "\tCTRL-O \"g3dw\n"
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:601
msgid "This deletes up to the third word into register g."
msgstr ""

#. type: Plain text
#: original/TXT/usr_24.txt:605
msgid "Next chapter: |usr_25.txt| Editing formatted text"
msgstr ""
