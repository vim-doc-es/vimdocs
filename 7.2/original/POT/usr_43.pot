#. extracted from usr_43.txt
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2009-08-04 13:42+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Translate Toolkit 1.3.0\n"

#: usr_43.txt:1
msgid "*usr_43.txt*\tFor Vim version 7.2.  Last change: 2006 Apr 24"
msgstr ""

#: usr_43.txt:3
msgid "\t\t     VIM USER MANUAL - by Bram Moolenaar"
msgstr ""

#: usr_43.txt:5
msgid "\t\t\t       Using filetypes"
msgstr ""

#: usr_43.txt:8
msgid ""
"When you are editing a file of a certain type, for example a C program or a\n"
"shell script, you often use the same option settings and mappings.  You\n"
"quickly get tired of manually setting these each time.  This chapter "
"explains\n"
"how to do it automatically."
msgstr ""

#: usr_43.txt:13
msgid ""
"|43.1|\tPlugins for a filetype\n"
"|43.2|\tAdding a filetype"
msgstr ""

#: usr_43.txt:16
msgid ""
"     Next chapter: |usr_44.txt|  Your own syntax highlighted\n"
" Previous chapter: |usr_42.txt|  Add new menus\n"
"Table of contents: |usr_toc.txt|"
msgstr ""

#: usr_43.txt:20
msgid ""
"============================================================================"
"==\n"
"*43.1*\tPlugins for a filetype\t\t\t\t*filetype-plugin*"
msgstr ""

#: usr_43.txt:23
msgid ""
"How to start using filetype plugins has already been discussed here:\n"
"|add-filetype-plugin|.  But you probably are not satisfied with the default\n"
"settings, because they have been kept minimal.  Suppose that for C files you\n"
"want to set the 'softtabstop' option to 4 and define a mapping to insert a\n"
"three-line comment.  You do this with only two steps:"
msgstr ""

#: usr_43.txt:29
msgid ""
"\t\t\t\t\t\t\t*your-runtime-dir*\n"
"1. Create your own runtime directory.  On Unix this usually is \"~/.vim\".  In\n"
"   this directory create the \"ftplugin\" directory: >"
msgstr ""

#: usr_43.txt:33
msgid ""
"\tmkdir ~/.vim\n"
"\tmkdir ~/.vim/ftplugin\n"
"<\n"
"   When you are not on Unix, check the value of the 'runtimepath' option to\n"
"   see where Vim will look for the \"ftplugin\" directory: >"
msgstr ""

#: usr_43.txt:39
msgid "\tset runtimepath"
msgstr ""

#: usr_43.txt:41
msgid ""
"<  You would normally use the first directory name (before the first comma).\n"
"   You might want to prepend a directory name to the 'runtimepath' option in\n"
"   your |vimrc| file if you don't like the default value."
msgstr ""

#: usr_43.txt:45
msgid "2. Create the file \"~/.vim/ftplugin/c.vim\", with the contents: >"
msgstr ""

#: usr_43.txt:47
msgid ""
"\tsetlocal softtabstop=4\n"
"\tnoremap <buffer> <LocalLeader>c o/**************<CR><CR>/<Esc>"
msgstr ""

#: usr_43.txt:50
msgid ""
"Try editing a C file.  You should notice that the 'softtabstop' option is "
"set\n"
"to 4.  But when you edit another file it's reset to the default zero.  That "
"is\n"
"because the \":setlocal\" command was used.  This sets the 'softtabstop' "
"option\n"
"only locally to the buffer.  As soon as you edit another buffer, it will be\n"
"set to the value set for that buffer.  For a new buffer it will get the\n"
"default value or the value from the last \":set\" command."
msgstr ""

#: usr_43.txt:57
msgid ""
"Likewise, the mapping for \"\\c\" will disappear when editing another buffer.\n"
"The \":map <buffer>\" command creates a mapping that is local to the current\n"
"buffer.  This works with any mapping command: \":map!\", \":vmap\", etc.  The\n"
"|<LocalLeader>| in the mapping is replaced with the value of "
"\"maplocalleader\"."
msgstr ""

#: usr_43.txt:62
msgid "You can find examples for filetype plugins in this directory: >"
msgstr ""

#: usr_43.txt:64
msgid "\t$VIMRUNTIME/ftplugin/"
msgstr ""

#: usr_43.txt:66
msgid ""
"More details about writing a filetype plugin can be found here:\n"
"|write-plugin|."
msgstr ""

#: usr_43.txt:69
msgid ""
"============================================================================"
"==\n"
"*43.2*\tAdding a filetype"
msgstr ""

#: usr_43.txt:72
msgid ""
"If you are using a type of file that is not recognized by Vim, this is how "
"to\n"
"get it recognized.  You need a runtime directory of your own.  See\n"
"|your-runtime-dir| above."
msgstr ""

#: usr_43.txt:76
msgid ""
"Create a file \"filetype.vim\" which contains an autocommand for your "
"filetype.\n"
"(Autocommands were explained in section |40.3|.)  Example: >"
msgstr ""

#: usr_43.txt:79
msgid ""
"\taugroup filetypedetect\n"
"\tau BufNewFile,BufRead *.xyz\tsetf xyz\n"
"\taugroup END"
msgstr ""

#: usr_43.txt:83
msgid ""
"This will recognize all files that end in \".xyz\" as the \"xyz\" filetype.  The\n"
"\":augroup\" commands put this autocommand in the \"filetypedetect\" group.  "
"This\n"
"allows removing all autocommands for filetype detection when doing "
"\":filetype\n"
"off\".  The \"setf\" command will set the 'filetype' option to its argument,\n"
"unless it was set already.  This will make sure that 'filetype' isn't set\n"
"twice."
msgstr ""

#: usr_43.txt:90
msgid ""
"You can use many different patterns to match the name of your file.  "
"Directory\n"
"names can also be included.  See |autocmd-patterns|.  For example, the files\n"
"under \"/usr/share/scripts/\" are all \"ruby\" files, but don't have the "
"expected\n"
"file name extension.  Adding this to the example above: >"
msgstr ""

#: usr_43.txt:95
msgid ""
"\taugroup filetypedetect\n"
"\tau BufNewFile,BufRead *.xyz\t\t\tsetf xyz\n"
"\tau BufNewFile,BufRead /usr/share/scripts/*\tsetf ruby\n"
"\taugroup END"
msgstr ""

#: usr_43.txt:100
msgid ""
"However, if you now edit a file /usr/share/scripts/README.txt, this is not a\n"
"ruby file.  The danger of a pattern ending in \"*\" is that it quickly matches\n"
"too many files.  To avoid trouble with this, put the filetype.vim file in\n"
"another directory, one that is at the end of 'runtimepath'.  For Unix for\n"
"example, you could use \"~/.vim/after/filetype.vim\".\n"
"   You now put the detection of text files in ~/.vim/filetype.vim: >"
msgstr ""

#: usr_43.txt:107
msgid ""
"\taugroup filetypedetect\n"
"\tau BufNewFile,BufRead *.txt\t\t\tsetf text\n"
"\taugroup END"
msgstr ""

#: usr_43.txt:111
msgid ""
"That file is found in 'runtimepath' first.  Then use this in\n"
"~/.vim/after/filetype.vim, which is found last: >"
msgstr ""

#: usr_43.txt:114
msgid ""
"\taugroup filetypedetect\n"
"\tau BufNewFile,BufRead /usr/share/scripts/*\tsetf ruby\n"
"\taugroup END"
msgstr ""

#: usr_43.txt:118
msgid ""
"What will happen now is that Vim searches for \"filetype.vim\" files in each\n"
"directory in 'runtimepath'.  First ~/.vim/filetype.vim is found.  The\n"
"autocommand to catch *.txt files is defined there.  Then Vim finds the\n"
"filetype.vim file in $VIMRUNTIME, which is halfway 'runtimepath'.  Finally\n"
"~/.vim/after/filetype.vim is found and the autocommand for detecting ruby\n"
"files in /usr/share/scripts is added.\n"
"   When you now edit /usr/share/scripts/README.txt, the autocommands are\n"
"checked in the order in which they were defined.  The *.txt pattern matches,\n"
"thus \"setf text\" is executed to set the filetype to \"text\".  The pattern for\n"
"ruby matches too, and the \"setf ruby\" is executed.  But since 'filetype' was\n"
"already set to \"text\", nothing happens here.\n"
"   When you edit the file /usr/share/scripts/foobar the same autocommands "
"are\n"
"checked.  Only the one for ruby matches and \"setf ruby\" sets 'filetype' to\n"
"ruby."
msgstr ""

#: usr_43.txt:134
msgid "RECOGNIZING BY CONTENTS"
msgstr ""

#: usr_43.txt:136
msgid ""
"If your file cannot be recognized by its file name, you might be able to\n"
"recognize it by its contents.  For example, many script files start with a\n"
"line like:"
msgstr ""

#: usr_43.txt:140
msgid "\t#!/bin/xyz ~"
msgstr ""

#: usr_43.txt:142
msgid ""
"To recognize this script create a file \"scripts.vim\" in your runtime "
"directory\n"
"(same place where filetype.vim goes).  It might look like this: >"
msgstr ""

#: usr_43.txt:145
msgid ""
"\tif did_filetype()\n"
"\t  finish\n"
"\tendif\n"
"\tif getline(1) =~ '^#!.*[/\\\\]xyz\\>'\n"
"\t  setf xyz\n"
"\tendif"
msgstr ""

#: usr_43.txt:152
msgid ""
"The first check with did_filetype() is to avoid that you will check the\n"
"contents of files for which the filetype was already detected by the file\n"
"name.  That avoids wasting time on checking the file when the \"setf\" command\n"
"won't do anything.\n"
"   The scripts.vim file is sourced by an autocommand in the default\n"
"filetype.vim file.  Therefore, the order of checks is:"
msgstr ""

#: usr_43.txt:159
msgid ""
"\t1. filetype.vim files before $VIMRUNTIME in 'runtimepath'\n"
"\t2. first part of $VIMRUNTIME/filetype.vim\n"
"\t3. all scripts.vim files in 'runtimepath'\n"
"\t4. remainder of $VIMRUNTIME/filetype.vim\n"
"\t5. filetype.vim files after $VIMRUNTIME in 'runtimepath'"
msgstr ""

#: usr_43.txt:165
msgid ""
"If this is not sufficient for you, add an autocommand that matches all files\n"
"and sources a script or executes a function to check the contents of the "
"file."
msgstr ""

#: usr_43.txt:168
msgid ""
"============================================================================"
"=="
msgstr ""

#: usr_43.txt:170
msgid "Next chapter: |usr_44.txt|  Your own syntax highlighted"
msgstr ""

#: usr_43.txt:172
msgid "Copyright: see |manual-copyright|  vim:tw=78:ts=8:ft=help:norl:"
msgstr ""
