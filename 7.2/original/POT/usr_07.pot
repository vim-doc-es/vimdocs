#. extracted from usr_07.txt
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2009-08-01 19:54+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Translate Toolkit 1.3.0\n"

#: usr_07.txt:1
msgid "*usr_07.txt*\tFor Vim version 7.2.  Last change: 2006 Apr 24"
msgstr ""

#: usr_07.txt:3
msgid "\t\t     VIM USER MANUAL - by Bram Moolenaar"
msgstr ""

#: usr_07.txt:5
msgid "\t\t\t  Editing more than one file"
msgstr ""

#: usr_07.txt:8
msgid ""
"No matter how many files you have, you can edit them without leaving Vim.\n"
"Define a list of files to work on and jump from one to the other.  Copy text\n"
"from one file and put it in another one."
msgstr ""

#: usr_07.txt:12
msgid ""
"|07.1|\tEdit another file\n"
"|07.2|\tA list of files\n"
"|07.3|\tJumping from file to file\n"
"|07.4|\tBackup files\n"
"|07.5|\tCopy text between files\n"
"|07.6|\tViewing a file\n"
"|07.7|\tChanging the file name"
msgstr ""

#: usr_07.txt:20
msgid ""
"     Next chapter: |usr_08.txt|  Splitting windows\n"
" Previous chapter: |usr_06.txt|  Using syntax highlighting\n"
"Table of contents: |usr_toc.txt|"
msgstr ""

#: usr_07.txt:24
msgid ""
"============================================================================"
"==\n"
"*07.1*\tEdit another file"
msgstr ""

#: usr_07.txt:27
msgid ""
"So far you had to start Vim for every file you wanted to edit.  There is a\n"
"simpler way.  To start editing another file, use this command: >"
msgstr ""

#: usr_07.txt:30
msgid "\t:edit foo.txt"
msgstr ""

#: usr_07.txt:32
msgid ""
"You can use any file name instead of \"foo.txt\".  Vim will close the current\n"
"file and open the new one.  If the current file has unsaved changes, "
"however,\n"
"Vim displays an error message and does not open the new file:"
msgstr ""

#: usr_07.txt:36
msgid "\tE37: No write since last change (use ! to override) ~"
msgstr ""

#: usr_07.txt:38
msgid ""
"\tNote:\n"
"\tVim puts an error ID at the start of each error message.  If you do\n"
"\tnot understand the message or what caused it, look in the help system\n"
"\tfor this ID.  In this case: >"
msgstr ""

#: usr_07.txt:43
msgid "\t\t:help E37"
msgstr ""

#: usr_07.txt:45
msgid ""
"At this point, you have a number of alternatives.  You can write the file\n"
"using this command: >"
msgstr ""

#: usr_07.txt:48
msgid "\t:write"
msgstr ""

#: usr_07.txt:50
msgid ""
"Or you can force Vim to discard your changes and edit the new file, using "
"the\n"
"force (!) character: >"
msgstr ""

#: usr_07.txt:53
msgid "\t:edit! foo.txt"
msgstr ""

#: usr_07.txt:55
msgid ""
"If you want to edit another file, but not write the changes in the current\n"
"file yet, you can make it hidden: >"
msgstr ""

#: usr_07.txt:58
msgid "\t:hide edit foo.txt"
msgstr ""

#: usr_07.txt:60
msgid ""
"The text with changes is still there, but you can't see it.  This is further\n"
"explained in section |22.4|: The buffer list."
msgstr ""

#: usr_07.txt:63
msgid ""
"============================================================================"
"==\n"
"*07.2*\tA list of files"
msgstr ""

#: usr_07.txt:66
msgid "You can start Vim to edit a sequence of files.  For example: >"
msgstr ""

#: usr_07.txt:68
msgid "\tvim one.c two.c three.c"
msgstr ""

#: usr_07.txt:70
msgid ""
"This command starts Vim and tells it that you will be editing three files.\n"
"Vim displays just the first file.  After you have done your thing in this\n"
"file, to edit the next file you use this command: >"
msgstr ""

#: usr_07.txt:74
msgctxt "usr_07.txt:74"
msgid "\t:next"
msgstr ""

#: usr_07.txt:76
msgid ""
"If you have unsaved changes in the current file, you will get an error\n"
"message and the \":next\" will not work.  This is the same problem as with\n"
"\":edit\" mentioned in the previous section.  To abandon the changes: >"
msgstr ""

#: usr_07.txt:80
msgid "\t:next!"
msgstr ""

#: usr_07.txt:82
msgid ""
"But mostly you want to save the changes and move on to the next file.  There\n"
"is a special command for this: >"
msgstr ""

#: usr_07.txt:85
msgid "\t:wnext"
msgstr ""

#: usr_07.txt:87
msgid "This does the same as using two separate commands: >"
msgstr ""

#: usr_07.txt:89
msgid ""
"\t:write\n"
"\t:next"
msgstr ""

#: usr_07.txt:93
msgid "WHERE AM I?"
msgstr ""

#: usr_07.txt:95
msgid ""
"To see which file in the argument list you are editing, look in the window\n"
"title.  It should show something like \"(2 of 3)\".  This means you are "
"editing\n"
"the second file out of three files.\n"
"   If you want to see the list of files, use this command: >"
msgstr ""

#: usr_07.txt:100
msgid "\t:args"
msgstr ""

#: usr_07.txt:102
msgid "This is short for \"arguments\".  The output might look like this:"
msgstr ""

#: usr_07.txt:104
msgid "\tone.c [two.c] three.c ~"
msgstr ""

#: usr_07.txt:106
msgid ""
"These are the files you started Vim with.  The one you are currently "
"editing,\n"
"\"two.c\", is in square brackets."
msgstr ""

#: usr_07.txt:110
msgid "MOVING TO OTHER ARGUMENTS"
msgstr ""

#: usr_07.txt:112
msgid "To go back one file: >"
msgstr ""

#: usr_07.txt:114
msgid "\t:previous"
msgstr ""

#: usr_07.txt:116
msgid ""
"This is just like the \":next\" command, except that it moves in the other\n"
"direction.  Again, there is a shortcut command for when you want to write "
"the\n"
"file first: >"
msgstr ""

#: usr_07.txt:120
msgid "\t:wprevious"
msgstr ""

#: usr_07.txt:122
msgid "To move to the very last file in the list: >"
msgstr ""

#: usr_07.txt:124
msgid "\t:last"
msgstr ""

#: usr_07.txt:126
msgid "And to move back to the first one again: >"
msgstr ""

#: usr_07.txt:128
msgid "\t:first"
msgstr ""

#: usr_07.txt:130
msgid "There is no \":wlast\" or \":wfirst\" command though!"
msgstr ""

#: usr_07.txt:132
msgid ""
"You can use a count for \":next\" and \":previous\".  To skip two files forward: "
">"
msgstr ""

#: usr_07.txt:134
msgid "\t:2next"
msgstr ""

#: usr_07.txt:137
msgid "AUTOMATIC WRITING"
msgstr ""

#: usr_07.txt:139
msgid ""
"When moving around the files and making changes, you have to remember to use\n"
"\":write\".  Otherwise you will get an error message.  If you are sure you\n"
"always want to write modified files, you can tell Vim to automatically write\n"
"them: >"
msgstr ""

#: usr_07.txt:144
msgid "\t:set autowrite"
msgstr ""

#: usr_07.txt:146
msgid ""
"When you are editing a file which you may not want to write, switch it off\n"
"again: >"
msgstr ""

#: usr_07.txt:149
msgid "\t:set noautowrite"
msgstr ""

#: usr_07.txt:152
msgid "EDITING ANOTHER LIST OF FILES"
msgstr ""

#: usr_07.txt:154
msgid ""
"You can redefine the list of files without the need to exit Vim and start it\n"
"again.  Use this command to edit three other files: >"
msgstr ""

#: usr_07.txt:157
msgid "\t:args five.c six.c seven.h"
msgstr ""

#: usr_07.txt:159
msgid "Or use a wildcard, like it's used in the shell: >"
msgstr ""

#: usr_07.txt:161
msgid "\t:args *.txt"
msgstr ""

#: usr_07.txt:163
msgid ""
"Vim will take you to the first file in the list.  Again, if the current file\n"
"has changes, you can either write the file first, or use \":args!\" (with !\n"
"added) to abandon the changes."
msgstr ""

#: usr_07.txt:168
msgid ""
"DID YOU EDIT THE LAST FILE?\n"
"\t\t\t\t\t\t\t*arglist-quit*\n"
"When you use a list of files, Vim assumes you want to edit them all.  To\n"
"protect you from exiting too early, you will get this error when you didn't\n"
"edit the last file in the list yet:"
msgstr ""

#: usr_07.txt:174
msgid "\tE173: 46 more files to edit ~"
msgstr ""

#: usr_07.txt:176
msgid ""
"If you really want to exit, just do it again.  Then it will work (but not "
"when\n"
"you did other commands in between)."
msgstr ""

#: usr_07.txt:179
msgid ""
"============================================================================"
"==\n"
"*07.3*\tJumping from file to file"
msgstr ""

#: usr_07.txt:182
msgid ""
"To quickly jump between two files, press CTRL-^ (on English-US keyboards the "
"^\n"
"is above the 6 key).  Example: >"
msgstr ""

#: usr_07.txt:185
msgid "\t:args one.c two.c three.c"
msgstr ""

#: usr_07.txt:187
msgid "You are now in one.c. >"
msgstr ""

#: usr_07.txt:189
msgctxt "usr_07.txt:189"
msgid "\t:next"
msgstr ""

#: usr_07.txt:191
msgid ""
"Now you are in two.c.  Now use CTRL-^ to go back to one.c.  Another CTRL-^ "
"and\n"
"you are back in two.c.  Another CTRL-^ and you are in one.c again.  If you "
"now\n"
"do: >"
msgstr ""

#: usr_07.txt:195
msgctxt "usr_07.txt:195"
msgid "\t:next"
msgstr ""

#: usr_07.txt:197
msgid ""
"You are in three.c.  Notice that the CTRL-^ command does not change the idea\n"
"of where you are in the list of files.  Only commands like \":next\" and\n"
"\":previous\" do that."
msgstr ""

#: usr_07.txt:201
msgid ""
"The file you were previously editing is called the \"alternate\" file.  When "
"you\n"
"just started Vim CTRL-^ will not work, since there isn't a previous file."
msgstr ""

#: usr_07.txt:205
msgid "PREDEFINED MARKS"
msgstr ""

#: usr_07.txt:207
msgid ""
"After jumping to another file, you can use two predefined marks which are "
"very\n"
"useful: >"
msgstr ""

#: usr_07.txt:210
msgid "\t`\""
msgstr ""

#: usr_07.txt:212
msgid ""
"This takes you to the position where the cursor was when you left the file.\n"
"Another mark that is remembered is the position where you made the last\n"
"change: >"
msgstr ""

#: usr_07.txt:216
msgid "\t`."
msgstr ""

#: usr_07.txt:218
msgid ""
"Suppose you are editing the file \"one.txt\".  Somewhere halfway the file you\n"
"use \"x\" to delete a character.  Then you go to the last line with \"G\" and\n"
"write the file with \":w\".  You edit several other files, and then use \":edit\n"
"one.txt\" to come back to \"one.txt\".  If you now use `\" Vim jumps to the last\n"
"line of the file.  Using `. takes you to the position where you deleted the\n"
"character.  Even when you move around in the file `\" and `. will take you to\n"
"the remembered position.  At least until you make another change or leave "
"the\n"
"file."
msgstr ""

#: usr_07.txt:228
msgid "FILE MARKS"
msgstr ""

#: usr_07.txt:230
msgid ""
"In chapter 4 was explained how you can place a mark in a file with \"mx\" and\n"
"jump to that position with \"`x\".  That works within one file.  If you edit\n"
"another file and place marks there, these are specific for that file.  Thus\n"
"each file has its own set of marks, they are local to the file.\n"
"   So far we were using marks with a lowercase letter.  There are also marks\n"
"with an uppercase letter.  These are global, they can be used from any file.\n"
"For example suppose that we are editing the file \"foo.txt\".  Go to halfway "
"the\n"
"file (\"50%\") and place the F mark there (F for foo): >"
msgstr ""

#: usr_07.txt:239
msgid "\t50%mF"
msgstr ""

#: usr_07.txt:241
msgid ""
"Now edit the file \"bar.txt\" and place the B mark (B for bar) at its last "
"line:\n"
">\n"
"\tGmB"
msgstr ""

#: usr_07.txt:245
msgid ""
"Now you can use the \"'F\" command to jump back to halfway foo.txt.  Or edit "
"yet\n"
"another file, type \"'B\" and you are at the end of bar.txt again."
msgstr ""

#: usr_07.txt:248
msgid ""
"The file marks are remembered until they are placed somewhere else.  Thus "
"you\n"
"can place the mark, do hours of editing and still be able to jump back to "
"that\n"
"mark.\n"
"   It's often useful to think of a simple connection between the mark letter\n"
"and where it is placed.  For example, use the H mark in a header file, M in\n"
"a Makefile and C in a C code file."
msgstr ""

#: usr_07.txt:255
msgid ""
"To see where a specific mark is, give an argument to the \":marks\" command: >"
msgstr ""

#: usr_07.txt:257
msgid "\t:marks M"
msgstr ""

#: usr_07.txt:259
msgid "You can also give several arguments: >"
msgstr ""

#: usr_07.txt:261
msgid "\t:marks MCP"
msgstr ""

#: usr_07.txt:263
msgid ""
"Don't forget that you can use CTRL-O and CTRL-I to jump to older and newer\n"
"positions without placing marks there."
msgstr ""

#: usr_07.txt:266
msgid ""
"============================================================================"
"==\n"
"*07.4*\tBackup files"
msgstr ""

#: usr_07.txt:269
msgid ""
"Usually Vim does not produce a backup file.  If you want to have one, all "
"you\n"
"need to do is execute the following command: >"
msgstr ""

#: usr_07.txt:272
msgid "\t:set backup"
msgstr ""

#: usr_07.txt:274
msgid ""
"The name of the backup file is the original file with a  ~  added to the "
"end.\n"
"If your file is named data.txt, for example, the backup file name is\n"
"data.txt~.\n"
"   If you do not like the fact that the backup files end with ~, you can\n"
"change the extension: >"
msgstr ""

#: usr_07.txt:280
msgid "\t:set backupext=.bak"
msgstr ""

#: usr_07.txt:282
msgid ""
"This will use data.txt.bak instead of data.txt~.\n"
"   Another option that matters here is 'backupdir'.  It specifies where the\n"
"backup file is written.  The default, to write the backup in the same\n"
"directory as the original file, will mostly be the right thing."
msgstr ""

#: usr_07.txt:287
msgid ""
"\tNote:\n"
"\tWhen the 'backup' option isn't set but the 'writebackup' is, Vim will\n"
"\tstill create a backup file.  However, it is deleted as soon as writing\n"
"\tthe file was completed successfully.  This functions as a safety\n"
"\tagainst losing your original file when writing fails in some way (disk\n"
"\tfull is the most common cause; being hit by lightning might be\n"
"\tanother, although less common)."
msgstr ""

#: usr_07.txt:296
msgid "KEEPING THE ORIGINAL FILE"
msgstr ""

#: usr_07.txt:298
msgid ""
"If you are editing source files, you might want to keep the file before you\n"
"make any changes.  But the backup file will be overwritten each time you "
"write\n"
"the file.  Thus it only contains the previous version, not the first one.\n"
"   To make Vim keep the original file, set the 'patchmode' option.  This\n"
"specifies the extension used for the first backup of a changed file.  "
"Usually\n"
"you would do this: >"
msgstr ""

#: usr_07.txt:305
msgid "\t:set patchmode=.orig"
msgstr ""

#: usr_07.txt:307
msgid ""
"When you now edit the file data.txt for the first time, make changes and "
"write\n"
"the file, Vim will keep a copy of the unchanged file under the name\n"
"\"data.txt.orig\".\n"
"   If you make further changes to the file, Vim will notice that\n"
"\"data.txt.orig\" already exists and leave it alone.  Further backup files "
"will\n"
"then be called \"data.txt~\" (or whatever you specified with 'backupext').\n"
"   If you leave 'patchmode' empty (that is the default), the original file\n"
"will not be kept."
msgstr ""

#: usr_07.txt:316
msgid ""
"============================================================================"
"==\n"
"*07.5*\tCopy text between files"
msgstr ""

#: usr_07.txt:319
msgid ""
"This explains how to copy text from one file to another.  Let's start with a\n"
"simple example.  Edit the file that contains the text you want to copy.  "
"Move\n"
"the cursor to the start of the text and press \"v\".  This starts Visual mode.\n"
"Now move the cursor to the end of the text and press \"y\".  This yanks "
"(copies)\n"
"the selected text.\n"
"   To copy the above paragraph, you would do: >"
msgstr ""

#: usr_07.txt:326
msgid ""
"\t:edit thisfile\n"
"\t/This\n"
"\tvjjjj$y"
msgstr ""

#: usr_07.txt:330
msgid ""
"Now edit the file you want to put the text in.  Move the cursor to the\n"
"character where you want the text to appear after.  Use \"p\" to put the text\n"
"there. >\n"
"\t:edit otherfile\n"
"\t/There\n"
"\tp"
msgstr ""

#: usr_07.txt:337
msgid ""
"Of course you can use many other commands to yank the text.  For example, to\n"
"select whole lines start Visual mode with \"V\".  Or use CTRL-V to select a\n"
"rectangular block.  Or use \"Y\" to yank a single line, \"yaw\" to yank-a-word,\n"
"etc.\n"
"   The \"p\" command puts the text after the cursor.  Use \"P\" to put the text\n"
"before the cursor.  Notice that Vim remembers if you yanked a whole line or "
"a\n"
"block, and puts it back that way."
msgstr ""

#: usr_07.txt:346
msgid "USING REGISTERS"
msgstr ""

#: usr_07.txt:348
msgid ""
"When you want to copy several pieces of text from one file to another, "
"having\n"
"to switch between the files and writing the target file takes a lot of time.\n"
"To avoid this, copy each piece of text to its own register.\n"
"   A register is a place where Vim stores text.  Here we will use the\n"
"registers named a to z (later you will find out there are others).  Let's "
"copy\n"
"a sentence to the f register (f for First): >"
msgstr ""

#: usr_07.txt:355
msgid "\t\"fyas"
msgstr ""

#: usr_07.txt:357
msgid ""
"The \"yas\" command yanks a sentence like before.  It's the \"f that tells Vim\n"
"the text should be place in the f register.  This must come just before the\n"
"yank command.\n"
"   Now yank three whole lines to the l register (l for line): >"
msgstr ""

#: usr_07.txt:362
msgid "\t\"l3Y"
msgstr ""

#: usr_07.txt:364
msgid ""
"The count could be before the \"l just as well.  To yank a block of text to "
"the\n"
"b (for block) register: >"
msgstr ""

#: usr_07.txt:367
msgid "\tCTRL-Vjjww\"by"
msgstr ""

#: usr_07.txt:369
msgid ""
"Notice that the register specification \"b is just before the \"y\" command.\n"
"This is required.  If you would have put it before the \"w\" command, it would\n"
"not have worked.\n"
"   Now you have three pieces of text in the f, l and b registers.  Edit\n"
"another file, move around and place the text where you want it: >"
msgstr ""

#: usr_07.txt:375
msgid "\t\"fp"
msgstr ""

#: usr_07.txt:377
msgid ""
"Again, the register specification \"f comes before the \"p\" command.\n"
"   You can put the registers in any order.  And the text stays in the "
"register\n"
"until you yank something else into it.  Thus you can put it as many times as\n"
"you like."
msgstr ""

#: usr_07.txt:382
msgid ""
"When you delete text, you can also specify a register.  Use this to move\n"
"several pieces of text around.  For example, to delete-a-word and write it "
"in\n"
"the w register: >"
msgstr ""

#: usr_07.txt:386
msgid "\t\"wdaw"
msgstr ""

#: usr_07.txt:388
msgid "Again, the register specification comes before the delete command \"d\"."
msgstr ""

#: usr_07.txt:391
msgid "APPENDING TO A FILE"
msgstr ""

#: usr_07.txt:393
msgid ""
"When collecting lines of text into one file, you can use this command: >"
msgstr ""

#: usr_07.txt:395
msgid "\t:write >> logfile"
msgstr ""

#: usr_07.txt:397
msgid ""
"This will write the text of the current file to the end of \"logfile\".  Thus "
"it\n"
"is appended.  This avoids that you have to copy the lines, edit the log file\n"
"and put them there.  Thus you save two steps.  But you can only append to "
"the\n"
"end of a file.\n"
"   To append only a few lines, select them in Visual mode before typing\n"
"\":write\".  In chapter 10 you will learn other ways to select a range of "
"lines."
msgstr ""

#: usr_07.txt:404
msgid ""
"============================================================================"
"==\n"
"*07.6*\tViewing a file"
msgstr ""

#: usr_07.txt:407
msgid ""
"Sometimes you only want to see what a file contains, without the intention "
"to\n"
"ever write it back.  There is the risk that you type \":w\" without thinking "
"and\n"
"overwrite the original file anyway.  To avoid this, edit the file read-only.\n"
"   To start Vim in readonly mode, use this command: >"
msgstr ""

#: usr_07.txt:412
msgid "\tvim -R file"
msgstr ""

#: usr_07.txt:414
msgid "On Unix this command should do the same thing: >"
msgstr ""

#: usr_07.txt:416
msgid "\tview file"
msgstr ""

#: usr_07.txt:418
msgid ""
"You are now editing \"file\" in read-only mode.  When you try using \":w\" you\n"
"will get an error message and the file won't be written.\n"
"   When you try to make a change to the file Vim will give you a warning:"
msgstr ""

#: usr_07.txt:422
msgid "\tW10: Warning: Changing a readonly file ~"
msgstr ""

#: usr_07.txt:424
msgid ""
"The change will be done though.  This allows for formatting the file, for\n"
"example, to be able to read it easily.\n"
"   If you make changes to a file and forgot that it was read-only, you can\n"
"still write it.  Add the ! to the write command to force writing."
msgstr ""

#: usr_07.txt:429
msgid "If you really want to forbid making changes in a file, do this: >"
msgstr ""

#: usr_07.txt:431
msgid "\tvim -M file"
msgstr ""

#: usr_07.txt:433
msgid ""
"Now every attempt to change the text will fail.  The help files are like "
"this,\n"
"for example.  If you try to make a change you get this error message:"
msgstr ""

#: usr_07.txt:436
msgid "\tE21: Cannot make changes, 'modifiable' is off ~"
msgstr ""

#: usr_07.txt:438
msgid ""
"You could use the -M argument to setup Vim to work in a viewer mode.  This "
"is\n"
"only voluntary though, since these commands will remove the protection: >"
msgstr ""

#: usr_07.txt:441
msgid ""
"\t:set modifiable\n"
"\t:set write"
msgstr ""

#: usr_07.txt:444
msgid ""
"============================================================================"
"==\n"
"*07.7*\tChanging the file name"
msgstr ""

#: usr_07.txt:447
msgid ""
"A clever way to start editing a new file is by using an existing file that\n"
"contains most of what you need.  For example, you start writing a new "
"program\n"
"to move a file.  You know that you already have a program that copies a "
"file,\n"
"thus you start with: >"
msgstr ""

#: usr_07.txt:452
msgid "\t:edit copy.c"
msgstr ""

#: usr_07.txt:454
msgid ""
"You can delete the stuff you don't need.  Now you need to save the file "
"under\n"
"a new name.  The \":saveas\" command can be used for this: >"
msgstr ""

#: usr_07.txt:457
msgid "\t:saveas move.c"
msgstr ""

#: usr_07.txt:459
msgid ""
"Vim will write the file under the given name, and edit that file.  Thus the\n"
"next time you do \":write\", it will write \"move.c\".  \"copy.c\" remains\n"
"unmodified.\n"
"   When you want to change the name of the file you are editing, but don't\n"
"want to write the file, you can use this command: >"
msgstr ""

#: usr_07.txt:465
msgid "\t:file move.c"
msgstr ""

#: usr_07.txt:467
msgid ""
"Vim will mark the file as \"not edited\".  This means that Vim knows this is "
"not\n"
"the file you started editing.  When you try to write the file, you might get\n"
"this message:"
msgstr ""

#: usr_07.txt:471
msgid "\tE13: File exists (use ! to override) ~"
msgstr ""

#: usr_07.txt:473
msgid "This protects you from accidentally overwriting another file."
msgstr ""

#: usr_07.txt:475
msgid ""
"============================================================================"
"=="
msgstr ""

#: usr_07.txt:477
msgid "Next chapter: |usr_08.txt|  Splitting windows"
msgstr ""

#: usr_07.txt:479
msgid "Copyright: see |manual-copyright|  vim:tw=78:ts=8:ft=help:norl:"
msgstr ""
