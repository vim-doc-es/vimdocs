#. extracted from usr_31.txt
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2009-08-04 13:41+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Translate Toolkit 1.3.0\n"

#: usr_31.txt:1
msgid "*usr_31.txt*\tFor Vim version 7.2.  Last change: 2007 May 08"
msgstr ""

#: usr_31.txt:3
msgid "\t\t     VIM USER MANUAL - by Bram Moolenaar"
msgstr ""

#: usr_31.txt:5
msgid "\t\t\t      Exploiting the GUI"
msgstr ""

#: usr_31.txt:8
msgid ""
"Vim works well in a terminal, but the GUI has a few extra items.  A file\n"
"browser can be used for commands that use a file.  A dialog to make a choice\n"
"between alternatives.  Use keyboard shortcuts to access menu items quickly."
msgstr ""

#: usr_31.txt:12
msgid ""
"|31.1|\tThe file browser\n"
"|31.2|\tConfirmation\n"
"|31.3|\tMenu shortcuts\n"
"|31.4|\tVim window position and size\n"
"|31.5|\tVarious"
msgstr ""

#: usr_31.txt:18
msgid ""
"     Next chapter: |usr_32.txt|  The undo tree\n"
" Previous chapter: |usr_30.txt|  Editing programs\n"
"Table of contents: |usr_toc.txt|"
msgstr ""

#: usr_31.txt:22
msgid ""
"============================================================================"
"==\n"
"*31.1*\tThe file browser"
msgstr ""

#: usr_31.txt:25
msgid ""
"When using the File/Open... menu you get a file browser.  This makes it "
"easier\n"
"to find the file you want to edit.  But what if you want to split a window "
"to\n"
"edit another file?  There is no menu entry for this.  You could first use\n"
"Window/Split and then File/Open..., but that's more work.\n"
"   Since you are typing most commands in Vim, opening the file browser with "
"a\n"
"typed command is possible as well.  To make the split command use the file\n"
"browser, prepend \"browse\": >"
msgstr ""

#: usr_31.txt:33
msgid "\t:browse split"
msgstr ""

#: usr_31.txt:35
msgid ""
"Select a file and then the \":split\" command will be executed with it.  If "
"you\n"
"cancel the file dialog nothing happens, the window isn't split.\n"
"   You can also specify a file name argument.  This is used to tell the file\n"
"browser where to start.  Example: >"
msgstr ""

#: usr_31.txt:40
msgid "\t:browse split /etc"
msgstr ""

#: usr_31.txt:42
msgid "The file browser will pop up, starting in the directory \"/etc\"."
msgstr ""

#: usr_31.txt:44
msgid ""
"The \":browse\" command can be prepended to just about any command that opens "
"a\n"
"file.\n"
"   If no directory is specified, Vim will decide where to start the file\n"
"browser.  By default it uses the same directory as the last time.  Thus when\n"
"you used \":browse split\" and selected a file in \"/usr/local/share\", the next\n"
"time you use a \":browse\" it will start in \"/usr/local/share\" again.\n"
"   This can be changed with the 'browsedir' option.  It can have one of "
"three\n"
"values:"
msgstr ""

#: usr_31.txt:53
msgid ""
"\tlast\t\tUse the last directory browsed (default)\n"
"\tbuffer\t\tUse the same directory as the current buffer\n"
"\tcurrent\t\tuse the current directory"
msgstr ""

#: usr_31.txt:57
msgid ""
"For example, when you are in the directory \"/usr\", editing the file\n"
"\"/usr/local/share/readme\", then the command: >"
msgstr ""

#: usr_31.txt:60
msgid ""
"\t:set browsedir=buffer\n"
"\t:browse edit"
msgstr ""

#: usr_31.txt:63
msgid "Will start the browser in \"/usr/local/share\".  Alternatively: >"
msgstr ""

#: usr_31.txt:65
msgid ""
"\t:set browsedir=current\n"
"\t:browse edit"
msgstr ""

#: usr_31.txt:68
msgid "Will start the browser in \"/usr\"."
msgstr ""

#: usr_31.txt:70
msgid ""
"\tNote:\n"
"\tTo avoid using the mouse, most file browsers offer using key presses\n"
"\tto navigate.  Since this is different for every system, it is not\n"
"\texplained here.  Vim uses a standard browser when possible, your\n"
"\tsystem documentation should contain an explanation on the keyboard\n"
"\tshortcuts somewhere."
msgstr ""

#: usr_31.txt:77
msgid ""
"When you are not using the GUI version, you could use the file explorer "
"window\n"
"to select files like in a file browser.  However, this doesn't work for the\n"
"\":browse\" command.  See |netrw-browse|."
msgstr ""

#: usr_31.txt:81
msgid ""
"============================================================================"
"==\n"
"*31.2*\tConfirmation"
msgstr ""

#: usr_31.txt:84
msgid ""
"Vim protects you from accidentally overwriting a file and other ways to lose\n"
"changes.  If you do something that might be a bad thing to do, Vim produces "
"an\n"
"error message and suggests appending ! if you really want to do it.\n"
"   To avoid retyping the command with the !, you can make Vim give you a\n"
"dialog.  You can then press \"OK\" or \"Cancel\" to tell Vim what you want.\n"
"   For example, you are editing a file and made changes to it.  You start\n"
"editing another file with: >"
msgstr ""

#: usr_31.txt:92
msgid "\t:confirm edit foo.txt"
msgstr ""

#: usr_31.txt:94
msgid "Vim will pop up a dialog that looks something like this:"
msgstr ""

#: usr_31.txt:96
msgid ""
"\t+-----------------------------------+\n"
"\t|\t\t\t\t    |\n"
"\t|   ?\tSave changes to \"bar.txt\"?  |\n"
"\t|\t\t\t\t    |\n"
"\t|   YES   NO\t\t CANCEL     |\n"
"\t+-----------------------------------+"
msgstr ""

#: usr_31.txt:103
msgid ""
"Now make your choice.  If you do want to save the changes, select \"YES\".  If\n"
"you want to lose the changes for ever: \"NO\".  If you forgot what you were\n"
"doing and want to check what really changed use \"CANCEL\".  You will be back "
"in\n"
"the same file, with the changes still there."
msgstr ""

#: usr_31.txt:108
msgid ""
"Just like \":browse\", the \":confirm\" command can be prepended to most "
"commands\n"
"that edit another file.  They can also be combined: >"
msgstr ""

#: usr_31.txt:111
msgid "\t:confirm browse edit"
msgstr ""

#: usr_31.txt:113
msgid ""
"This will produce a dialog when the current buffer was changed.  Then it "
"will\n"
"pop up a file browser to select the file to edit."
msgstr ""

#: usr_31.txt:116
msgid ""
"\tNote:\n"
"\tIn the dialog you can use the keyboard to select the choice.\n"
"\tTypically the <Tab> key and the cursor keys change the choice.\n"
"\tPressing <Enter> selects the choice.  This depends on the system\n"
"\tthough."
msgstr ""

#: usr_31.txt:122
msgid ""
"When you are not using the GUI, the \":confirm\" command works as well.  "
"Instead\n"
"of popping up a dialog, Vim will print the message at the bottom of the Vim\n"
"window and ask you to press a key to make a choice. >"
msgstr ""

#: usr_31.txt:126
msgid ""
"\t:confirm edit main.c\n"
"<\tSave changes to \"Untitled\"? ~\n"
"\t[Y]es, (N)o, (C)ancel:  ~"
msgstr ""

#: usr_31.txt:130
msgid ""
"You can now press the single key for the choice.  You don't have to press\n"
"<Enter>, unlike other typing on the command line."
msgstr ""

#: usr_31.txt:133
msgid ""
"============================================================================"
"==\n"
"*31.3*\tMenu shortcuts"
msgstr ""

#: usr_31.txt:136
msgid ""
"The keyboard is used for all Vim commands.  The menus provide a simple way "
"to\n"
"select commands, without knowing what they are called.  But you have to move\n"
"your hand from the keyboard and grab the mouse.\n"
"   Menus can often be selected with keys as well.  This depends on your\n"
"system, but most often it works this way.  Use the <Alt> key in combination\n"
"with the underlined letter of a menu.  For example, <A-w> (<Alt> and w) pops\n"
"up the Window menu.\n"
"   In the Window menu, the \"split\" item has the p underlined.  To select it,\n"
"let go of the <Alt> key and press p."
msgstr ""

#: usr_31.txt:146
msgid ""
"After the first selection of a menu with the <Alt> key, you can use the "
"cursor\n"
"keys to move through the menus.  <Right> selects a submenu and <left> closes\n"
"it.  <Esc> also closes a menu.  <Enter> selects a menu item."
msgstr ""

#: usr_31.txt:150
msgid ""
"There is a conflict between using the <Alt> key to select menu items, and\n"
"using <Alt> key combinations for mappings.  The 'winaltkeys' option tells "
"Vim\n"
"what it should do with the <Alt> key.\n"
"   The default value \"menu\" is the smart choice: If the key combination is a\n"
"menu shortcut it can't be mapped.  All other keys are available for mapping.\n"
"   The value \"no\" doesn't use any <Alt> keys for the menus.  Thus you must "
"use\n"
"the mouse for the menus, and all <Alt> keys can be mapped.\n"
"   The value \"yes\" means that Vim will use any <Alt> keys for the menus.  "
"Some\n"
"<Alt> key combinations may also do other things than selecting a menu."
msgstr ""

#: usr_31.txt:160
msgid ""
"============================================================================"
"==\n"
"*31.4*\tVim window position and size"
msgstr ""

#: usr_31.txt:163
msgid "To see the current Vim window position on the screen use: >"
msgstr ""

#: usr_31.txt:165
msgid "\t:winpos"
msgstr ""

#: usr_31.txt:167
msgid "This will only work in the GUI.  The output may look like this:"
msgstr ""

#: usr_31.txt:169
msgid "\tWindow position: X 272, Y 103 ~"
msgstr ""

#: usr_31.txt:171
msgid ""
"The position is given in screen pixels.  Now you can use the numbers to move\n"
"Vim somewhere else.  For example, to move it to the left a hundred pixels: >"
msgstr ""

#: usr_31.txt:174
msgid ""
"\t:winpos 172 103\n"
"<\n"
"\tNote:\n"
"\tThere may be a small offset between the reported position and where\n"
"\tthe window moves.  This is because of the border around the window.\n"
"\tThis is added by the window manager."
msgstr ""

#: usr_31.txt:181
msgid ""
"You can use this command in your startup script to position the window at a\n"
"specific position."
msgstr ""

#: usr_31.txt:184
msgid ""
"The size of the Vim window is computed in characters.  Thus this depends on\n"
"the size of the font being used.  You can see the current size with this\n"
"command: >"
msgstr ""

#: usr_31.txt:188
msgid "\t:set lines columns"
msgstr ""

#: usr_31.txt:190
msgid ""
"To change the size set the 'lines' and/or 'columns' options to a new value: "
">"
msgstr ""

#: usr_31.txt:192
msgid ""
"\t:set lines=50\n"
"\t:set columns=80"
msgstr ""

#: usr_31.txt:195
msgid ""
"Obtaining the size works in a terminal just like in the GUI.  Setting the "
"size\n"
"is not possible in most terminals."
msgstr ""

#: usr_31.txt:198
msgid ""
"You can start the X-Windows version of gvim with an argument to specify the\n"
"size and position of the window: >"
msgstr ""

#: usr_31.txt:201
msgid "\tgvim -geometry {width}x{height}+{x_offset}+{y_offset}"
msgstr ""

#: usr_31.txt:203
msgid ""
"{width} and {height} are in characters, {x_offset} and {y_offset} are in\n"
"pixels.  Example: >"
msgstr ""

#: usr_31.txt:206
msgid "\tgvim -geometry 80x25+100+300"
msgstr ""

#: usr_31.txt:208
msgid ""
"============================================================================"
"==\n"
"*31.5*\tVarious"
msgstr ""

#: usr_31.txt:211
msgid ""
"You can use gvim to edit an e-mail message.  In your e-mail program you must\n"
"select gvim to be the editor for messages.  When you try that, you will\n"
"see that it doesn't work: The mail program thinks that editing is finished,\n"
"while gvim is still running!\n"
"   What happens is that gvim disconnects from the shell it was started in.\n"
"That is fine when you start gvim in a terminal, so that you can do other "
"work\n"
"in that terminal.  But when you really want to wait for gvim to finish, you\n"
"must prevent it from disconnecting.  The \"-f\" argument does this: >"
msgstr ""

#: usr_31.txt:220
msgid "\tgvim -f file.txt"
msgstr ""

#: usr_31.txt:222
msgid ""
"The \"-f\" stands for foreground.  Now Vim will block the shell it was started\n"
"in until you finish editing and exit."
msgstr ""

#: usr_31.txt:226
msgid "DELAYED START OF THE GUI"
msgstr ""

#: usr_31.txt:228
msgid ""
"On Unix it's possible to first start Vim in a terminal.  That's useful if "
"you\n"
"do various tasks in the same shell.  If you are editing a file and decide "
"you\n"
"want to use the GUI after all, you can start it with: >"
msgstr ""

#: usr_31.txt:232
msgid "\t:gui"
msgstr ""

#: usr_31.txt:234
msgid ""
"Vim will open the GUI window and no longer use the terminal.  You can "
"continue\n"
"using the terminal for something else.  The \"-f\" argument is used here to "
"run\n"
"the GUI in the foreground.  You can also use \":gui -f\"."
msgstr ""

#: usr_31.txt:239
msgid "THE GVIM STARTUP FILE"
msgstr ""

#: usr_31.txt:241
msgid ""
"When gvim starts, it reads the gvimrc file.  That's similar to the vimrc "
"file\n"
"used when starting Vim.  The gvimrc file can be used for settings and "
"commands\n"
"that are only to be used when the GUI is going to be started.  For example,\n"
"you can set the 'lines' option to set a different window size: >"
msgstr ""

#: usr_31.txt:246
msgid "\t:set lines=55"
msgstr ""

#: usr_31.txt:248
msgid ""
"You don't want to do this in a terminal, since it's size is fixed (except "
"for\n"
"an xterm that supports resizing).\n"
"   The gvimrc file is searched for in the same locations as the vimrc file.\n"
"Normally its name is \"~/.gvimrc\" for Unix and \"$VIM/_gvimrc\" for MS-Windows.\n"
"The $MYGVIMRC environment variable is set to it, thus you can use this "
"command\n"
"to edit the file, if you have one: >"
msgstr ""

#: usr_31.txt:255
msgid ""
"\t:edit $MYGVIMRC\n"
"<\n"
"   If for some reason you don't want to use the normal gvimrc file, you can\n"
"specify another one with the \"-U\" argument: >"
msgstr ""

#: usr_31.txt:260
msgid "\tgvim -U thisrc ..."
msgstr ""

#: usr_31.txt:262
msgid ""
"That allows starting gvim for different kinds of editing.  You could set\n"
"another font size, for example.\n"
"   To completely skip reading a gvimrc file: >"
msgstr ""

#: usr_31.txt:266
msgid "\tgvim -U NONE ..."
msgstr ""

#: usr_31.txt:268
msgid ""
"============================================================================"
"=="
msgstr ""

#: usr_31.txt:270
msgid "Next chapter: |usr_32.txt|  The undo tree"
msgstr ""

#: usr_31.txt:272
msgid "Copyright: see |manual-copyright|  vim:tw=78:ts=8:ft=help:norl:"
msgstr ""
