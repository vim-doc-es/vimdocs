#. extracted from usr_45.txt
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2009-08-04 13:42+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Translate Toolkit 1.3.0\n"

#: usr_45.txt:1
msgid "*usr_45.txt*\tFor Vim version 7.2.  Last change: 2008 Apr 30"
msgstr ""

#: usr_45.txt:3
msgid "\t\t     VIM USER MANUAL - by Bram Moolenaar"
msgstr ""

#: usr_45.txt:5
msgid "\t\t\t     Select your language"
msgstr ""

#: usr_45.txt:8
msgid ""
"The messages in Vim can be given in several languages.  This chapter "
"explains\n"
"how to change which one is used.  Also, the different ways to work with "
"files\n"
"in various languages is explained."
msgstr ""

#: usr_45.txt:12
msgid ""
"|45.1|\tLanguage for Messages\n"
"|45.2|\tLanguage for Menus\n"
"|45.3|\tUsing another encoding\n"
"|45.4|\tEditing files with a different encoding\n"
"|45.5|\tEntering language text"
msgstr ""

#: usr_45.txt:18
msgid ""
"     Next chapter: |usr_90.txt|  Installing Vim\n"
" Previous chapter: |usr_44.txt|  Your own syntax highlighted\n"
"Table of contents: |usr_toc.txt|"
msgstr ""

#: usr_45.txt:22
msgid ""
"============================================================================"
"==\n"
"*45.1*\tLanguage for Messages"
msgstr ""

#: usr_45.txt:25
msgid ""
"When you start Vim, it checks the environment to find out what language you\n"
"are using.  Mostly this should work fine, and you get the messages in your\n"
"language (if they are available).  To see what the current language is, use\n"
"this command: >"
msgstr ""

#: usr_45.txt:30
msgid "\t:language"
msgstr ""

#: usr_45.txt:32
msgid ""
"If it replies with \"C\", this means the default is being used, which is\n"
"English."
msgstr ""

#: usr_45.txt:35
msgid ""
"\tNote:\n"
"\tUsing different languages only works when Vim was compiled to handle\n"
"\tit.  To find out if it works, use the \":version\" command and check the\n"
"\toutput for \"+gettext\" and \"+multi_lang\".  If they are there, you are\n"
"\tOK.  If you see \"-gettext\" or \"-multi_lang\" you will have to find\n"
"\tanother Vim."
msgstr ""

#: usr_45.txt:42
msgid ""
"What if you would like your messages in a different language?  There are\n"
"several ways.  Which one you should use depends on the capabilities of your\n"
"system.\n"
"   The first way is to set the environment to the desired language before\n"
"starting Vim.  Example for Unix: >"
msgstr ""

#: usr_45.txt:48
msgid "\tenv LANG=de_DE.ISO_8859-1  vim"
msgstr ""

#: usr_45.txt:50
msgid ""
"This only works if the language is available on your system.  The advantage "
"is\n"
"that all the GUI messages and things in libraries will use the right "
"language\n"
"as well.  A disadvantage is that you must do this before starting Vim.  If "
"you\n"
"want to change language while Vim is running, you can use the second method: "
">"
msgstr ""

#: usr_45.txt:55
msgid "\t:language fr_FR.ISO_8859-1"
msgstr ""

#: usr_45.txt:57
msgid ""
"This way you can try out several names for your language.  You will get an\n"
"error message when it's not supported on your system.  You don't get an "
"error\n"
"when translated messages are not available.  Vim will silently fall back to\n"
"using English.\n"
"   To find out which languages are supported on your system, find the\n"
"directory where they are listed.  On my system it is \"/usr/share/locale\".  "
"On\n"
"some systems it's in \"/usr/lib/locale\".  The manual page for \"setlocale\"\n"
"should give you a hint where it is found on your system.\n"
"   Be careful to type the name exactly as it should be.  Upper and lowercase\n"
"matter, and the '-' and '_' characters are easily confused."
msgstr ""

#: usr_45.txt:68
msgid ""
"You can also set the language separately for messages, edited text and the\n"
"time format.  See |:language|."
msgstr ""

#: usr_45.txt:72
msgid "DO-IT-YOURSELF MESSAGE TRANSLATION"
msgstr ""

#: usr_45.txt:74
msgid ""
"If translated messages are not available for your language, you could write\n"
"them yourself.  To do this, get the source code for Vim and the GNU gettext\n"
"package.  After unpacking the sources, instructions can be found in the\n"
"directory src/po/README.txt.\n"
"   It's not too difficult to do the translation.  You don't need to be a\n"
"programmer.  You must know both English and the language you are translating\n"
"to, of course.\n"
"   When you are satisfied with the translation, consider making it available\n"
"to others.  Upload it at vim-online (http://vim.sf.net) or e-mail it to\n"
"the Vim maintainer <maintainer@vim.org>.  Or both."
msgstr ""

#: usr_45.txt:85
msgid ""
"============================================================================"
"==\n"
"*45.2*\tLanguage for Menus"
msgstr ""

#: usr_45.txt:88
msgid ""
"The default menus are in English.  To be able to use your local language, "
"they\n"
"must be translated.  Normally this is automatically done for you if the\n"
"environment is set for your language, just like with messages.  You don't "
"need\n"
"to do anything extra for this.  But it only works if translations for the\n"
"language are available.\n"
"   Suppose you are in Germany, with the language set to German, but prefer "
"to\n"
"use \"File\" instead of \"Datei\".  You can switch back to using the English "
"menus\n"
"this way: >"
msgstr ""

#: usr_45.txt:97
msgid "\t:set langmenu=none"
msgstr ""

#: usr_45.txt:99
msgid "It is also possible to specify a language: >"
msgstr ""

#: usr_45.txt:101
msgid "\t:set langmenu=nl_NL.ISO_8859-1"
msgstr ""

#: usr_45.txt:103
msgid ""
"Like above, differences between \"-\" and \"_\" matter.  However, "
"upper/lowercase\n"
"differences are ignored here.\n"
"   The 'langmenu' option must be set before the menus are loaded.  Once the\n"
"menus have been defined changing 'langmenu' has no direct effect.  "
"Therefore,\n"
"put the command to set 'langmenu' in your vimrc file.\n"
"   If you really want to switch menu language while running Vim, you can do "
"it\n"
"this way: >"
msgstr ""

#: usr_45.txt:111
msgid ""
"\t:source $VIMRUNTIME/delmenu.vim\n"
"\t:set langmenu=de_DE.ISO_8859-1\n"
"\t:source $VIMRUNTIME/menu.vim"
msgstr ""

#: usr_45.txt:115
msgid ""
"There is one drawback: All menus that you defined yourself will be gone.  "
"You\n"
"will need to redefine them as well."
msgstr ""

#: usr_45.txt:119
msgid "DO-IT-YOURSELF MENU TRANSLATION"
msgstr ""

#: usr_45.txt:121
msgid "To see which menu translations are available, look in this directory:"
msgstr ""

#: usr_45.txt:123
msgid "\t$VIMRUNTIME/lang ~"
msgstr ""

#: usr_45.txt:125
msgid ""
"The files are called menu_{language}.vim.  If you don't see the language you\n"
"want to use, you can do your own translations.  The simplest way to do this "
"is\n"
"by copying one of the existing language files, and change it.\n"
"   First find out the name of your language with the \":language\" command.  "
"Use\n"
"this name, but with all letters made lowercase.  Then copy the file to your\n"
"own runtime directory, as found early in 'runtimepath'.  For example, for "
"Unix\n"
"you would do: >"
msgstr ""

#: usr_45.txt:133
msgid ""
"\t:!cp $VIMRUNTIME/lang/menu_ko_kr.euckr.vim "
"~/.vim/lang/menu_nl_be.iso_8859-1.vim"
msgstr ""

#: usr_45.txt:135
msgid ""
"You will find hints for the translation in \"$VIMRUNTIME/lang/README.txt\"."
msgstr ""

#: usr_45.txt:137
msgid ""
"============================================================================"
"==\n"
"*45.3*\tUsing another encoding"
msgstr ""

#: usr_45.txt:140
msgid ""
"Vim guesses that the files you are going to edit are encoded for your\n"
"language.  For many European languages this is \"latin1\".  Then each byte is\n"
"one character.  That means there are 256 different characters possible.  For\n"
"Asian languages this is not sufficient.  These mostly use a double-byte\n"
"encoding, providing for over ten thousand possible characters.  This still\n"
"isn't enough when a text is to contain several different languages.  This is\n"
"where Unicode comes in.  It was designed to include all characters used in\n"
"commonly used languages.  This is the \"Super encoding that replaces all\n"
"others\".  But it isn't used that much yet.\n"
"   Fortunately, Vim supports these three kinds of encodings.  And, with some\n"
"restrictions, you can use them even when your environment uses another\n"
"language than the text.\n"
"   Nevertheless, when you only edit files that are in the encoding of your\n"
"language, the default should work fine and you don't need to do anything.  "
"The\n"
"following is only relevant when you want to edit different languages."
msgstr ""

#: usr_45.txt:156
msgid ""
"\tNote:\n"
"\tUsing different encodings only works when Vim was compiled to handle\n"
"\tit.  To find out if it works, use the \":version\" command and check the\n"
"\toutput for \"+multi_byte\".  If it's there, you are OK.  If you see\n"
"\t\"-multi_byte\" you will have to find another Vim."
msgstr ""

#: usr_45.txt:163
msgid "USING UNICODE IN THE GUI"
msgstr ""

#: usr_45.txt:165
msgid ""
"The nice thing about Unicode is that other encodings can be converted to it\n"
"and back without losing information.  When you make Vim use Unicode\n"
"internally, you will be able to edit files in any encoding.\n"
"   Unfortunately, the number of systems supporting Unicode is still limited.\n"
"Thus it's unlikely that your language uses it.  You need to tell Vim you "
"want\n"
"to use Unicode, and how to handle interfacing with the rest of the system.\n"
"   Let's start with the GUI version of Vim, which is able to display Unicode\n"
"characters.  This should work: >"
msgstr ""

#: usr_45.txt:174
msgid ""
"\t:set encoding=utf-8\n"
"\t:set guifont=-misc-fixed-medium-r-normal--18-120-100-100-c-90-iso10646-1"
msgstr ""

#: usr_45.txt:177
msgid ""
"The 'encoding' option tells Vim the encoding of the characters that you use.\n"
"This applies to the text in buffers (files you are editing), registers, Vim\n"
"script files, etc.  You can regard 'encoding' as the setting for the "
"internals\n"
"of Vim.\n"
"   This example assumes you have this font on your system.  The name in the\n"
"example is for the X Window System.  This font is in a package that is used "
"to\n"
"enhance xterm with Unicode support.  If you don't have this font, you might\n"
"find it here:"
msgstr ""

#: usr_45.txt:186
msgid "\thttp://www.cl.cam.ac.uk/~mgk25/download/ucs-fonts.tar.gz ~"
msgstr ""

#: usr_45.txt:188
msgid ""
"For MS-Windows, some fonts have a limited number of Unicode characters.  Try\n"
"using the \"Courier New\" font.  You can use the Edit/Select Font... menu to\n"
"select and try out the fonts available.  Only fixed-width fonts can be used\n"
"though.  Example: >"
msgstr ""

#: usr_45.txt:193
msgid "\t:set guifont=courier_new:h12"
msgstr ""

#: usr_45.txt:195
msgid ""
"If it doesn't work well, try getting a fontpack.  If Microsoft didn't move "
"it,\n"
"you can find it here:"
msgstr ""

#: usr_45.txt:198
msgid "\thttp://www.microsoft.com/typography/fonts/default.aspx ~"
msgstr ""

#: usr_45.txt:200
msgid ""
"Now you have told Vim to use Unicode internally and display text with a\n"
"Unicode font.  Typed characters still arrive in the encoding of your "
"original\n"
"language.  This requires converting them to Unicode.  Tell Vim the language\n"
"from which to convert with the 'termencoding' option.  You can do it like\n"
"this: >"
msgstr ""

#: usr_45.txt:206
msgctxt "usr_45.txt:206"
msgid ""
"\t:let &termencoding = &encoding\n"
"\t:set encoding=utf-8"
msgstr ""

#: usr_45.txt:209
msgid ""
"This assigns the old value of 'encoding' to 'termencoding' before setting\n"
"'encoding' to utf-8.  You will have to try out if this really works for your\n"
"setup.  It should work especially well when using an input method for an "
"Asian\n"
"language, and you want to edit Unicode text."
msgstr ""

#: usr_45.txt:215
msgid "USING UNICODE IN A UNICODE TERMINAL"
msgstr ""

#: usr_45.txt:217
msgid ""
"There are terminals that support Unicode directly.  The standard xterm that\n"
"comes with XFree86 is one of them.  Let's use that as an example.\n"
"   First of all, the xterm must have been compiled with Unicode support.  "
"See\n"
"|UTF8-xterm| how to check that and how to compile it when needed.\n"
"   Start the xterm with the \"-u8\" argument.  You might also need so specify "
"a\n"
"font.  Example: >"
msgstr ""

#: usr_45.txt:224
msgid ""
"   xterm -u8 -fn -misc-fixed-medium-r-normal--18-120-100-100-c-90-iso10646-1"
msgstr ""

#: usr_45.txt:226
msgid ""
"Now you can run Vim inside this terminal.  Set 'encoding' to \"utf-8\" as\n"
"before.  That's all."
msgstr ""

#: usr_45.txt:230
msgid "USING UNICODE IN AN ORDINARY TERMINAL"
msgstr ""

#: usr_45.txt:232
msgid ""
"Suppose you want to work with Unicode files, but don't have a terminal with\n"
"Unicode support.  You can do this with Vim, although characters that are not\n"
"supported by the terminal will not be displayed.  The layout of the text\n"
"will be preserved.  >"
msgstr ""

#: usr_45.txt:237
msgctxt "usr_45.txt:237"
msgid ""
"\t:let &termencoding = &encoding\n"
"\t:set encoding=utf-8"
msgstr ""

#: usr_45.txt:240
msgid ""
"This is the same as what was used for the GUI.  But it works differently: "
"Vim\n"
"will convert the displayed text before sending it to the terminal.  That\n"
"avoids that the display is messed up with strange characters.\n"
"   For this to work the conversion between 'termencoding' and 'encoding' "
"must\n"
"be possible.  Vim will convert from latin1 to Unicode, thus that always "
"works.\n"
"For other conversions the |+iconv| feature is required.\n"
"   Try editing a file with Unicode characters in it.  You will notice that "
"Vim\n"
"will put a question mark (or underscore or some other character) in places\n"
"where a character should be that the terminal can't display.  Move the "
"cursor\n"
"to a question mark and use this command: >"
msgstr ""

#: usr_45.txt:251
msgid "\tga"
msgstr ""

#: usr_45.txt:253
msgid ""
"Vim will display a line with the code of the character.  This gives you a "
"hint\n"
"about what character it is.  You can look it up in a Unicode table.  You "
"could\n"
"actually view a file that way, if you have lots of time at hand."
msgstr ""

#: usr_45.txt:257
msgid ""
"\tNote:\n"
"\tSince 'encoding' is used for all text inside Vim, changing it makes\n"
"\tall non-ASCII text invalid.  You will notice this when using registers\n"
"\tand the 'viminfo' file (e.g., a remembered search pattern).  It's\n"
"\trecommended to set 'encoding' in your vimrc file, and leave it alone."
msgstr ""

#: usr_45.txt:263
msgid ""
"============================================================================"
"==\n"
"*45.4*\tEditing files with a different encoding"
msgstr ""

#: usr_45.txt:266
msgid ""
"Suppose you have setup Vim to use Unicode, and you want to edit a file that "
"is\n"
"in 16-bit Unicode.  Sounds simple, right?  Well, Vim actually uses utf-8\n"
"encoding internally, thus the 16-bit encoding must be converted.  Thus there\n"
"is a difference between the character set (Unicode) and the encoding (utf-8 "
"or\n"
"16-bit).\n"
"   Vim will try to detect what kind of file you are editing.  It uses the\n"
"encoding names in the 'fileencodings' option.  When using Unicode, the "
"default\n"
"value is: \"ucs-bom,utf-8,latin1\".  This means that Vim checks the file to "
"see\n"
"if it's one of these encodings:"
msgstr ""

#: usr_45.txt:276
msgid ""
"\tucs-bom\t\tFile must start with a Byte Order Mark (BOM).  This\n"
"\t\t\tallows detection of 16-bit, 32-bit and utf-8 Unicode\n"
"\t\t\tencodings.\n"
"\tutf-8\t\tutf-8 Unicode.  This is rejected when a sequence of\n"
"\t\t\tbytes is illegal in utf-8.\n"
"\tlatin1\t\tThe good old 8-bit encoding.  Always works."
msgstr ""

#: usr_45.txt:283
msgid ""
"When you start editing that 16-bit Unicode file, and it has a BOM, Vim will\n"
"detect this and convert the file to utf-8 when reading it.  The "
"'fileencoding'\n"
"option (without s at the end) is set to the detected value.  In this case it\n"
"is \"ucs-2le\".  That means it's Unicode, two bytes and little-endian.  This\n"
"file format is common on MS-Windows (e.g., for registry files).\n"
"   When writing the file, Vim will compare 'fileencoding' with 'encoding'.  "
"If\n"
"they are different, the text will be converted.\n"
"   An empty value for 'fileencoding' means that no conversion is to be done.\n"
"Thus the text is assumed to be encoded with 'encoding'."
msgstr ""

#: usr_45.txt:293
msgid ""
"If the default 'fileencodings' value is not good for you, set it to the\n"
"encodings you want Vim to try.  Only when a value is found to be invalid "
"will\n"
"the next one be used.  Putting \"latin1\" first doesn't work, because it is\n"
"never illegal.  An example, to fall back to Japanese when the file doesn't\n"
"have a BOM and isn't utf-8: >"
msgstr ""

#: usr_45.txt:299
msgid "\t:set fileencodings=ucs-bom,utf-8,sjis"
msgstr ""

#: usr_45.txt:301
msgid ""
"See |encoding-values| for suggested values.  Other values may work as well.\n"
"This depends on the conversion available."
msgstr ""

#: usr_45.txt:305
msgid "FORCING AN ENCODING"
msgstr ""

#: usr_45.txt:307
msgid ""
"If the automatic detection doesn't work you must tell Vim what encoding the\n"
"file is.  Example: >"
msgstr ""

#: usr_45.txt:310
msgid "\t:edit ++enc=koi8-r russian.txt"
msgstr ""

#: usr_45.txt:312
msgid ""
"The \"++enc\" part specifies the name of the encoding to be used for this file\n"
"only.  Vim will convert the file from the specified encoding, Russian in "
"this\n"
"example, to 'encoding'.  'fileencoding' will also be set to the specified\n"
"encoding, so that the reverse conversion can be done when writing the file.\n"
"   The same argument can be used when writing the file.  This way you can\n"
"actually use Vim to convert a file.  Example: >"
msgstr ""

#: usr_45.txt:319
msgid ""
"\t:write ++enc=utf-8 russian.txt\n"
"<\n"
"\tNote:\n"
"\tConversion may result in lost characters.  Conversion from an encoding\n"
"\tto Unicode and back is mostly free of this problem, unless there are\n"
"\tillegal characters.  Conversion from Unicode to other encodings often\n"
"\tloses information when there was more than one language in the file."
msgstr ""

#: usr_45.txt:327
msgid ""
"============================================================================"
"==\n"
"*45.5*\tEntering language text"
msgstr ""

#: usr_45.txt:330
msgid ""
"Computer keyboards don't have much more than a hundred keys.  Some languages\n"
"have thousands of characters, Unicode has ten thousands.  So how do you type\n"
"these characters?\n"
"   First of all, when you don't use too many of the special characters, you\n"
"can use digraphs.  This was already explained in |24.9|.\n"
"   When you use a language that uses many more characters than keys on your\n"
"keyboard, you will want to use an Input Method (IM).  This requires learning\n"
"the translation from typed keys to resulting character.  When you need an IM\n"
"you probably already have one on your system.  It should work with Vim like\n"
"with other programs.  For details see |mbyte-XIM| for the X Window system "
"and\n"
"|mbyte-IME| for MS-Windows."
msgstr ""

#: usr_45.txt:343
msgid "KEYMAPS"
msgstr ""

#: usr_45.txt:345
msgid ""
"For some languages the character set is different from latin, but uses a\n"
"similar number of characters.  It's possible to map keys to characters.  Vim\n"
"uses keymaps for this.\n"
"   Suppose you want to type Hebrew.  You can load the keymap like this: >"
msgstr ""

#: usr_45.txt:350
msgid "\t:set keymap=hebrew"
msgstr ""

#: usr_45.txt:352
msgid ""
"Vim will try to find a keymap file for you.  This depends on the value of\n"
"'encoding'.  If no matching file was found, you will get an error message."
msgstr ""

#: usr_45.txt:355
msgid ""
"Now you can type Hebrew in Insert mode.  In Normal mode, and when typing a "
"\":\"\n"
"command, Vim automatically switches to English.  You can use this command to\n"
"switch between Hebrew and English: >"
msgstr ""

#: usr_45.txt:359
msgid "\tCTRL-^"
msgstr ""

#: usr_45.txt:361
msgid ""
"This only works in Insert mode and Command-line mode.  In Normal mode it "
"does\n"
"something completely different (jumps to alternate file).\n"
"   The usage of the keymap is indicated in the mode message, if you have the\n"
"'showmode' option set.  In the GUI Vim will indicate the usage of keymaps "
"with\n"
"a different cursor color.\n"
"   You can also change the usage of the keymap with the 'iminsert' and\n"
"'imsearch' options."
msgstr ""

#: usr_45.txt:369
msgid "To see the list of mappings, use this command: >"
msgstr ""

#: usr_45.txt:371
msgid "\t:lmap"
msgstr ""

#: usr_45.txt:373
msgid ""
"To find out which keymap files are available, in the GUI you can use the\n"
"Edit/Keymap menu.  Otherwise you can use this command: >"
msgstr ""

#: usr_45.txt:376
msgid "\t:echo globpath(&rtp, \"keymap/*.vim\")"
msgstr ""

#: usr_45.txt:379
msgid "DO-IT-YOURSELF KEYMAPS"
msgstr ""

#: usr_45.txt:381
msgid ""
"You can create your own keymap file.  It's not very difficult.  Start with\n"
"a keymap file that is similar to the language you want to use.  Copy it to "
"the\n"
"\"keymap\" directory in your runtime directory.  For example, for Unix, you\n"
"would use the directory \"~/.vim/keymap\".\n"
"   The name of the keymap file must look like this:"
msgstr ""

#: usr_45.txt:387
msgid ""
"\tkeymap/{name}.vim ~\n"
"or\n"
"\tkeymap/{name}_{encoding}.vim ~"
msgstr ""

#: usr_45.txt:391
msgid ""
"{name} is the name of the keymap.  Chose a name that is obvious, but "
"different\n"
"from existing keymaps (unless you want to replace an existing keymap file).\n"
"{name} cannot contain an underscore.  Optionally, add the encoding used "
"after\n"
"an underscore.  Examples:"
msgstr ""

#: usr_45.txt:396
msgid ""
"\tkeymap/hebrew.vim ~\n"
"\tkeymap/hebrew_utf-8.vim ~"
msgstr ""

#: usr_45.txt:399
msgid ""
"The contents of the file should be self-explanatory.  Look at a few of the\n"
"keymaps that are distributed with Vim.  For the details, see |mbyte-keymap|."
msgstr ""

#: usr_45.txt:403
msgid "LAST RESORT"
msgstr ""

#: usr_45.txt:405
msgid "If all other methods fail, you can enter any character with CTRL-V:"
msgstr ""

#: usr_45.txt:407
msgid ""
"\tencoding   type\t\t\trange ~\n"
"\t8-bit\t   CTRL-V 123\t\tdecimal 0-255\n"
"\t8-bit\t   CTRL-V x a1\t\thexadecimal 00-ff\n"
"\t16-bit     CTRL-V u 013b\thexadecimal 0000-ffff\n"
"\t31-bit\t   CTRL-V U 001303a4\thexadecimal 00000000-7fffffff"
msgstr ""

#: usr_45.txt:413
msgid "Don't type the spaces.  See |i_CTRL-V_digit| for the details."
msgstr ""

#: usr_45.txt:415
msgid ""
"============================================================================"
"=="
msgstr ""

#: usr_45.txt:417
msgid "Next chapter: |usr_90.txt|  Installing Vim"
msgstr ""

#: usr_45.txt:419
msgid "Copyright: see |manual-copyright|  vim:tw=78:ts=8:ft=help:norl:"
msgstr ""
