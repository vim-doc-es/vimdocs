#. extracted from usr_04.txt
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2009-08-01 19:53+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Translate Toolkit 1.3.0\n"

#: usr_04.txt:1
msgid "*usr_04.txt*\tFor Vim version 7.2.  Last change: 2006 Jun 21"
msgstr ""

#: usr_04.txt:3
msgid "\t\t     VIM USER MANUAL - by Bram Moolenaar"
msgstr ""

#: usr_04.txt:5
msgid "\t\t\t     Making small changes"
msgstr ""

#: usr_04.txt:8
msgid ""
"This chapter shows you several ways of making corrections and moving text\n"
"around.  It teaches you the three basic ways to change text: operator-"
"motion,\n"
"Visual mode and text objects."
msgstr ""

#: usr_04.txt:12
msgid ""
"|04.1|\tOperators and motions\n"
"|04.2|\tChanging text\n"
"|04.3|\tRepeating a change\n"
"|04.4|\tVisual mode\n"
"|04.5|\tMoving text\n"
"|04.6|\tCopying text\n"
"|04.7|\tUsing the clipboard\n"
"|04.8|\tText objects\n"
"|04.9|\tReplace mode\n"
"|04.10|\tConclusion"
msgstr ""

#: usr_04.txt:23
msgid ""
"     Next chapter: |usr_05.txt|  Set your settings\n"
" Previous chapter: |usr_03.txt|  Moving around\n"
"Table of contents: |usr_toc.txt|"
msgstr ""

#: usr_04.txt:27
msgid ""
"============================================================================"
"==\n"
"*04.1*\tOperators and motions"
msgstr ""

#: usr_04.txt:30
msgid ""
"In chapter 2 you learned the \"x\" command to delete a single character.  And\n"
"using a count: \"4x\" deletes four characters.\n"
"   The \"dw\" command deletes a word.  You may recognize the \"w\" command as "
"the\n"
"move word command.  In fact, the \"d\" command may be followed by any motion\n"
"command, and it deletes from the current location to the place where the\n"
"cursor winds up.\n"
"   The \"4w\" command, for example, moves the cursor over four words.  The d4w\n"
"command deletes four words."
msgstr ""

#: usr_04.txt:39
msgid ""
"\tTo err is human. To really foul up you need a computer. ~\n"
"\t\t\t ------------------>\n"
"\t\t\t\t d4w"
msgstr ""

#: usr_04.txt:43
msgid "\tTo err is human. you need a computer. ~"
msgstr ""

#: usr_04.txt:45
msgid ""
"Vim only deletes up to the position where the motion takes the cursor.  "
"That's\n"
"because Vim knows that you probably don't want to delete the first character\n"
"of a word.  If you use the \"e\" command to move to the end of a word, Vim\n"
"guesses that you do want to include that last character:"
msgstr ""

#: usr_04.txt:50
msgid ""
"\tTo err is human. you need a computer. ~\n"
"\t\t\t-------->\n"
"\t\t\t   d2e"
msgstr ""

#: usr_04.txt:54
msgid "\tTo err is human. a computer. ~"
msgstr ""

#: usr_04.txt:56
msgid ""
"Whether the character under the cursor is included depends on the command "
"you\n"
"used to move to that character.  The reference manual calls this \"exclusive\"\n"
"when the character isn't included and \"inclusive\" when it is."
msgstr ""

#: usr_04.txt:60
msgid ""
"The \"$\" command moves to the end of a line.  The \"d$\" command deletes from "
"the\n"
"cursor to the end of the line.  This is an inclusive motion, thus the last\n"
"character of the line is included in the delete operation:"
msgstr ""

#: usr_04.txt:64
msgid ""
"\tTo err is human. a computer. ~\n"
"\t\t       ------------>\n"
"\t\t\t    d$"
msgstr ""

#: usr_04.txt:68
msgid "\tTo err is human ~"
msgstr ""

#: usr_04.txt:70
msgid ""
"There is a pattern here: operator-motion.  You first type an operator "
"command.\n"
"For example, \"d\" is the delete operator.  Then you type a motion command "
"like\n"
"\"4l\" or \"w\".  This way you can operate on any text you can move over."
msgstr ""

#: usr_04.txt:74
msgid ""
"============================================================================"
"==\n"
"*04.2*\tChanging text"
msgstr ""

#: usr_04.txt:77
msgid ""
"Another operator is \"c\", change.  It acts just like the \"d\" operator, except\n"
"it leaves you in Insert mode.  For example, \"cw\" changes a word.  Or more\n"
"specifically, it deletes a word and then puts you in Insert mode."
msgstr ""

#: usr_04.txt:81
msgid ""
"\tTo err is human ~\n"
"\t   ------->\n"
"\t     c2wbe<Esc>"
msgstr ""

#: usr_04.txt:85
msgid "\tTo be human ~"
msgstr ""

#: usr_04.txt:87
msgid "This \"c2wbe<Esc>\" contains these bits:"
msgstr ""

#: usr_04.txt:89
msgid ""
"\tc\tthe change operator\n"
"\t2w\tmove two words (they are deleted and Insert mode started)\n"
"\tbe\tinsert this text\n"
"\t<Esc>\tback to Normal mode"
msgstr ""

#: usr_04.txt:94
msgid ""
"If you have paid attention, you will have noticed something strange: The "
"space\n"
"before \"human\" isn't deleted.  There is a saying that for every problem "
"there\n"
"is an answer that is simple, clear, and wrong.  That is the case with the\n"
"example used here for the \"cw\" command.  The c operator works just like the\n"
"d operator, with one exception: \"cw\".  It actually works like \"ce\", change "
"to\n"
"end of word.  Thus the space after the word isn't included.  This is an\n"
"exception that dates back to the old Vi.  Since many people are used to it\n"
"now, the inconsistency has remained in Vim."
msgstr ""

#: usr_04.txt:104
msgid "MORE CHANGES"
msgstr ""

#: usr_04.txt:106
msgid ""
"Like \"dd\" deletes a whole line, \"cc\" changes a whole line.  It keeps the\n"
"existing indent (leading white space) though."
msgstr ""

#: usr_04.txt:109
msgid ""
"Just like \"d$\" deletes until the end of the line, \"c$\" changes until the end\n"
"of the line.  It's like doing \"d$\" to delete the text and then \"a\" to start\n"
"Insert mode and append new text."
msgstr ""

#: usr_04.txt:114
msgid "SHORTCUTS"
msgstr ""

#: usr_04.txt:116
msgid ""
"Some operator-motion commands are used so often that they have been given a\n"
"single letter command:"
msgstr ""

#: usr_04.txt:119
msgid ""
"\tx  stands for  dl  (delete character under the cursor)\n"
"\tX  stands for  dh  (delete character left of the cursor)\n"
"\tD  stands for  d$  (delete to end of the line)\n"
"\tC  stands for  c$  (change to end of the line)\n"
"\ts  stands for  cl  (change one character)\n"
"\tS  stands for  cc  (change a whole line)"
msgstr ""

#: usr_04.txt:127
msgid "WHERE TO PUT THE COUNT"
msgstr ""

#: usr_04.txt:129
msgid ""
"The commands \"3dw\" and \"d3w\" delete three words.  If you want to get really\n"
"picky about things, the first command, \"3dw\", deletes one word three times;\n"
"the command \"d3w\" deletes three words once.  This is a difference without a\n"
"distinction.  You can actually put in two counts, however.  For example,\n"
"\"3d2w\" deletes two words, repeated three times, for a total of six words."
msgstr ""

#: usr_04.txt:136
msgid "REPLACING WITH ONE CHARACTER"
msgstr ""

#: usr_04.txt:138
msgid ""
"The \"r\" command is not an operator.  It waits for you to type a character, "
"and\n"
"will replace the character under the cursor with it.  You could do the same\n"
"with \"cl\" or with the \"s\" command, but with \"r\" you don't have to press "
"<Esc>"
msgstr ""

#: usr_04.txt:142
msgid ""
"\tthere is somerhing grong here ~\n"
"\trT\t     rt    rw"
msgstr ""

#: usr_04.txt:145
msgid "\tThere is something wrong here ~"
msgstr ""

#: usr_04.txt:147
msgid ""
"Using a count with \"r\" causes that many characters to be replaced with the\n"
"same character.  Example:"
msgstr ""

#: usr_04.txt:150
msgid ""
"\tThere is something wrong here ~\n"
"\t\t\t   5rx"
msgstr ""

#: usr_04.txt:153
msgid "\tThere is something xxxxx here ~"
msgstr ""

#: usr_04.txt:155
msgid ""
"To replace a character with a line break use \"r<Enter>\".  This deletes one\n"
"character and inserts a line break.  Using a count here only applies to the\n"
"number of characters deleted: \"4r<Enter>\" replaces four characters with one\n"
"line break."
msgstr ""

#: usr_04.txt:160
msgid ""
"============================================================================"
"==\n"
"*04.3*\tRepeating a change"
msgstr ""

#: usr_04.txt:163
msgid ""
"The \".\" command is one of the most simple yet powerful commands in Vim.  It\n"
"repeats the last change.  For instance, suppose you are editing an HTML file\n"
"and want to delete all the <B> tags.  You position the cursor on the first <\n"
"and delete the <B> with the command \"df>\".  You then go to the < of the next\n"
"</B> and kill it using the \".\" command.  The \".\" command executes the last\n"
"change command (in this case, \"df>\").  To delete another tag, position the\n"
"cursor on the < and use the \".\" command."
msgstr ""

#: usr_04.txt:171
msgid ""
"\t\t\t      To <B>generate</B> a table of <B>contents ~\n"
"\tf<   find first <     --->\n"
"\tdf>  delete to >\t -->\n"
"\tf<   find next <\t   --------->\n"
"\t.    repeat df>\t\t\t    --->\n"
"\tf<   find next <\t\t       ------------->\n"
"\t.    repeat df>\t\t\t\t\t    -->"
msgstr ""

#: usr_04.txt:179
msgid ""
"The \".\" command works for all changes you make, except for the \"u\" (undo),\n"
"CTRL-R (redo) and commands that start with a colon (:)."
msgstr ""

#: usr_04.txt:182
msgid ""
"Another example: You want to change the word \"four\" to \"five\".  It appears\n"
"several times in your text.  You can do this quickly with this sequence of\n"
"commands:"
msgstr ""

#: usr_04.txt:186
msgid ""
"\t/four<Enter>\tfind the first string \"four\"\n"
"\tcwfive<Esc>\tchange the word to \"five\"\n"
"\tn\t\tfind the next \"four\"\n"
"\t.\t\trepeat the change to \"five'\n"
"\tn\t\tfind the next \"four\"\n"
"\t.\t\trepeat the change\n"
"\t\t\tetc."
msgstr ""

#: usr_04.txt:194
msgid ""
"============================================================================"
"==\n"
"*04.4*\tVisual mode"
msgstr ""

#: usr_04.txt:197
msgid ""
"To delete simple items the operator-motion changes work quite well.  But "
"often\n"
"it's not so easy to decide which command will move over the text you want to\n"
"change.  Then you can use Visual mode."
msgstr ""

#: usr_04.txt:201
msgid ""
"You start Visual mode by pressing \"v\".  You move the cursor over the text "
"you\n"
"want to work on.  While you do this, the text is highlighted.  Finally type\n"
"the operator command.\n"
"   For example, to delete from halfway one word to halfway another word:"
msgstr ""

#: usr_04.txt:206
msgid ""
"\t\tThis is an examination sample of visual mode ~\n"
"\t\t\t       ---------->\n"
"\t\t\t\t velllld"
msgstr ""

#: usr_04.txt:210
msgid "\t\tThis is an example of visual mode ~"
msgstr ""

#: usr_04.txt:212
msgid ""
"When doing this you don't really have to count how many times you have to\n"
"press \"l\" to end up in the right position.  You can immediately see what "
"text\n"
"will be deleted when you press \"d\"."
msgstr ""

#: usr_04.txt:216
msgid ""
"If at any time you decide you don't want to do anything with the highlighted\n"
"text, just press <Esc> and Visual mode will stop without doing anything."
msgstr ""

#: usr_04.txt:220
msgid "SELECTING LINES"
msgstr ""

#: usr_04.txt:222
msgid ""
"If you want to work on whole lines, use \"V\" to start Visual mode.  You will\n"
"see right away that the whole line is highlighted, without moving around.\n"
"When you move left or right nothing changes.  When you move up or down the\n"
"selection is extended whole lines at a time.\n"
"   For example, select three lines with \"Vjj\":"
msgstr ""

#: usr_04.txt:228
msgid ""
"\t\t\t  +------------------------+\n"
"\t\t\t  | text more text\t   |\n"
"\t\t       >> | more text more text    | |\n"
"\tselected lines >> | text text text\t   | | Vjj\n"
"\t\t       >> | text more\t\t   | V\n"
"\t\t\t  | more text more\t   |\n"
"\t\t\t  +------------------------+"
msgstr ""

#: usr_04.txt:237
msgid "SELECTING BLOCKS"
msgstr ""

#: usr_04.txt:239
msgid ""
"If you want to work on a rectangular block of characters, use CTRL-V to "
"start\n"
"Visual mode.  This is very useful when working on tables."
msgstr ""

#: usr_04.txt:242
msgid ""
"\t\tname\t\tQ1\tQ2\tQ3\n"
"\t\tpierre\t\t123\t455\t234\n"
"\t\tjohn\t\t0\t90\t39\n"
"\t\tsteve\t\t392\t63\t334"
msgstr ""

#: usr_04.txt:247
msgid ""
"To delete the middle \"Q2\" column, move the cursor to the \"Q\" of \"Q2\".  Press\n"
"CTRL-V to start blockwise Visual mode.  Now move the cursor three lines down\n"
"with \"3j\" and to the next word with \"w\".  You can see the first character of\n"
"the last column is included.  To exclude it, use \"h\".  Now press \"d\" and the\n"
"middle column is gone."
msgstr ""

#: usr_04.txt:254
msgid "GOING TO THE OTHER SIDE"
msgstr ""

#: usr_04.txt:256
msgid ""
"If you have selected some text in Visual mode, and discover that you need to\n"
"change the other end of the selection, use the \"o\" command (Hint: o for "
"other\n"
"end).  The cursor will go to the other end, and you can move the cursor to\n"
"change where the selection starts.  Pressing \"o\" again brings you back to "
"the\n"
"other end."
msgstr ""

#: usr_04.txt:262
msgid ""
"When using blockwise selection, you have four corners.  \"o\" only takes you "
"to\n"
"one of the other corners, diagonally.  Use \"O\" to move to the other corner "
"in\n"
"the same line."
msgstr ""

#: usr_04.txt:266
msgid ""
"Note that \"o\" and \"O\" in Visual mode work very different from Normal mode,\n"
"where they open a new line below or above the cursor."
msgstr ""

#: usr_04.txt:269
msgid ""
"============================================================================"
"==\n"
"*04.5*\tMoving text"
msgstr ""

#: usr_04.txt:272
msgid ""
"When you delete something with the \"d\", \"x\", or another command, the text is\n"
"saved.  You can paste it back by using the p command.  (The Vim name for\n"
"this is put).\n"
"   Take a look at how this works.  First you will delete an entire line, by\n"
"putting the cursor on the line you want to delete and typing \"dd\".  Now you\n"
"move the cursor to where you want to put the line and use the \"p\" (put)\n"
"command.  The line is inserted on the line below the cursor."
msgstr ""

#: usr_04.txt:280
msgid ""
"\ta line\t\ta line\t      a line\n"
"\tline 2\t  dd\tline 3\t  p   line 3\n"
"\tline 3\t\t\t      line 2"
msgstr ""

#: usr_04.txt:284
msgid ""
"Because you deleted an entire line, the \"p\" command placed the text line "
"below\n"
"the cursor.  If you delete part of a line (a word, for instance), the \"p\"\n"
"command puts it just after the cursor."
msgstr ""

#: usr_04.txt:288
msgid ""
"\tSome more boring try text to out commands. ~\n"
"\t\t\t ---->\n"
"\t\t\t  dw"
msgstr ""

#: usr_04.txt:292
msgid ""
"\tSome more boring text to out commands. ~\n"
"\t\t\t ------->\n"
"\t\t\t    welp"
msgstr ""

#: usr_04.txt:296
msgid "\tSome more boring text to try out commands. ~"
msgstr ""

#: usr_04.txt:299
msgid "MORE ON PUTTING"
msgstr ""

#: usr_04.txt:301
msgid ""
"The \"P\" command puts text like \"p\", but before the cursor.  When you deleted "
"a\n"
"whole line with \"dd\", \"P\" will put it back above the cursor.  When you "
"deleted\n"
"a word with \"dw\", \"P\" will put it back just before the cursor."
msgstr ""

#: usr_04.txt:305
msgid ""
"You can repeat putting as many times as you like.  The same text will be "
"used."
msgstr ""

#: usr_04.txt:307
msgid ""
"You can use a count with \"p\" and \"P\".  The text will be repeated as many "
"times\n"
"as specified with the count.  Thus \"dd\" and then \"3p\" puts three copies of "
"the\n"
"same deleted line."
msgstr ""

#: usr_04.txt:312
msgid "SWAPPING TWO CHARACTERS"
msgstr ""

#: usr_04.txt:314
msgid ""
"Frequently when you are typing, your fingers get ahead of your brain (or the\n"
"other way around?).  The result is a typo such as \"teh\" for \"the\".  Vim\n"
"makes it easy to correct such problems.  Just put the cursor on the e of "
"\"teh\"\n"
"and execute the command \"xp\".  This works as follows: \"x\" deletes the\n"
"character e and places it in a register.  \"p\" puts the text after the "
"cursor,\n"
"which is after the h."
msgstr ""

#: usr_04.txt:321
msgid ""
"\tteh     th     the ~\n"
"\t x       p"
msgstr ""

#: usr_04.txt:324
msgid ""
"============================================================================"
"==\n"
"*04.6*\tCopying text"
msgstr ""

#: usr_04.txt:327
msgid ""
"To copy text from one place to another, you could delete it, use \"u\" to undo\n"
"the deletion and then \"p\" to put it somewhere else.  There is an easier way:\n"
"yanking.  The \"y\" operator copies text into a register.  Then a \"p\" command\n"
"can be used to put it.\n"
"   Yanking is just a Vim name for copying.  The \"c\" letter was already used\n"
"for the change operator, and \"y\" was still available.  Calling this\n"
"operator \"yank\" made it easier to remember to use the \"y\" key."
msgstr ""

#: usr_04.txt:335
msgid ""
"Since \"y\" is an operator, you use \"yw\" to yank a word.  A count is possible "
"as\n"
"usual.  To yank two words use \"y2w\".  Example:"
msgstr ""

#: usr_04.txt:338
msgid ""
"\tlet sqr = LongVariable * ~\n"
"\t\t -------------->\n"
"\t\t       y2w"
msgstr ""

#: usr_04.txt:342
msgid ""
"\tlet sqr = LongVariable * ~\n"
"\t\t\t       p"
msgstr ""

#: usr_04.txt:345
msgid "\tlet sqr = LongVariable * LongVariable ~"
msgstr ""

#: usr_04.txt:347
msgid ""
"Notice that \"yw\" includes the white space after a word.  If you don't want\n"
"this, use \"ye\"."
msgstr ""

#: usr_04.txt:350
msgid ""
"The \"yy\" command yanks a whole line, just like \"dd\" deletes a whole line.\n"
"Unexpectedly, while \"D\" deletes from the cursor to the end of the line, \"Y\"\n"
"works like \"yy\", it yanks the whole line.  Watch out for this inconsistency!\n"
"Use \"y$\" to yank to the end of the line."
msgstr ""

#: usr_04.txt:355
msgid ""
"\ta text line   yy\ta text line\t       a text line\n"
"\tline 2\t\t\tline 2\t\tp      line 2\n"
"\tlast line\t\tlast line\t       a text line\n"
"\t\t\t\t\t\t       last line"
msgstr ""

#: usr_04.txt:360
msgid ""
"============================================================================"
"==\n"
"*04.7*\tUsing the clipboard"
msgstr ""

#: usr_04.txt:363
msgid ""
"If you are using the GUI version of Vim (gvim), you can find the \"Copy\" item\n"
"in the \"Edit\" menu.  First select some text with Visual mode, then use the\n"
"Edit/Copy menu.  The selected text is now copied to the clipboard.  You can\n"
"paste the text in other programs.  In Vim itself too."
msgstr ""

#: usr_04.txt:368
msgid ""
"If you have copied text to the clipboard in another application, you can "
"paste\n"
"it in Vim with the Edit/Paste menu.  This works in Normal mode and Insert\n"
"mode.  In Visual mode the selected text is replaced with the pasted text."
msgstr ""

#: usr_04.txt:372
msgid ""
"The \"Cut\" menu item deletes the text before it's put on the clipboard.  The\n"
"\"Copy\", \"Cut\" and \"Paste\" items are also available in the popup menu (only\n"
"when there is a popup menu, of course).  If your Vim has a toolbar, you can\n"
"also find these items there."
msgstr ""

#: usr_04.txt:377
msgid ""
"If you are not using the GUI, or if you don't like using a menu, you have to\n"
"use another way.  You use the normal \"y\" (yank) and \"p\" (put) commands, but\n"
"prepend \"* (double-quote star) before it.  To copy a line to the clipboard: "
">"
msgstr ""

#: usr_04.txt:381
msgid "\t\"*yy"
msgstr ""

#: usr_04.txt:383
msgid "To put text from the clipboard back into the text: >"
msgstr ""

#: usr_04.txt:385
msgid "\t\"*p"
msgstr ""

#: usr_04.txt:387
msgid ""
"This only works on versions of Vim that include clipboard support.  More "
"about\n"
"the clipboard in section |09.3| and here: |clipboard|."
msgstr ""

#: usr_04.txt:390
msgid ""
"============================================================================"
"==\n"
"*04.8*\tText objects"
msgstr ""

#: usr_04.txt:393
msgid ""
"If the cursor is in the middle of a word and you want to delete that word, "
"you\n"
"need to move back to its start before you can do \"dw\".  There is a simpler "
"way\n"
"to do this: \"daw\"."
msgstr ""

#: usr_04.txt:397
msgid ""
"\tthis is some example text. ~\n"
"\t\t       daw"
msgstr ""

#: usr_04.txt:400
msgid "\tthis is some text. ~"
msgstr ""

#: usr_04.txt:402
msgid ""
"The \"d\" of \"daw\" is the delete operator.  \"aw\" is a text object.  Hint: \"aw\"\n"
"stands for \"A Word\".  Thus \"daw\" is \"Delete A Word\".  To be precise, the "
"white\n"
"space after the word is also deleted (the white space before the word at the\n"
"end of the line)."
msgstr ""

#: usr_04.txt:407
msgid ""
"Using text objects is the third way to make changes in Vim.  We already had\n"
"operator-motion and Visual mode.  Now we add operator-text object.\n"
"   It is very similar to operator-motion, but instead of operating on the "
"text\n"
"between the cursor position before and after a movement command, the text\n"
"object is used as a whole.  It doesn't matter where in the object the cursor\n"
"was."
msgstr ""

#: usr_04.txt:414
msgid "To change a whole sentence use \"cis\".  Take this text:"
msgstr ""

#: usr_04.txt:416
msgid ""
"\tHello there.  This ~\n"
"\tis an example.  Just ~\n"
"\tsome text. ~"
msgstr ""

#: usr_04.txt:420
msgid "Move to the start of the second line, on \"is an\".  Now use \"cis\":"
msgstr ""

#: usr_04.txt:422
msgid ""
"\tHello there.    Just ~\n"
"\tsome text. ~"
msgstr ""

#: usr_04.txt:425
msgid ""
"The cursor is in between the blanks in the first line.  Now you type the new\n"
"sentence \"Another line.\":"
msgstr ""

#: usr_04.txt:428
msgid ""
"\tHello there.  Another line.  Just ~\n"
"\tsome text. ~"
msgstr ""

#: usr_04.txt:431
msgid ""
"\"cis\" consists of the \"c\" (change) operator and the \"is\" text object.  This\n"
"stands for \"Inner Sentence\".  There is also the \"as\" (a sentence) object.  "
"The\n"
"difference is that \"as\" includes the white space after the sentence and \"is\"\n"
"doesn't.  If you would delete a sentence, you want to delete the white space\n"
"at the same time, thus use \"das\".  If you want to type new text the white\n"
"space can remain, thus you use \"cis\"."
msgstr ""

#: usr_04.txt:438
msgid ""
"You can also use text objects in Visual mode.  It will include the text "
"object\n"
"in the Visual selection.  Visual mode continues, thus you can do this "
"several\n"
"times.  For example, start Visual mode with \"v\" and select a sentence with\n"
"\"as\".  Now you can repeat \"as\" to include more sentences.  Finally you use "
"an\n"
"operator to do something with the selected sentences."
msgstr ""

#: usr_04.txt:444
msgid "You can find a long list of text objects here: |text-objects|."
msgstr ""

#: usr_04.txt:446
msgid ""
"============================================================================"
"==\n"
"*04.9*\tReplace mode"
msgstr ""

#: usr_04.txt:449
msgid ""
"The \"R\" command causes Vim to enter replace mode.  In this mode, each\n"
"character you type replaces the one under the cursor.  This continues until\n"
"you type <Esc>.\n"
"   In this example you start Replace mode on the first \"t\" of \"text\":"
msgstr ""

#: usr_04.txt:454
msgid ""
"\tThis is text. ~\n"
"\t\tRinteresting.<Esc>"
msgstr ""

#: usr_04.txt:457
msgid "\tThis is interesting. ~"
msgstr ""

#: usr_04.txt:459
msgid ""
"You may have noticed that this command replaced 5 characters in the line "
"with\n"
"twelve others.  The \"R\" command automatically extends the line if it runs "
"out\n"
"of characters to replace.  It will not continue on the next line."
msgstr ""

#: usr_04.txt:463
msgid ""
"You can switch between Insert mode and Replace mode with the <Insert> key."
msgstr ""

#: usr_04.txt:465
msgid ""
"When you use <BS> (backspace) to make correction, you will notice that the\n"
"old text is put back.  Thus it works like an undo command for the last typed\n"
"character."
msgstr ""

#: usr_04.txt:469
msgid ""
"============================================================================"
"==\n"
"*04.10*\tConclusion"
msgstr ""

#: usr_04.txt:472
msgid ""
"The operators, movement commands and text objects give you the possibility "
"to\n"
"make lots of combinations.  Now that you know how it works, you can use N\n"
"operators with M movement commands to make N * M commands!"
msgstr ""

#: usr_04.txt:476
msgid "You can find a list of operators here: |operator|"
msgstr ""

#: usr_04.txt:478
msgid ""
"For example, there are many other ways to delete pieces of text.  Here are a\n"
"few often used ones:"
msgstr ""

#: usr_04.txt:481
msgid ""
"x\tdelete character under the cursor (short for \"dl\")\n"
"X\tdelete character before the cursor (short for \"dh\")\n"
"D\tdelete from cursor to end of line (short for \"d$\")\n"
"dw\tdelete from cursor to next start of word\n"
"db\tdelete from cursor to previous start of word\n"
"diw\tdelete word under the cursor (excluding white space)\n"
"daw\tdelete word under the cursor (including white space)\n"
"dG\tdelete until the end of the file\n"
"dgg\tdelete until the start of the file"
msgstr ""

#: usr_04.txt:491
msgid ""
"If you use \"c\" instead of \"d\" they become change commands.  And with \"y\" you\n"
"yank the text.  And so forth."
msgstr ""

#: usr_04.txt:495
msgid ""
"There are a few often used commands to make changes that didn't fit "
"somewhere\n"
"else:"
msgstr ""

#: usr_04.txt:498
msgid ""
"\t~\tchange case of the character under the cursor, and move the\n"
"\t\tcursor to the next character.  This is not an operator (unless\n"
"\t\t'tildeop' is set), thus you can't use it with a motion\n"
"\t\tcommand.  It does works in Visual mode and changes case for\n"
"\t\tall the selected text then."
msgstr ""

#: usr_04.txt:504
msgid ""
"\tI\tStart Insert mode after moving the cursor to the first\n"
"\t\tnon-blank in the line."
msgstr ""

#: usr_04.txt:507
msgid ""
"\tA\tStart Insert mode after moving the cursor to the end of the\n"
"\t\tline."
msgstr ""

#: usr_04.txt:510
msgid ""
"============================================================================"
"=="
msgstr ""

#: usr_04.txt:512
msgid "Next chapter: |usr_05.txt|  Set your settings"
msgstr ""

#: usr_04.txt:514
msgid "Copyright: see |manual-copyright|  vim:tw=78:ts=8:ft=help:norl:"
msgstr ""
